# PROJECT DUMP
# Root: /home/blackkungfu/manyagi-site
# Generated: 2025-10-22 15:59:42.092243
# Limits: NO LIMITS (danger: huge output possible)
# Skips: .cache, .git, .husky, .next, .turbo, .venv, .vercel, .vscode, _scanscratch, build, coverage, cypress, dist, node_modules, out, playwright, scan_reports, venv
# Never dump: .env*, lockfiles

## ROUTES (Next.js-style)
- /
- /404
- /500
- /about
- /admin
- /api/admin/fulfillment/retry
- /api/admin/quick-create-product
- /api/admin/upload-asset
- /api/admin/upload-asset-multi
- /api/checkout/create-session
- /api/order-details
- /api/posts
- /api/posts/:slug
- /api/products
- /api/realty/:slug
- /api/realty/availability
- /api/realty/book
- /api/realty/booking-success
- /api/realty/booking-summary
- /api/realty/booking/:slug
- /api/realty/cleanup-holds
- /api/realty/create-checkout
- /api/realty/external-blocks
- /api/realty/ical
- /api/realty/ical-export
- /api/realty/property
- /api/realty/quote
- /api/realty/send-booking-confirmation
- /api/realty/sync-ical
- /api/realty/test-email
- /api/site-config
- /api/stripe-webhook
- /api/stripe/charge
- /api/track
- /blog
- /blog/:slug
- /capital
- /cart
- /coming-soon
- /contact
- /dashboard
- /designs
- /links
- /login
- /media
- /privacy
- /products
- /publishing
- /realty
- /signup
- /tech
- /terms
- /thank-you
- /track

### Dynamic Routes
- /blog/:slug  ← pages/blog/[slug].js
- /api/realty/:slug  ← pages/api/realty/[slug].js
- /api/posts/:slug  ← pages/api/posts/[slug].js
- /api/realty/booking/:slug  ← pages/api/realty/booking/[slug].js

## DIRECTORY TREE
manyagi-site/
├── components
│   ├── Calendar.js
│   ├── Card.js
│   ├── Cart.js
│   ├── ErrorBoundary.js
│   ├── Footer.js
│   ├── Header.js
│   ├── Hero.js
│   ├── Recommender.js
│   ├── SEO.js
│   ├── SignalsSubscriptionForm.js
│   ├── SubscriptionForm.js
│   └── ThemeToggle.js
├── lib
│   ├── emails
│   │   ├── bookingReceipt.js
│   │   └── itineraryEmail.js
│   ├── cartSlice.js
│   ├── emailTemplates.js
│   ├── printful.js
│   ├── realtyHelpers.js
│   ├── sendEmail.js
│   ├── store.js
│   ├── supabase.js
│   └── supabaseAdmin.js
├── pages
│   ├── api
│   │   ├── admin
│   │   │   ├── fulfillment
│   │   │   │   └── retry.js
│   │   │   ├── quick-create-product.js
│   │   │   ├── upload-asset-multi.js
│   │   │   └── upload-asset.js
│   │   ├── checkout
│   │   │   └── create-session.js
│   │   ├── posts
│   │   │   └── [slug].js
│   │   ├── realty
│   │   │   ├── booking
│   │   │   │   └── [slug].js
│   │   │   ├── [slug].js
│   │   │   ├── availability.js
│   │   │   ├── book.js
│   │   │   ├── booking-success.js
│   │   │   ├── booking-summary.js
│   │   │   ├── cleanup-holds.js
│   │   │   ├── create-checkout.js
│   │   │   ├── external-blocks.js
│   │   │   ├── ical-export.js
│   │   │   ├── ical.js
│   │   │   ├── property.js
│   │   │   ├── quote.js
│   │   │   ├── send-booking-confirmation.js
│   │   │   ├── sync-ical.js
│   │   │   └── test-email.js
│   │   ├── stripe
│   │   │   └── charge.js
│   │   ├── order-details.js
│   │   ├── posts.js
│   │   ├── products.js
│   │   ├── site-config.js
│   │   ├── stripe-webhook.js
│   │   └── track.js
│   ├── blog
│   │   └── [slug].js
│   ├── 404.js
│   ├── 500.js
│   ├── _app.js
│   ├── _document.js
│   ├── about.js
│   ├── admin.js
│   ├── blog.js
│   ├── capital.js
│   ├── cart.js
│   ├── coming-soon.js
│   ├── contact.js
│   ├── dashboard.js
│   ├── designs.js
│   ├── index.js
│   ├── links.js
│   ├── login.js
│   ├── media.js
│   ├── privacy.js
│   ├── products.js
│   ├── publishing.js
│   ├── realty.js
│   ├── signup.js
│   ├── tech.js
│   ├── terms.js
│   ├── thank-you.js
│   └── track.js
├── posts
│   └── example-post.mdx
├── public
│   ├── assets
│   │   ├── Legacy_of_the_Hidden_Clans (Chapter 1)_by D.N. Manyagi.pdf
│   │   └── Legacy_of_the_Hidden_Clans (Chapter 2)_by D.N. Manyagi.pdf
│   ├── images
│   │   ├── app-carousel-1.webp
│   │   ├── app-carousel-2.webp
│   │   ├── app-carousel-3.webp
│   │   ├── author-portrait.webp
│   │   ├── book-carousel-1.webp
│   │   ├── book-carousel-2.webp
│   │   ├── book-carousel-3.webp
│   │   ├── book-carousel-4.webp
│   │   ├── chart-hero.webp
│   │   ├── daito-screenshot.webp
│   │   ├── grain-texture.png
│   │   ├── home-carousel-1.webp
│   │   ├── home-carousel-2.webp
│   │   ├── home-carousel-3.webp
│   │   ├── legacy-chapter-1.webp
│   │   ├── logo.svg
│   │   ├── logo.webp
│   │   ├── merch-carousel-1.webp
│   │   ├── merch-carousel-2.webp
│   │   ├── merch-carousel-3.webp
│   │   ├── merch-carousel-4.webp
│   │   ├── merch-carousel-5.webp
│   │   ├── mock-mug-1.webp
│   │   ├── mock-print-1.webp
│   │   ├── mock-tee-1.webp
│   │   ├── og-about.webp
│   │   ├── og-capital.webp
│   │   ├── og-comingsoon.webp
│   │   ├── og-contact.webp
│   │   ├── og-designs.webp
│   │   ├── og-home.webp
│   │   ├── og-media.webp
│   │   ├── og-publishing.webp
│   │   ├── og-tech.webp
│   │   ├── performance-chart.webp
│   │   ├── team-photo.webp
│   │   ├── video-carousel-1.webp
│   │   ├── video-carousel-2.webp
│   │   ├── video-carousel-3.webp
│   │   ├── video-carousel-4.webp
│   │   └── video-carousel-5.webp
│   ├── videos
│   │   └── hero-bg.mp4
│   ├── favicon.ico
│   ├── placeholder.png
│   ├── robots.txt
│   ├── sitemap-0.xml
│   └── sitemap.xml
├── styles
│   └── globals.css
├── .gitignore
├── next-env.d.ts
├── next-sitemap.config.js
├── next.config.js
├── package-lock.json  (not dumped)
├── package.json
├── postcss.config.js
├── project_dump.py
├── project_structure.txt
├── repo_scanner.py
├── requirements.txt
├── show_structure.py
├── tailwind.config.js
└── tsconfig.json

## FILE CONTENTS


===== FILE: components/Calendar.js  (size=957 bytes) =====
// components/Calendar.js
import { Calendar, dateFnsLocalizer } from 'react-big-calendar';
import { format, parse, startOfWeek, getDay } from 'date-fns';
import enUS from 'date-fns/locale/en-US'; // Added import
import 'react-big-calendar/lib/css/react-big-calendar.css';

const localizer = dateFnsLocalizer({
  format,
  parse,
  startOfWeek,
  getDay,
  locales: { 'en-US': enUS } // Added locales
});

export default function EventCalendar({ events }) {
  const formattedEvents = events.map(event => ({
    title: event.title,
    start: new Date(event.date),
    end: new Date(event.date),
    allDay: true,
  }));

  return (
    <div className="h-[600px]">
      <Calendar
        localizer={localizer}
        events={formattedEvents}
        startAccessor="start"
        endAccessor="end"
        style={{ height: '100%' }}
        className="bg-white dark:bg-gray-800 p-4 rounded glass"
      />
    </div>
  );
}


===== FILE: components/Card.js  (size=5196 bytes) =====
// components/Card.js
import { motion } from 'framer-motion';
import { useDispatch } from 'react-redux';
import { addToCart } from '../lib/cartSlice';

const Card = ({
  children,
  className = '',
  title,
  description,
  image,
  link,
  category,
  buyButton = null,   // product object
  onBuy,              // optional handler from parent
  tags = [],          // optional explicit tags (fallback if product.tags missing)
  showTags = true,
  showNftBadge = true,
}) => {
  const dispatch = useDispatch();

  // product payload coming from parent (Designs page)
  const product = buyButton || {};
  const resolvedTags =
    Array.isArray(product.tags) && product.tags.length ? product.tags : tags;

  // we support either top-level nft_url or metadata.nft_url
  const nftUrl = product?.nft_url || product?.metadata?.nft_url || null;
  const hasNFT = Boolean(nftUrl);

  const handleClick = () => {
    if (category && typeof window !== 'undefined') {
      try {
        const clicks = JSON.parse(localStorage.getItem('clicks') || '{}');
        clicks[category] = (clicks[category] || 0) + 1;
        localStorage.setItem('clicks', JSON.stringify(clicks));
      } catch {
        /* ignore localStorage errors */
      }
    }
  };

  const handleBuy = (p) => {
    dispatch(addToCart(p));
  };

  return (
    <motion.article
      initial={{ opacity: 0, y: 20 }}
      whileInView={{ opacity: 1, y: 0 }}
      viewport={{ once: true }}
      transition={{ duration: 0.5 }}
      className={`card bg-white rounded-xl shadow-lg overflow-hidden transition-shadow hover:shadow-xl dark:bg-gray-900 ${className}`}
      role="article"
      onClick={handleClick}
    >
      {/* Media */}
      <div className="relative">
        {image && (
          <img
            src={image}
            alt={title || 'Card Image'}
            className="w-full h-[300px] object-cover"
            loading="lazy"
            onError={(e) => {
              if (e.currentTarget.src !== '/placeholder.png') {
                e.currentTarget.src = '/placeholder.png';
              }
            }}
          />
        )}

        {/* NFT Ribbon (clickable) */}
        {showNftBadge && hasNFT && (
          <a
            href={nftUrl}
            target="_blank"
            rel="noopener noreferrer"
            onClick={(e) => e.stopPropagation()}
            className="absolute top-3 right-3 bg-black/80 text-white text-xs font-semibold px-2 py-1 rounded"
            title="View NFT on OpenSea"
          >
            NFT
          </a>
        )}
      </div>

      {/* Body */}
      <div className="p-6 text-center">
        {title && <h3 className="text-2xl font-bold mb-4">{title}</h3>}
        {description && (
          <p className="text-gray-700 dark:text-gray-300 text-base mb-4">
            {description}
          </p>
        )}

        {/* Tags */}
        {showTags && Array.isArray(resolvedTags) && resolvedTags.length > 0 && (
          <div className="flex flex-wrap gap-2 justify-center mb-4">
            {resolvedTags.map((t) => (
              <span
                key={t}
                className="text-xs px-2 py-1 rounded-full bg-gray-100 text-gray-700 dark:bg-gray-800 dark:text-gray-200"
              >
                {t}
              </span>
            ))}
          </div>
        )}

        {/* Learn more (optional) */}
        {link && (
          <a
            href={link}
            className={`btn bg-purple-600 text-white py-2 px-4 rounded hover:bg-purple-700 transition block mx-auto w-fit mb-4 ${
              className && className.includes('capital') ? 'hover:bg-purple-500' : ''
            }`}
            target="_blank"
            rel="noopener noreferrer"
          >
            Learn More
          </a>
        )}

        {/* Actions */}
        <div className="flex flex-wrap gap-3 justify-center">
          {buyButton && (
            <button
              onClick={(e) => {
                e.stopPropagation();
                if (typeof onBuy === 'function') onBuy(buyButton);
                else handleBuy(buyButton);
              }}
              className="btn bg-yellow-500 text-black py-2 px-4 rounded hover:bg-yellow-400 transition"
            >
              Buy Now
              {typeof buyButton.price !== 'undefined'
                ? ` - $${Number(buyButton.price).toFixed(2)}`
                : ''}
            </button>
          )}

          {hasNFT && (
            <a
              href={nftUrl}
              target="_blank"
              rel="noopener noreferrer"
              onClick={(e) => e.stopPropagation()}
              className="btn bg-gray-900 text-white py-2 px-4 rounded hover:bg-black transition"
              title="View NFT"
            >
              View NFT
            </a>
          )}
        </div>

        {/* Extra children */}
        <div className="flex flex-wrap justify-center gap-4 items-center mt-4">
          {children}
        </div>
      </div>
    </motion.article>
  );
};

export default Card;


===== FILE: components/Cart.js  (size=7151 bytes) =====
// components/Cart.js
import { useSelector, useDispatch } from 'react-redux';
import { removeFromCart, updateQuantity } from '@/lib/cartSlice';
import Link from 'next/link';
import { loadStripe } from '@stripe/stripe-js';
import Recommender from './Recommender';
import { useState } from 'react';

const stripePromise = loadStripe(
  process.env.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY,
  { automaticMode: 'auto' }
);

// --- helpers ---
function lineItemImageSrc(item) {
  return (
    item.thumbnail_url ||               // what your Designs products use
    item.image_url ||                   // legacy / optional
    item.thumbnail ||                   // safety
    item.image ||                       // safety
    item?.product?.thumbnail_url ||     // if you nest product on the item
    item?.product?.image_url ||         // safety
    '/placeholder.png'                  // CSP-safe local fallback
  );
}

const Cart = () => {
  const items = useSelector((state) => state.cart.items || []);
  const dispatch = useDispatch();
  const [email, setEmail] = useState('');
  const [address, setAddress] = useState({
    address1: '', city: '', state: '', country: 'US', zip: ''
  });
  const [error, setError] = useState('');

  const total = Array.isArray(items)
    ? items.reduce((acc, item) => acc + (Number(item.price) * (item.quantity || 1)), 0)
    : 0;

  const handleCheckout = async () => {
    if (!email) {
      setError('Email required');
      return;
    }
    if (
      items.some(i =>
        i.division === 'designs' ||
        i.division === 'publishing' ||
        i.division === 'realty'
      ) &&
      (!address.address1 || !address.city)
    ) {
      setError('Address required for physical items or rentals');
      return;
    }
    setError('');

    const stripe = await stripePromise;
    try {
      const response = await fetch('/api/stripe/charge', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ items, email, address }),
      });
      const data = await response.json();
      if (data.url) {
        window.location.href = data.url;
      } else {
        alert('Failed to initiate checkout');
      }
    } catch (error) {
      console.error('Checkout error:', error);
      alert('An error occurred during checkout');
    }
  };

  return (
    <div className="card max-w-2xl mx-auto bg-white text-black glass py-10">
      <h2 className="text-3xl font-bold mb-6">Your Cart</h2>

      {items.length === 0 ? (
        <p className="text-gray-600 text-base mb-4">
          Cart is empty.{` `}
          <Link href="/designs" className="text-blue-600 hover:underline">
            Shop Designs
          </Link>.
        </p>
      ) : (
        <>
          <ul className="space-y-4 mb-6">
            {Array.isArray(items) && items.map((item) => (
              <li key={item.id} className="flex justify-between items-center pb-4 border-b border-gray-300">
                <div className="flex items-center gap-4">
                  <img
                    src={lineItemImageSrc(item)}
                    alt={item.name || 'Product image'}
                    className="w-[100px] h-[100px] object-cover rounded bg-gray-100"
                    onError={(e) => { e.currentTarget.src = '/placeholder.png'; }}
                  />
                  <div>
                    <span className="text-base">
                      {item.name} ({item.division})
                    </span>
                    <input
                      type="number"
                      value={item.quantity || 1}
                      onChange={(e) =>
                        dispatch(updateQuantity({
                          id: item.id,
                          quantity: parseInt(e.target.value, 10) || 1
                        }))
                      }
                      className="w-16 p-1 border rounded mt-2"
                      min="1"
                    />
                  </div>
                </div>

                <span className="text-base">
                  ${(Number(item.price) * (item.quantity || 1)).toFixed(2)}
                </span>

                <button
                  onClick={() => dispatch(removeFromCart(item.id))}
                  className="text-red-500 hover:text-red-600 text-base"
                >
                  Remove
                </button>
              </li>
            ))}
          </ul>

          <p className="text-right font-bold text-base mb-4">
            Total: ${total.toFixed(2)}
          </p>

          <input
            type="email"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            placeholder="Email"
            className="w-full p-3 border rounded bg-white text-black mb-2"
            required
          />

          {items.some(i =>
            i.division === 'designs' ||
            i.division === 'publishing' ||
            i.division === 'realty'
          ) && (
            <>
              <input
                type="text"
                value={address.address1}
                onChange={(e) => setAddress({ ...address, address1: e.target.value })}
                placeholder="Address"
                className="w-full p-3 border rounded bg-white text-black mb-2"
              />
              <input
                type="text"
                value={address.city}
                onChange={(e) => setAddress({ ...address, city: e.target.value })}
                placeholder="City"
                className="w-full p-3 border rounded bg-white text-black mb-2"
              />
              <input
                type="text"
                value={address.state}
                onChange={(e) => setAddress({ ...address, state: e.target.value })}
                placeholder="State"
                className="w-full p-3 border rounded bg-white text-black mb-2"
              />
              <input
                type="text"
                value={address.country}
                onChange={(e) => setAddress({ ...address, country: e.target.value })}
                placeholder="Country (e.g., US)"
                className="w-full p-3 border rounded bg-white text-black mb-2"
              />
              <input
                type="text"
                value={address.zip}
                onChange={(e) => setAddress({ ...address, zip: e.target.value })}
                placeholder="Zip"
                className="w-full p-3 border rounded bg-white text-black mb-2"
              />
            </>
          )}

          {error && <p className="text-red-500 text-base">{error}</p>}

          <button
            onClick={handleCheckout}
            className="btn bg-black text-white py-4 px-6 rounded w-full hover:scale-105 transition"
          >
            Checkout
          </button>

          <Recommender />
        </>
      )}
    </div>
  );
};

export default Cart;


===== FILE: components/ErrorBoundary.js  (size=841 bytes) =====
import React from 'react';

class ErrorBoundary extends React.Component {
  constructor(props) {
    super(props);
    this.state = { hasError: false, error: null };
  }

  static getDerivedStateFromError(error) {
    return { hasError: true, error };
  }

  componentDidCatch(error, errorInfo) {
    console.error('Client-side error caught:', error, errorInfo);
  }

  render() {
    if (this.state.hasError) {
      return (
        <div className="p-8 text-center">
          <h2>Something went wrong.</h2>
          <p>{this.state.error?.message || 'Unknown error'}</p>
          <button onClick={() => window.location.reload()} className="btn bg-blue-600 text-white py-2 px-4 rounded">Reload Page</button>
        </div>
      );
    }

    return this.props.children;
  }
}

export default ErrorBoundary;


===== FILE: components/Footer.js  (size=8443 bytes) =====
// components/Footer.js
import Link from "next/link";
import { useRouter } from "next/router";
import {
  FaInstagram,
  FaTiktok,
  FaYoutube,
  FaTwitter,
  FaLinkedin,
  FaPinterest,
  FaFacebook,
  FaEnvelope,
} from "react-icons/fa";

// ===== Social handles you provided =====
const SOCIAL_HANDLES = {
  parent: {
    label: "Manyagi",
    instagram: "manyagiofficial",
    twitter: "manyagiofficial",
    youtube: "@manyagiofficial",
    pinterest: "manyagiofficial",
    linkedin: "manyagiofficial",
    facebook: "manyagiofficial",
    tiktok: "manyagiofficial",
  },
  publishing: {
    label: "Manyagi Publishing",
    instagram: "manyagipublishing",
    twitter: "manyagipublish",
    pinterest: "manyagipublishing",
    linkedin: "manyagipublishing",
    facebook: "manyagipublishing",
    tiktok: "manyagipublishing",
  },
  designs: {
    label: "Manyagi Designs",
    instagram: "manyagidesigns",
    twitter: "manyagidesigns",
    pinterest: "manyagidesigns",
    linkedin: "manyagidesigns",
    facebook: "manyagidesigns",
    tiktok: "manyagidesigns",
  },
  media: {
    label: "Manyagi Media",
    instagram: "manyagimedia",
    twitter: "manyagimedia",
    youtube: "@manyagimedia",
    pinterest: "manyagimedia",
    linkedin: "manyagimedia",
    facebook: "manyagimedia",
    tiktok: "manyagimedia",
  },
  capital: {
    label: "Manyagi Capital",
    instagram: "manyagicapital",
    twitter: "manyagicapital",
    linkedin: "manyagicapital",
    facebook: "manyagicapital",
    tiktok: "manyagicapital",
  },
  tech: {
    label: "Manyagi Tech",
    instagram: "manyagitech",
    twitter: "manyagitech",
    youtube: "@manyagitech",
    linkedin: "manyagitech",
    tiktok: "manyagitech",
  },
  realty: {
    label: "Manyagi Realty",
    instagram: "manyagirealty",
    twitter: "manyagirealty",
    linkedin: "manyagirealty",
    facebook: "manyagirealty",
    tiktok: "manyagirealty1",
  },
};

// ===== Public email per division (homepage uses info@) =====
const DIVISION_EMAIL = {
  parent: "info@manyagi.net",
  publishing: "publishing@manyagi.net",
  designs: "designs@manyagi.net",
  media: "media@manyagi.net",
  capital: "capital@manyagi.net",
  tech: "tech@manyagi.net",
  realty: "realty@manyagi.net",
};

// ===== Short “blurb” to add context + pizazz =====
const DIVISION_BLURB = {
  parent:
    "Manyagi is a creative technology company building IP across publishing, media, commerce, capital, tech, and realty.",
  publishing:
    "Original fiction, poetry, and world-building IP — released as ebooks, print, and collectors’ editions.",
  designs:
    "Wear the worlds we build — tees, posters, mugs, and collectibles inspired by our stories.",
  media:
    "Shorts, reels, and long-form content documenting how we build a modern IP studio in public.",
  capital:
    "The creator’s capital desk — systematic trading and portfolio construction, shared transparently.",
  tech:
    "Sites, tools, automations — shipping product daily and showing our work along the way.",
  realty:
    "Story-inspired stays and property content in destinations we love.",
};

// ===== helpers =====
function platformUrl(platform, handle) {
  if (!handle) return null;
  switch (platform) {
    case "instagram": return `https://instagram.com/${handle}`;
    case "twitter":   return `https://x.com/${handle.replace(/^@/, "")}`;
    case "youtube":   return `https://youtube.com/${handle.startsWith("@") ? handle : `@${handle}`}`;
    case "pinterest": return `https://pinterest.com/${handle}`;
    case "linkedin":  return `https://linkedin.com/company/${handle}`;
    case "facebook":  return `https://facebook.com/${handle}`;
    case "tiktok":    return `https://tiktok.com/@${handle.replace(/^@/, "")}`;
    default:          return null;
  }
}

function Icon({ name }) {
  switch (name) {
    case "instagram": return <FaInstagram />;
    case "tiktok":    return <FaTiktok />;
    case "youtube":   return <FaYoutube />;
    case "twitter":   return <FaTwitter />;
    case "linkedin":  return <FaLinkedin />;
    case "pinterest": return <FaPinterest />;
    case "facebook":  return <FaFacebook />;
    default:          return null;
  }
}

export default function Footer({ division: override }) {
  const router = useRouter();

  const division = override || (() => {
    const p = router.pathname || "";
    if (p.startsWith("/publishing")) return "publishing";
    if (p.startsWith("/designs"))    return "designs";
    if (p.startsWith("/media"))      return "media";
    if (p.startsWith("/capital"))    return "capital";
    if (p.startsWith("/tech"))       return "tech";
    if (p.startsWith("/realty"))     return "realty";
    return "parent";
  })();

  const cfg   = SOCIAL_HANDLES[division] || SOCIAL_HANDLES.parent;
  const email = DIVISION_EMAIL[division] || DIVISION_EMAIL.parent;
  const blurb = DIVISION_BLURB[division] || DIVISION_BLURB.parent;

  const ORDER = ["instagram", "tiktok", "youtube", "twitter", "linkedin", "pinterest", "facebook"];
  let links = ORDER.map((p) => {
    const url = platformUrl(p, cfg[p]);
    return url ? { p, url } : null;
  }).filter(Boolean);

  // Always add Manyagi Media YouTube on division pages (not homepage)
  if (division !== "parent" && !links.some(l => l.url.includes("@manyagimedia"))) {
    links.push({ p: "youtube", url: "https://youtube.com/@manyagimedia" });
  }

  return (
    <footer className="bg-white text-black border-t border-gray-200">
      <div className="container mx-auto px-4 py-10 grid grid-cols-1 md:grid-cols-3 gap-8">
        {/* About / blurb */}
        <div>
          <h4 className="text-xl font-bold mb-2">
            {division === "parent" ? "Manyagi" : cfg.label}
          </h4>
          <p className="text-sm text-gray-700">{blurb}</p>
        </div>

        {/* Explore quick links */}
        <div className="text-sm">
          <h5 className="font-semibold mb-2">Explore</h5>
          <ul className="space-y-1">
            <li><Link href="/publishing" className="hover:text-yellow-600">Publishing</Link></li>
            <li><Link href="/designs"    className="hover:text-yellow-600">Designs</Link></li>
            <li><Link href="/media"      className="hover:text-yellow-600">Media</Link></li>
            <li><Link href="/capital"    className="hover:text-yellow-600">Capital</Link></li>
            <li><Link href="/tech"       className="hover:text-yellow-600">Tech</Link></li>
            <li><Link href="/realty"     className="hover:text-yellow-600">Realty</Link></li>
            <li><Link href="/blog"       className="hover:text-yellow-600">Blog</Link></li>
          </ul>
        </div>

        {/* Contact + socials */}
        <div className="text-sm">
          <h5 className="font-semibold mb-2 flex items-center gap-2">
            <FaEnvelope /> Contact
          </h5>
          <a href={`mailto:${email}`} className="underline hover:text-yellow-600 break-all">
            {email}
          </a>
          <div className="mt-4 flex flex-wrap gap-3 text-xl">
            {links.map(({ p, url }) => (
              <a
                key={`${p}-${url}`}
                href={url}
                target="_blank"
                rel="noopener noreferrer"
                className="hover:text-yellow-600 transition-colors"
                title={p}
              >
                <Icon name={p} />
              </a>
            ))}
          </div>
        </div>
      </div>

      {/* Legal row + tagline moved from Header to Footer */}
      <div className="border-t border-gray-200">
        <div className="container mx-auto px-4 py-4 flex flex-col md:flex-row items-center justify-between gap-3 text-xs text-gray-700">
          <div>© {new Date().getFullYear()} {cfg.label}. All rights reserved.</div>
          <div className="flex gap-4">
            <Link href="/privacy" className="hover:text-yellow-600">Privacy</Link>
            <Link href="/terms"   className="hover:text-yellow-600">Terms</Link>
            <Link href="/about"   className="hover:text-yellow-600">About</Link>
          </div>
          <div className="text-gray-600">Creativity Meets Innovation</div>
        </div>
      </div>
    </footer>
  );
}


===== FILE: components/Header.js  (size=3369 bytes) =====
// components/Header.js
import Link from 'next/link';
import Image from 'next/image';
import { useRouter } from 'next/router';
import { useSelector } from 'react-redux';
import { FaShoppingCart } from 'react-icons/fa';
import { useTheme } from 'next-themes';
import { useEffect, useState } from 'react';

const Header = () => {
  const router = useRouter();
  const items = useSelector((state) => state.cart.items || []);
  const cartCount = items.length;
  const { theme, setTheme } = useTheme();
  const [mounted, setMounted] = useState(false);

  useEffect(() => setMounted(true), []);

  return (
    <header className="sticky top-0 bg-white z-50 border-b border-gray-300 text-black">
      <div className="container mx-auto flex items-center justify-between py-4 px-4 md:px-8 flex-col md:flex-row">
        {/* Logo */}
        <div className="flex items-center">
          <Link href="/" className="flex items-center gap-3 font-bold uppercase tracking-widest">
            <Image
              src="/images/logo.svg"
              alt="Manyagi Logo"
              width={100}
              height={50}
              loading="lazy"
            />
          </Link>
        </div>

        {/* Navigation */}
        <nav className="flex flex-wrap gap-4 md:gap-6 items-center justify-center md:justify-end mt-4 md:mt-0">
          <Link href="/" className="hover:text-yellow-500 transition">Home</Link>
          <Link href="/publishing" className="hover:text-yellow-500 transition">Publishing</Link>
          <Link href="/designs" className="hover:text-yellow-500 transition">Designs</Link>
          <Link href="/media" className="hover:text-yellow-500 transition">Media</Link>
          <Link href="/capital" className="hover:text-yellow-500 transition">Capital</Link>
          <Link href="/tech" className="hover:text-yellow-500 transition">Tech</Link>
          <Link href="/realty" className="hover:text-yellow-500 transition">Realty</Link>
          <Link href="/blog" className="hover:text-yellow-500 transition">Blog</Link>
          <Link href="/about" className="hover:text-yellow-500 transition">About</Link>
          <Link href="/contact" className="hover:text-yellow-500 transition">Contact</Link>
          <Link href="/links" className="hover:text-yellow-500 transition">Links</Link>
          <Link href="/admin" className="hover:text-yellow-500 transition bg-blue-100 px-2 py-1 rounded">Admin</Link>

          {/* Cart */}
          <Link href="/cart" className="relative hover:text-yellow-500 transition">
            <FaShoppingCart className="inline-block" />
            {cartCount > 0 && (
              <span className="absolute -top-2 -right-2 bg-red-500 text-white text-xs rounded-full px-2 py-1 min-w-[20px] text-center">
                {cartCount}
              </span>
            )}
          </Link>

          {/* Theme Toggle */}
          {mounted && (
            <button
              onClick={() => setTheme(theme === 'dark' ? 'light' : 'dark')}
              className="p-2 rounded-full bg-gray-200 dark:bg-gray-700 text-black dark:text-white transition-colors"
            >
              {theme === 'dark' ? 'Light Mode' : 'Dark Mode'}
            </button>
          )}
        </nav>
      </div>
    </header>
  );
};

export default Header;


===== FILE: components/Hero.js  (size=2986 bytes) =====
// components/Hero.js
import { useEffect, useState } from 'react';
import { motion } from 'framer-motion';
import 'react-responsive-carousel/lib/styles/carousel.min.css';
import { Carousel } from 'react-responsive-carousel';

const Hero = ({ kicker, title, lead, children, carouselImages = [], videoSrc, height = 'h-[600px]' }) => {
  const [isClient, setIsClient] = useState(false);
  useEffect(() => { setIsClient(true); }, []);

  const hasMedia = videoSrc || carouselImages.length > 0;
  const showVideo = isClient && videoSrc && ((window.innerWidth >= 640) || !carouselImages.length);

  return (
    <motion.section
      className={`relative min-h-[600px] sm:${height} flex flex-col items-center overflow-hidden bg-white z-0`}
      aria-labelledby="hero-title"
    >
      {showVideo && videoSrc && (
        <video
          autoPlay
          loop
          muted
          className="relative w-full h-auto object-cover z-0 sm:absolute sm:inset-0 sm:h-full sm:w-full"
          src={videoSrc}
          aria-hidden="true"
        />
      )}
      {carouselImages.length > 0 && !showVideo && (
        <Carousel
          autoPlay
          interval={5000}
          showThumbs={false}
          showStatus={false}
          infiniteLoop
          stopOnHover
          showArrows
          className="z-0 relative w-full h-auto sm:absolute sm:inset-0 sm:h-full sm:w-full"
        >
          {carouselImages.map((img, i) => (
            <img key={i} src={img} alt={`Slide ${i + 1}`} className="object-cover w-full h-auto sm:h-full" loading="lazy" />
          ))}
        </Carousel>
      )}
      {hasMedia && <div className="absolute inset-0 bg-black/50 z-10 hidden sm:block" />}
      <div
        className={`relative z-30 p-10 max-w-4xl mx-auto flex flex-col items-center text-center text-black ${hasMedia ? 'sm:text-white' : ''} mt-auto sm:mt-0`}
      >
        <motion.span
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ delay: 0.2 }}
          className="uppercase tracking-widest text-lg mb-4"
        >
          {kicker}
        </motion.span>
        <motion.h1
          id="hero-title"
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ delay: 0.4 }}
          className="text-5xl font-bold mb-4 leading-tight"
        >
          {title}
        </motion.h1>
        <motion.p
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ delay: 0.6 }}
          className="text-base mb-8 max-w-2xl"
        >
          {lead}
        </motion.p>
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ delay: 0.8 }}
          className="flex flex-col md:flex-row gap-4"
        >
          {children}
        </motion.div>
      </div>
    </motion.section>
  );
};

export default Hero;


===== FILE: components/Recommender.js  (size=916 bytes) =====
// components/Recommender.js
import { useEffect, useState } from 'react';

const Recommender = () => {
  const [recommendation, setRecommendation] = useState('');

  useEffect(() => {
    const clicks = JSON.parse(localStorage.getItem('clicks') || '{}');
    const mostClicked = Object.keys(clicks).sort((a, b) => clicks[b] - clicks[a])[0];
    setRecommendation(
      mostClicked === 'publishing' ? 'Check out our latest books!' :
      mostClicked === 'designs' ? 'Explore our creative designs!' :
      mostClicked === 'media' ? 'Watch our latest videos!' :
      mostClicked === 'capital' ? 'Get trading signals!' :
      mostClicked === 'tech' ? 'Download our apps!' :
      'Discover all Manyagi divisions!'
    );
  }, []);

  return (
    <div className="p-6 text-center glass mt-4">
      <p className="text-lg">{recommendation}</p>
    </div>
  );
};

export default Recommender;


===== FILE: components/SEO.js  (size=3654 bytes) =====
// components/SEO.js
import Head from 'next/head';
import { useRouter } from 'next/router';

const SITE_NAME = 'Manyagi';
const TAGLINE = 'Creativity Meets Innovation';
const BASE_URL =
  process.env.NEXT_PUBLIC_SITE_URL ||
  process.env.SITE_URL ||
  'https://manyagi.net';

// Put a real image into /public/og-default.jpg (1200x630 recommended)
const DEFAULT_IMAGE = '/og-default.jpg';
const DEFAULT_DESC =
  'Manyagi — Creativity Meets Innovation across Publishing, Designs, Media, Capital, Tech, and Realty.';

export default function SEO({
  title,
  description,
  image,
  url,
  type = 'website',         // article | product | video.other, etc.
  noindex = false,
  publishedTime,             // ISO string for articles
  modifiedTime,              // ISO string for articles
  jsonLd = null,             // optional extra JSON-LD object per page
}) {
  const router = useRouter();
  const path = (router && router.asPath) || '/';
  const canonical = (url || `${BASE_URL}${path.split('?')[0]}`).replace(/\/+$/, '') || BASE_URL;

  const pageTitle = title ? `${title} — ${SITE_NAME}` : `${SITE_NAME} — ${TAGLINE}`;
  const desc = description || DEFAULT_DESC;
  const ogImage = image?.startsWith('http')
    ? image
    : `${BASE_URL}${(image || DEFAULT_IMAGE).startsWith('/') ? '' : '/'}${image || DEFAULT_IMAGE}`;

  const robots = noindex ? 'noindex,nofollow' : 'index,follow';

  const articleMeta = type === 'article'
    ? [
        publishedTime ? <meta key="article:published_time" property="article:published_time" content={publishedTime} /> : null,
        modifiedTime ? <meta key="article:modified_time" property="article:modified_time" content={modifiedTime} /> : null,
      ].filter(Boolean)
    : null;

  const websiteJsonLd = {
    '@context': 'https://schema.org',
    '@type': 'WebSite',
    name: SITE_NAME,
    url: BASE_URL,
    description: DEFAULT_DESC,
    inLanguage: 'en',
    potentialAction: {
      '@type': 'SearchAction',
      target: `${BASE_URL}/search?q={search_term_string}`,
      'query-input': 'required name=search_term_string',
    },
  };

  return (
    <Head>
      {/* Title + Canonical */}
      <title>{pageTitle}</title>
      <link rel="canonical" href={canonical} />

      {/* Basic */}
      <meta name="description" content={desc} />
      <meta name="robots" content={robots} />
      <meta name="theme-color" content="#000000" />

      {/* OpenGraph */}
      <meta property="og:site_name" content={SITE_NAME} />
      <meta property="og:type" content={type} />
      <meta property="og:title" content={pageTitle} />
      <meta property="og:description" content={desc} />
      <meta property="og:url" content={canonical} />
      <meta property="og:image" content={ogImage} />
      <meta property="og:image:width" content="1200" />
      <meta property="og:image:height" content="630" />
      {articleMeta}

      {/* Twitter / X */}
      <meta name="twitter:card" content="summary_large_image" />
      <meta name="twitter:title" content={pageTitle} />
      <meta name="twitter:description" content={desc} />
      <meta name="twitter:image" content={ogImage} />

      {/* Structured Data */}
      <script
        type="application/ld+json"
        // Website baseline
        dangerouslySetInnerHTML={{ __html: JSON.stringify(websiteJsonLd) }}
      />
      {jsonLd ? (
        <script
          key="page-jsonld"
          type="application/ld+json"
          dangerouslySetInnerHTML={{ __html: JSON.stringify(jsonLd) }}
        />
      ) : null}
    </Head>
  );
}


===== FILE: components/SignalsSubscriptionForm.js  (size=3734 bytes) =====
// components/SignalsSubscriptionForm.js
import { useState } from 'react';
import { loadStripe } from '@stripe/stripe-js';

// Stripe.js isn't strictly required for a simple redirect, but leaving it is harmless.
const stripePromise = loadStripe(process.env.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY, { automaticMode: 'auto' });

const SignalsSubscriptionForm = ({ priceId: propPriceId }) => {
  // Prefer env price; fallback to prop
  const priceId = process.env.NEXT_PUBLIC_STRIPE_PRICE_ID || propPriceId || '';
  const [email, setEmail] = useState('');
  const [telegramId, setTelegramId] = useState('');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');

  const handleSubscribe = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError('');

    try {
      if (!priceId) throw new Error('Plan temporarily unavailable. Please try again later.');
      if (!telegramId || isNaN(Number(telegramId))) throw new Error('Please enter a valid Telegram ID');

      // ✅ use the new unified endpoint and the subscription mode
      const resp = await fetch('/api/checkout/create-session', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          mode: 'subscription',
          price_id: priceId,
          email,
          telegramId,
        }),
      });

      const data = await resp.json();
      if (!resp.ok || data.error) {
        throw new Error(data.error || 'Failed to create checkout session');
      }

      // simple redirect is fine; Stripe will handle the rest
      const stripe = await stripePromise; // kept for future enhancements
      window.location.href = data.url;
    } catch (err) {
      console.error('Subscription error:', err);
      setError(err.message || 'Failed to start subscription');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="space-y-4 glass p-4 rounded">
      <h3 className="text-2xl font-bold text-black">Subscribe to Basic Signals</h3>
      <p className="text-gray-600 text-base">
        Unlock daily signals for $29/month. Get Telegram alerts after payment.
      </p>

      <form onSubmit={handleSubscribe} className="space-y-4">
        {!priceId && (
          <div className="p-3 rounded bg-yellow-100 text-yellow-800 text-sm">
            Subscription plan is not configured. Set <code>NEXT_PUBLIC_STRIPE_PRICE_ID</code> in your environment.
          </div>
        )}

        <input
          type="email"
          value={email}
          onChange={(e) => setEmail(e.target.value)}
          placeholder="Email Address"
          className="w-full p-3 border border-gray-300 rounded bg-white text-black"
          required
        />

        <input
          type="number"
          value={telegramId}
          onChange={(e) => setTelegramId(e.target.value)}
          placeholder="Telegram ID (e.g., 123456789) - Find via @userinfobot"
          className="w-full p-3 border border-gray-300 rounded bg-white text-black"
          required
        />

        <button
          type="submit"
          disabled={loading || !priceId}
          className="w-full py-4 px-6 bg-yellow-500 text-black rounded font-bold hover:bg-yellow-400 hover:scale-105 transition disabled:opacity-60"
        >
          {loading ? 'Processing...' : 'Subscribe Now'}
        </button>

        {error && <p className="text-red-500 text-base">{error}</p>}
      </form>

      <p className="text-sm text-gray-600">Payments processed securely via Stripe. Cancel anytime.</p>
    </div>
  );
};

export default SignalsSubscriptionForm;


===== FILE: components/SubscriptionForm.js  (size=2058 bytes) =====
// components/SubscriptionForm.js
import Script from 'next/script';

const SubscriptionForm = ({
  formId,
  uid,
  title,
  description,
  includeTelegramId = false,
}) => {
  return (
    <div aria-labelledby="form-title" className="space-y-4 glass p-4 rounded">
      {/* Load ConvertKit safely (avoids hydration mismatch) */}
      <Script
        id="convertkit-ckjs"
        src="https://f.convertkit.com/ckjs/ck.5.js"
        strategy="afterInteractive"
      />

      <h3 id="form-title" className="text-2xl font-bold text-black">
        {title}
      </h3>
      <p className="text-gray-600 text-base">{description}</p>

      <form
        action={`https://app.convertkit.com/forms/${formId}/subscriptions`}
        className="seva-form formkit-form"
        method="post"
        data-sv-form={formId}
        data-uid={uid}
        data-format="inline"
        data-version="5"
        target="__blank"
        rel="noopener noreferrer"
      >
        <input
          className="w-full p-3 border border-gray-300 rounded bg-white text-black mb-2"
          name="fields[first_name]"
          placeholder="First Name"
          type="text"
        />

        <input
          className="w-full p-3 border border-gray-300 rounded bg-white text-black mb-2"
          name="email_address"
          placeholder="Email Address"
          required
          type="email"
        />

        {includeTelegramId && (
          <input
            className="w-full p-3 border border-gray-300 rounded bg-white text-black mb-2"
            name="fields[telegram_id]"
            placeholder="Telegram ID (e.g., 123456789)"
            type="number"
            required
          />
        )}

        <button
          className="w-full py-4 px-6 bg-yellow-500 text-black rounded font-bold hover:bg-yellow-400 hover:scale-105 transition"
          type="submit"
        >
          Subscribe
        </button>
      </form>
    </div>
  );
};

export default SubscriptionForm;


===== FILE: components/ThemeToggle.js  (size=632 bytes) =====
// components/ThemeToggle.js
import { useTheme } from 'next-themes';
import { useEffect, useState } from 'react';

export default function ThemeToggle() {
  const { theme, setTheme } = useTheme();
  const [mounted, setMounted] = useState(false);

  useEffect(() => {
    setMounted(true);
  }, []);

  if (!mounted) return null;

  return (
    <button
      onClick={() => setTheme(theme === 'dark' ? 'light' : 'dark')}
      className="p-2 rounded-full bg-gray-200 dark:bg-gray-700 text-black dark:text-white transition-colors"
    >
      {theme === 'dark' ? 'Light Mode' : 'Dark Mode'}
    </button>
  );
}


===== FILE: lib/cartSlice.js  (size=1035 bytes) =====
// lib/cartSlice.js
import { createSlice } from '@reduxjs/toolkit';

export const cartSlice = createSlice({
  name: 'cart',
  initialState: {
    items: [],
  },
  reducers: {
    addToCart: (state, action) => {
      const item = state.items.find((i) => i.id === action.payload.id);
      if (item) {
        item.quantity += action.payload.quantity || 1;
      } else {
        state.items.push({ ...action.payload, quantity: action.payload.quantity || 1 });
      }
    },
    removeFromCart: (state, action) => {
      state.items = state.items.filter((i) => i.id !== action.payload);
    },
    updateQuantity: (state, action) => {
      const item = state.items.find((i) => i.id === action.payload.id);
      if (item) {
        item.quantity = action.payload.quantity;
      }
    },
    setItems: (state, action) => {
      state.items = action.payload;
    },
  },
});

export const { addToCart, removeFromCart, updateQuantity, setItems } = cartSlice.actions;
export default cartSlice.reducer;


===== FILE: lib/emails/bookingReceipt.js  (size=902 bytes) =====
// lib/emails/bookingReceipt.js
import { sendEmail } from '../sendEmail';
import { itineraryEmailHTML } from '../emailTemplates'; // Reuse template or create a new one if needed

export async function sendBookingReceipt({
  guestName = 'Guest',
  to = '',
  property = 'Manyagi Realty Property',
  checkin,
  checkout,
  guests = '',
  replyTo = 'realty@manyagi.net',
  snapshot = {},
}) {
  // Generate HTML (reuse itinerary template for receipt; customize if needed)
  const html = itineraryEmailHTML({
    guestName,
    to,
    property,
    checkin,
    checkout,
    guests,
    replyTo,
    snapshot,
  });

  // Send the email
  return await sendEmail({
    to,
    subject: `Booking Receipt for ${property}`,
    html,
    text: `Hello ${guestName},\n\nThis is your receipt for the booking at ${property} from ${checkin} to ${checkout}.\n\nThank you!`,
  });
}


===== FILE: lib/emails/itineraryEmail.js  (size=824 bytes) =====
// lib/emails/itineraryEmail.js
import { sendEmail } from '../sendEmail';
import { itineraryEmailHTML } from '../emailTemplates';

export async function sendItineraryEmail({
  guestName = 'Guest',
  to = '',
  property = 'Manyagi Realty Property',
  checkin,
  checkout,
  guests = '',
  replyTo = 'realty@manyagi.net',
  snapshot = {},
}) {
  // Generate HTML using the template
  const html = itineraryEmailHTML({
    guestName,
    to,
    property,
    checkin,
    checkout,
    guests,
    replyTo,
    snapshot,
  });

  // Send the email
  return await sendEmail({
    to,
    subject: `Your Itinerary for ${property}`,
    html,
    text: `Hello ${guestName},\n\nYour booking at ${property} from ${checkin} to ${checkout} for ${guests} guests is confirmed.\n\nThank you!`,
  });
}


===== FILE: lib/emailTemplates.js  (size=3159 bytes) =====
// lib/emailTemplates.js

export function itineraryEmailHTML({
  kicker = 'Manyagi Realty',
  title = 'Your Itinerary Quote',
  propertyName = 'Manyagi Realty Property',
  guestName = 'Guest',
  checkin,
  checkout,
  guests = '',
  icsUrl = '',
  detailsUrl = '',
  supportEmail = 'realty@manyagi.net',
}) {
  return `
  <div style="background:#f6f7fb;padding:24px">
    <table role="presentation" style="max-width:640px;margin:0 auto;background:#ffffff;border-radius:12px;overflow:hidden;font-family:system-ui,-apple-system,Segoe UI,Roboto,Helvetica,Arial,sans-serif">
      <tr>
        <td style="background:#111827;padding:20px 24px;color:#fff">
          <div style="font-size:18px;font-weight:700">${kicker}</div>
          <div style="opacity:.85;font-size:12px;margin-top:2px">${title}</div>
        </td>
      </tr>
      <tr>
        <td style="padding:24px">
          <h1 style="font-size:20px;margin:0 0 12px 0;color:#111827">Hi ${guestName},</h1>
          <p style="margin:0 0 16px 0;color:#374151;line-height:1.55">
            Here’s your itinerary quote for <strong>${propertyName}</strong>.
          </p>

          <table role="presentation" style="width:100%;border:1px solid #e5e7eb;border-radius:8px;margin:16px 0">
            <tr>
              <td style="padding:12px 16px;border-bottom:1px solid #e5e7eb">
                <div style="font-size:12px;color:#6b7280;margin-bottom:2px">Check-in</div>
                <div style="font-size:14px;color:#111827">${checkin}</div>
              </td>
            </tr>
            <tr>
              <td style="padding:12px 16px;border-bottom:1px solid #e5e7eb">
                <div style="font-size:12px;color:#6b7280;margin-bottom:2px">Check-out</div>
                <div style="font-size:14px;color:#111827">${checkout}</div>
              </td>
            </tr>
            <tr>
              <td style="padding:12px 16px">
                <div style="font-size:12px;color:#6b7280;margin-bottom:2px">Guests</div>
                <div style="font-size:14px;color:#111827">${guests}</div>
              </td>
            </tr>
          </table>

          <div style="display:flex;gap:10px;margin-top:8px">
            <a href="${icsUrl}" style="background:#111827;color:#fff;text-decoration:none;padding:10px 14px;border-radius:8px;font-weight:600;display:inline-block">Add to Calendar</a>
            <a href="${detailsUrl}" style="background:#f3f4f6;color:#111827;text-decoration:none;padding:10px 14px;border-radius:8px;font-weight:600;display:inline-block">View Listing</a>
          </div>

          <p style="margin:20px 0 0 0;color:#6b7280;font-size:12px;line-height:1.55">
            Have questions? Reply to this email or contact us at
            <a href="mailto:${supportEmail}" style="color:#111827">${supportEmail}</a>.
          </p>
        </td>
      </tr>
      <tr>
        <td style="padding:16px 24px;background:#f9fafb;color:#6b7280;font-size:12px">
          © ${new Date().getFullYear()} Manyagi Realty • All rights reserved.
        </td>
      </tr>
    </table>
  </div>
  `;
}


===== FILE: lib/printful.js  (size=876 bytes) =====
// lib/printful.js
import axios from 'axios';

const PRINTFUL_API = 'https://api.printful.com';

export async function createPrintfulOrder({
  externalId,            // e.g., Stripe session id
  recipient,             // { name, address1, city, state_code, country_code, zip, phone, email }
  items,                 // [{ sync_variant_id, quantity }]
  packingSlip = {},      // optional
}) {
  if (!process.env.PRINTFUL_API_KEY) {
    throw new Error('PRINTFUL_API_KEY is not set');
  }

  const headers = {
    Authorization: `Bearer ${process.env.PRINTFUL_API_KEY}`,
    'Content-Type': 'application/json',
  };

  const payload = {
    external_id: externalId,
    recipient,
    items,
    packing_slip: packingSlip,
  };

  const { data } = await axios.post(`${PRINTFUL_API}/orders`, payload, { headers });
  return data?.result || data;
}


===== FILE: lib/realtyHelpers.js  (size=1028 bytes) =====
// lib/realtyHelpers.js
import { supabaseAdmin } from './supabaseAdmin';

export async function isDateBlocked(propertyId, isoDate) {
  const { data: avail } = await supabaseAdmin.from('property_availability').select('status').eq('property_id', propertyId).eq('date', isoDate).maybeSingle();
  if (avail?.status === 'booked') return true;

  const { data: blocks } = await supabaseAdmin.from('realty_external_blocks').select('*').eq('property_id', propertyId);
  return (blocks || []).some(b => new Date(isoDate) >= new Date(b.starts_on) && new Date(isoDate) < new Date(b.ends_on));
}

export async function getRateForDate(propertyId, isoDate) {
  const { data: rates } = await supabaseAdmin.from('realty_rates').select('*').eq('property_id', propertyId).order('priority', { ascending: false });
  for (const r of rates || []) {
    if (new Date(isoDate) >= new Date(r.start_date) && new Date(isoDate) <= new Date(r.end_date)) {
      return r.nightly_rate;
    }
  }
  return null; // fallback to base price
}


===== FILE: lib/sendEmail.js  (size=771 bytes) =====
// lib/sendEmail.js
import nodemailer from 'nodemailer';

const {
  SMTP_HOST,
  SMTP_PORT,
  SMTP_USER,
  SMTP_PASS,
} = process.env;

export async function sendEmail({ to, subject, html }) {
  if (!SMTP_HOST || !SMTP_PORT || !SMTP_USER || !SMTP_PASS) {
    console.warn('SMTP not configured; skipping email send.');
    return { skipped: true };
  }

  const transporter = nodemailer.createTransport({
    host: SMTP_HOST,
    port: Number(SMTP_PORT),
    secure: Number(SMTP_PORT) === 465,
    auth: {
      user: SMTP_USER,
      pass: SMTP_PASS,
    },
  });

  const info = await transporter.sendMail({
    from: 'Manyagi Realty <realty@manyagi.net>',
    to,
    subject,
    html,
  });

  return { messageId: info.messageId };
}


===== FILE: lib/store.js  (size=197 bytes) =====
// lib/store.js
import { configureStore } from '@reduxjs/toolkit';
import cartReducer from './cartSlice';

export const store = configureStore({
  reducer: {
    cart: cartReducer,
  },
});


===== FILE: lib/supabase.js  (size=316 bytes) =====
import { createClient } from '@supabase/supabase-js';

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;

// Client-side Supabase (safe for pages/, components, etc.)
export const supabase = createClient(supabaseUrl, supabaseAnonKey);


===== FILE: lib/supabaseAdmin.js  (size=431 bytes) =====
// lib/supabaseAdmin.js
import { createClient } from '@supabase/supabase-js';

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
// IMPORTANT: Server-only. Do not import this from client components/pages.
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

export const supabaseAdmin = createClient(supabaseUrl, supabaseServiceKey, {
  auth: { autoRefreshToken: false, persistSession: false },
});


===== FILE: next-env.d.ts  (size=230 bytes) =====
/// <reference types="next" />
/// <reference types="next/image-types/global" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/pages/building-your-application/configuring/typescript for more information.


===== FILE: next-sitemap.config.js  (size=847 bytes) =====
/** @type {import('next-sitemap').IConfig} */
const SITE_URL = process.env.NEXT_PUBLIC_SITE_URL || 'https://manyagi.net';

module.exports = {
  siteUrl: SITE_URL,
  generateRobotsTxt: true,
  sitemapSize: 7000,
  changefreq: 'daily',
  priority: 0.7,
  exclude: ['/server-sitemap.xml'], // keep if you later attach a server sitemap
  robotsTxtOptions: {
    policies: [{ userAgent: '*', allow: '/' }],
    additionalSitemaps: [
      `${SITE_URL}/sitemap.xml`,
    ],
  },
  transform: async (config, path) => {
    // Set higher priority for home + divisions
    const hi = ['/', '/publishing', '/designs', '/media', '/capital', '/tech', '/realty', '/blog'];
    return {
      loc: path,
      changefreq: 'daily',
      priority: hi.includes(path) ? 0.9 : 0.7,
      lastmod: new Date().toISOString(),
    };
  },
};


===== FILE: next.config.js  (size=3577 bytes) =====
// next.config.js
const withTM = require('next-transpile-modules')(['gsap']);
const withMDX = require('@next/mdx')({
  extension: /\.mdx?$/,
  options: { remarkPlugins: [], rehypePlugins: [] },
});

/** @type {import('next').NextConfig} */
const nextConfig = withTM({
  pageExtensions: ['js', 'jsx', 'mdx', 'ts', 'tsx'],
  reactStrictMode: true,

  images: {
    remotePatterns: [
      { protocol: 'https', hostname: 'manyagi.net', pathname: '/**' },
      { protocol: 'https', hostname: 'images.unsplash.com', pathname: '/**' },
      { protocol: 'https', hostname: 'myfxbook.com', pathname: '/**' },
      { protocol: 'https', hostname: 'youtube.com', pathname: '/**' },
      { protocol: 'https', hostname: 'i.ytimg.com', pathname: '/**' },
      { protocol: 'https', hostname: 'img.youtube.com', pathname: '/**' },
      { protocol: 'https', hostname: 'dlbbjeohndiwtofitwec.supabase.co', pathname: '/**' },
      // Printful CDNs (mockups)
      { protocol: 'https', hostname: 'files.cdn.printful.com', pathname: '/**' },
      { protocol: 'https', hostname: 'img.printful.com', pathname: '/**' },
      // keep for scripts if you ever use next/image with external script assets
      { protocol: 'https', hostname: 'js.stripe.com', pathname: '/**' },
    ],
    formats: ['image/avif', 'image/webp'],
    minimumCacheTTL: 60,
  },

  async headers() {
    // Allow Supabase + Printful images so product thumbnails load on production
    const csp = [
      "default-src 'self'",
      "script-src 'self' 'unsafe-eval' 'unsafe-inline' https://www.googletagmanager.com https://platform.twitter.com https://f.convertkit.com https://js.stripe.com",
      "style-src 'self' 'unsafe-inline' https://fonts.googleapis.com",
      "img-src 'self' data: blob: https://manyagi.net https://images.unsplash.com https://myfxbook.com https://youtube.com https://i.ytimg.com https://img.youtube.com https://syndication.twitter.com https://dlbbjeohndiwtofitwec.supabase.co https://files.cdn.printful.com https://img.printful.com",
      "media-src 'self' data: blob: https://dlbbjeohndiwtofitwec.supabase.co",
      "connect-src 'self' https://api.stripe.com https://api.telegram.org https://api.formspree.io https://app.convertkit.com https://www.google-analytics.com https://dlbbjeohndiwtofitwec.supabase.co wss://dlbbjeohndiwtofitwec.supabase.co https://files.cdn.printful.com https://img.printful.com",
      "frame-src 'self' https://www.youtube.com https://www.youtube-nocookie.com https://platform.twitter.com https://syndication.twitter.com https://js.stripe.com",
      "font-src 'self' https://fonts.gstatic.com",
    ].join('; ');

    return [
      {
        source: '/:path*',
        headers: [
          { key: 'X-Frame-Options', value: 'DENY' },
          { key: 'X-Content-Type-Options', value: 'nosniff' },
          { key: 'Referrer-Policy', value: 'strict-origin-when-cross-origin' },
          { key: 'Content-Security-Policy', value: csp },
          { key: 'Strict-Transport-Security', value: 'max-age=31536000; includeSubDomains' },
        ],
      },
    ];
  },

  experimental: {
    esmExternals: 'loose',
    optimizePackageImports: ['gsap', 'framer-motion'],
  },

  compress: true,

  async rewrites() {
    return [{ source: '/sitemap.xml', destination: '/sitemap.xml' }];
  },

  env: {
    NEXT_PUBLIC_SITE_URL: process.env.NEXTAUTH_URL || 'https://manyagi.net',
    SITE_URL: process.env.NEXTAUTH_URL || 'https://manyagi.net',
  },
});

module.exports = withMDX(nextConfig);


===== FILE: package.json  (size=1496 bytes) =====
{
  "name": "manyagi-site",
  "version": "1.0.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "postbuild": "next-sitemap"
  },
  "dependencies": {
    "@formspree/react": "^3.0.0",
    "@mdx-js/loader": "^3.0.1",
    "@mdx-js/react": "^3.0.1",
    "@netlify/plugin-nextjs": "^5.13.3",
    "@next/mdx": "^14.2.5",
    "@reduxjs/toolkit": "^2.2.8",
    "@stripe/react-stripe-js": "^2.7.3",
    "@stripe/stripe-js": "^4.10.0",
    "@supabase/auth-helpers-nextjs": "^0.10.0",
    "@supabase/supabase-js": "^2.45.4",
    "axios": "^1.12.2",
    "clsx": "^2.1.1",
    "date-fns": "^4.1.0",
    "framer-motion": "^11.11.9",
    "gray-matter": "^4.0.3",
    "gsap": "^3.12.5",
    "micro": "^10.0.1",
    "next": "^14.2.15",
    "next-mdx-remote": "^4.4.1",
    "next-sitemap": "^4.2.3",
    "next-themes": "^0.4.6",
    "next-transpile-modules": "^10.0.1",
    "node-fetch": "^3.3.2",
    "node-ical": "^0.22.0",
    "posthog-js": "^1.268.8",
    "react": "^18.3.1",
    "react-big-calendar": "^1.19.4",
    "react-dom": "^18.3.1",
    "react-icons": "^5.3.0",
    "react-redux": "^9.2.0",
    "react-responsive-carousel": "^3.2.23",
    "react-scroll-parallax": "^3.4.5",
    "recharts": "^3.3.0",
    "redux": "^5.0.1",
    "stripe": "^16.12.0"
  },
  "devDependencies": {
    "autoprefixer": "^10.4.20",
    "postcss": "^8.4.47",
    "tailwindcss": "^3.4.14",
    "tailwindcss-animate": "^1.0.7",
    "typescript": "5.9.2"
  }
}


===== FILE: pages/404.js  (size=3907 bytes) =====
// pages/404.js
import Link from 'next/link';
import Head from 'next/head';
import { motion } from 'framer-motion';
import Recommender from '../components/Recommender';

export default function Custom404() {
  return (
    <>
      <Head>
        <title>Portal Not Found — Manyagi</title>
        <meta
          name="description"
          content="This realm doesn’t exist — but your journey continues. Discover Publishing, Designs, Capital, Tech, Media, and Realty."
        />
        <meta name="robots" content="noindex,follow" />
      </Head>

      <section className="relative overflow-hidden">
        {/* Background aura */}
        <div className="absolute inset-0 -z-10 bg-gradient-to-br from-black via-gray-900 to-black" />
        <div className="absolute inset-0 -z-10 opacity-20 pointer-events-none"
             style={{
               backgroundImage:
                 'radial-gradient(40% 40% at 50% 50%, rgba(255,255,255,0.15) 0%, rgba(0,0,0,0) 70%)',
             }}
        />

        <div className="container mx-auto px-4 py-24 text-white text-center">
          <motion.h1
            initial={{ opacity: 0, y: -12 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5 }}
            className="text-5xl md:text-6xl font-extrabold tracking-tight"
          >
            Portal Not Found
          </motion.h1>

          <motion.p
            initial={{ opacity: 0, y: 6 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.15, duration: 0.5 }}
            className="mt-4 text-gray-300 max-w-2xl mx-auto"
          >
            Looks like this realm doesn’t exist — but your journey continues.
            Choose a gateway below and step back into the Manyagi universe.
          </motion.p>

          {/* Primary actions */}
          <motion.div
            initial={{ opacity: 0, y: 6 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.25, duration: 0.5 }}
            className="mt-8 flex flex-wrap justify-center gap-3"
          >
            <Link href="/" className="btn bg-yellow-500 text-black px-5 py-2 rounded-lg hover:bg-yellow-400 transition">
              Return to HQ
            </Link>
            <Link href="/publishing" className="btn bg-white text-black px-5 py-2 rounded-lg hover:bg-gray-200 transition">
              Explore Publishing
            </Link>
            <Link href="/designs" className="btn bg-white/10 text-white px-5 py-2 rounded-lg hover:bg-white/20 transition border border-white/20">
              Shop Designs
            </Link>
          </motion.div>

          {/* Helpful discovery (turns 404 into a conversion moment) */}
          <div className="mt-14 bg-white text-black rounded-xl shadow-lg p-6 dark:bg-gray-900 dark:text-white">
            <h2 className="text-2xl font-bold mb-3">Recommended for you</h2>
            <p className="text-sm text-gray-600 dark:text-gray-300 mb-4">
              Popular picks across our divisions.
            </p>
            <Recommender />
          </div>

          {/* Quick deep links */}
          <div className="mt-10 grid grid-cols-2 md:grid-cols-3 gap-3 text-sm text-gray-300">
            <Link href="/media" className="hover:text-yellow-400 transition">Media</Link>
            <Link href="/capital" className="hover:text-yellow-400 transition">Capital</Link>
            <Link href="/tech" className="hover:text-yellow-400 transition">Tech</Link>
            <Link href="/realty" className="hover:text-yellow-400 transition">Realty</Link>
            <Link href="/blog" className="hover:text-yellow-400 transition">Blog</Link>
            <Link href="/about" className="hover:text-yellow-400 transition">About</Link>
          </div>
        </div>
      </section>
    </>
  );
}


===== FILE: pages/500.js  (size=2722 bytes) =====
// pages/500.js
import Link from 'next/link';
import Head from 'next/head';
import Recommender from '../components/Recommender';

export default function Custom500() {
  return (
    <>
      <Head>
        <title>System Interruption — Manyagi</title>
        <meta
          name="description"
          content="Something went wrong within the Manyagi network. Our engineers are restoring balance."
        />
        <meta name="robots" content="noindex,follow" />
      </Head>

      <section className="relative overflow-hidden">
        {/* Deep crimson background for urgency */}
        <div className="absolute inset-0 -z-10 bg-gradient-to-br from-red-950 via-black to-black" />
        <div className="container mx-auto px-4 py-24 text-white text-center">
          <h1 className="text-5xl md:text-6xl font-extrabold tracking-tight">
            System Interruption
          </h1>
          <p className="mt-4 text-gray-300 max-w-2xl mx-auto">
            Something went wrong within the Manyagi network. Our engineers are restoring balance.
          </p>

          <div className="mt-8 flex flex-wrap justify-center gap-3">
            <Link href="/" className="btn bg-yellow-500 text-black px-5 py-2 rounded-lg hover:bg-yellow-400 transition">
              Return to HQ
            </Link>
            <Link href="/status" className="btn bg-white text-black px-5 py-2 rounded-lg hover:bg-gray-200 transition">
              System Status
            </Link>
          </div>

          {/* Give users somewhere valuable to go */}
          <div className="mt-14 bg-white text-black rounded-xl shadow-lg p-6 dark:bg-gray-900 dark:text-white">
            <h2 className="text-2xl font-bold mb-3">Explore while we fix things</h2>
            <p className="text-sm text-gray-600 dark:text-gray-300 mb-4">
              Here are some popular picks across our divisions.
            </p>
            <Recommender />
          </div>

          <div className="mt-10 grid grid-cols-2 md:grid-cols-3 gap-3 text-sm text-gray-300">
            <Link href="/publishing" className="hover:text-yellow-400 transition">Publishing</Link>
            <Link href="/designs" className="hover:text-yellow-400 transition">Designs</Link>
            <Link href="/media" className="hover:text-yellow-400 transition">Media</Link>
            <Link href="/capital" className="hover:text-yellow-400 transition">Capital</Link>
            <Link href="/tech" className="hover:text-yellow-400 transition">Tech</Link>
            <Link href="/realty" className="hover:text-yellow-400 transition">Realty</Link>
          </div>
        </div>
      </section>
    </>
  );
}


===== FILE: pages/_app.js  (size=2917 bytes) =====
// pages/_app.js
import '@/styles/globals.css';
import { Provider } from 'react-redux';
import { store } from '../lib/store';
import Header from '../components/Header';
import Footer from '../components/Footer';
import ErrorBoundary from '../components/ErrorBoundary';
import { useEffect } from 'react';
import { useRouter } from 'next/router';
import Script from 'next/script';
import Head from 'next/head';
import { ThemeProvider } from 'next-themes';
import SEO from '@/components/SEO';

const GA_ID = process.env.NEXT_PUBLIC_GOOGLE_ANALYTICS_ID || '';

function MyApp({ Component, pageProps }) {
  const router = useRouter();

  // Persist cart
  useEffect(() => {
    const unsubscribe = store.subscribe(() => {
      try {
        localStorage.setItem('cart', JSON.stringify(store.getState().cart.items || []));
      } catch {/* ignore */}
    });

    try {
      const saved = localStorage.getItem('cart');
      if (saved) store.dispatch({ type: 'cart/setItems', payload: JSON.parse(saved) });
    } catch {/* ignore */}

    return unsubscribe;
  }, []);

  // GA route changes
  useEffect(() => {
    if (!GA_ID) return;
    const handleRouteChange = (url) => {
      if (typeof window !== 'undefined' && typeof window.gtag === 'function') {
        window.gtag('config', GA_ID, { page_path: url });
      }
    };
    router.events.on('routeChangeComplete', handleRouteChange);
    return () => router.events.off('routeChangeComplete', handleRouteChange);
  }, [router.events]);

  return (
    <Provider store={store}>
      <ErrorBoundary>
        <Head>
          {/* Viewport + icons */}
          <meta name="viewport" content="width=device-width, initial-scale=1" />
          <link rel="icon" href="/favicon.ico" />
        </Head>

        {GA_ID ? (
          <>
            <Script strategy="afterInteractive" src={`https://www.googletagmanager.com/gtag/js?id=${GA_ID}`} />
            <Script id="ga-init" strategy="afterInteractive">
              {`
                window.dataLayer = window.dataLayer || [];
                function gtag(){dataLayer.push(arguments);}
                gtag('js', new Date());
                gtag('config', '${GA_ID}');
              `}
            </Script>
          </>
        ) : null}

        <ThemeProvider attribute="class" defaultTheme="light">
          {/* Global SEO defaults; pages can override with their own <SEO .../> */}
          <SEO />

          <div className="min-h-screen gradient-bg dark:bg-gray-900 transition-colors">
            <Header />
            <main className="container mx-auto px-4 py-8 min-h-screen bg-white text-black gradient-bg">
              <Component {...pageProps} />
            </main>
            <Footer />
          </div>
        </ThemeProvider>
      </ErrorBoundary>
    </Provider>
  );
}

export default MyApp;


===== FILE: pages/_document.js  (size=1889 bytes) =====
// pages/_document.js
import { Html, Head, Main, NextScript } from 'next/document';

const SITE_URL = process.env.NEXT_PUBLIC_SITE_URL || 'https://manyagi.net';

export default function Document() {
  return (
    <Html lang="en">
      <Head>
        {/* Fonts */}
        <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&family=Georgia&display=swap" rel="stylesheet" />
        {/* Global org JSON-LD */}
        <script
          type="application/ld+json"
          // Base Organization schema for the brand; pages can add more via <SEO jsonLd={...} />
          dangerouslySetInnerHTML={{
            __html: JSON.stringify({
              '@context': 'https://schema.org',
              '@type': 'Organization',
              name: 'Manyagi',
              url: SITE_URL,
              description: 'Manyagi unites Publishing, Designs, Capital, Tech, Media, and Realty under one HQ.',
              logo: `${SITE_URL}/images/logo.png`,
              sameAs: [
                'https://instagram.com/manyagi.official',
                'https://tiktok.com/@manyagi.official',
                'https://youtube.com/@ManyagiOfficial',
                'https://x.com/ManyagiOfficial',
                'https://linkedin.com/company/manyagi',
                'https://pinterest.com/ManyagiOfficial',
              ],
              contactPoint: {
                '@type': 'ContactPoint',
                email: 'support@manyagi.net',
                contactType: 'customer support',
                availableLanguage: 'en',
              },
            }),
          }}
        />
        {/* We no longer hard-code robots/meta keywords here to avoid duplicating with SEO component */}
      </Head>
      <body className="bg-white text-black">
        <Main />
        <NextScript />
      </body>
    </Html>
  );
}


===== FILE: pages/about.js  (size=1376 bytes) =====
import Head from 'next/head';
import Link from 'next/link';
import SubscriptionForm from '../components/SubscriptionForm';
import Recommender from '../components/Recommender';
import Hero from '../components/Hero';

export default function About() {
  const carouselImages = [
    'https://dlbbjeohndiwtofitwec.supabase.co/storage/v1/object/public/assets/images/og-about.webp',
    'https://dlbbjeohndiwtofitwec.supabase.co/storage/v1/object/public/assets/images/team-photo.webp',
  ];

  return (
    <>
      <Head>
        <title>About Manyagi — Our Story</title>
        <meta name="description" content="Learn about Manyagi's mission and team." />
      </Head>
      <Hero kicker="About Us" title="Our Story" lead="Manyagi unites creativity and innovation across publishing, designs, capital, tech, media, and realty." carouselImages={carouselImages} height="h-[600px]">
        <Link href="#team" className="btn bg-blue-600 text-white py-2 px-4 rounded hover:bg-blue-700 transition">Meet the Team</Link>
      </Hero>

      {/* …your existing content … */}

      <section id="subscribe" className="container mx-auto px-4 py-16">
        <SubscriptionForm formId="8427853" uid="637df68a06" title="Stay Connected" description="Join our community for updates and insights." />
      </section>

      <Recommender />
    </>
  );
}


===== FILE: pages/admin.js  (size=106945 bytes) =====
import Head from 'next/head';
import dynamic from 'next/dynamic';
import { useEffect, useMemo, useState, useCallback } from 'react';
import { useRouter } from 'next/router';
import axios from 'axios';
import { supabase } from '@/lib/supabase';
import EventCalendar from '@/components/Calendar';
import SEO from '@/components/SEO';
import {
  ResponsiveContainer,
  BarChart,
  Bar,
  XAxis,
  YAxis,
  Tooltip,
  CartesianGrid,
} from 'recharts';

// Lazy-load MDX for admin speed
const MDXRemote = dynamic(() => import('next-mdx-remote').then((m) => m.MDXRemote), {
  ssr: false,
});
const mdxSerialize = async (content) =>
  (await import('next-mdx-remote/serialize')).serialize(content || '');

// Utility Functions
const toArrayTags = (s) =>
  Array.from(
    new Set(
      String(s || '')
        .split(',')
        .map((t) => t.trim())
        .filter(Boolean)
    )
  );

const tagsToCSV = (arr) => (Array.isArray(arr) ? arr.join(', ') : '');
const safeJSON = (s, fallback = {}) => {
  try {
    if (!s) return fallback;
    if (typeof s === 'object') return s;
    return JSON.parse(s);
  } catch {
    return fallback;
  }
};
const copyText = async (txt) => {
  try {
    await navigator.clipboard.writeText(txt);
    alert('Copied!');
  } catch {}
};
const currency = (n) => `$${Number(n || 0).toFixed(2)}`;
const isWithinLastDays = (iso, days = 30) => {
  if (!iso) return false;
  const d = new Date(iso);
  const since = new Date();
  since.setDate(since.getDate() - days);
  return d >= since;
};

// UI Components
const TabButton = ({ active, onClick, children }) => (
  <button
    onClick={onClick}
    className={`p-2 rounded transition ${
      active ? 'bg-blue-500 text-white' : 'bg-gray-200 dark:bg-gray-800'
    }`}
  >
    {children}
  </button>
);

const SectionCard = ({ title, children, className = '' }) => (
  <section className={`glass p-6 rounded ${className}`}>
    {title ? <h2 className="text-2xl font-bold mb-4">{title}</h2> : null}
    {children}
  </section>
);

// MultiUploader Component
function MultiUploader({
  division = 'site',
  purpose = 'general',
  fileType = 'image',
  metadata = {},
  onUploaded,
}) {
  const [busy, setBusy] = useState(false);
  const [dndOver, setDndOver] = useState(false);
  const [localPurpose, setLocalPurpose] = useState(purpose);
  const [localDivision, setLocalDivision] = useState(division);
  const [localType, setLocalType] = useState(fileType);

  const uploadFiles = async (files) => {
    if (!files?.length) return;
    setBusy(true);
    try {
      const {
        data: { session },
      } = await supabase.auth.getSession();
      const token = session?.access_token;

      for (const file of files) {
        const base64 = await new Promise((resolve, reject) => {
          const r = new FileReader();
          r.onload = () => resolve(String(r.result).split(',')[1] || '');
          r.onerror = reject;
          r.readAsDataURL(file);
        });

        await axios.post(
          '/api/admin/upload-asset',
          {
            file: { data: base64, name: file.name },
            file_type: localType,
            division: localDivision,
            purpose: localPurpose,
            metadata,
          },
          { headers: token ? { Authorization: `Bearer ${token}` } : {} }
        );
      }

      onUploaded?.();
      alert('Upload complete.');
    } catch (e) {
      alert(`Upload failed: ${e.message}`);
    } finally {
      setBusy(false);
      setDndOver(false);
    }
  };

  const onDrop = useCallback((e) => {
    e.preventDefault();
    setDndOver(false);
    const files = [...(e.dataTransfer?.files || [])];
    uploadFiles(files);
  }, []);

  return (
    <div
      onDragOver={(e) => {
        e.preventDefault();
        setDndOver(true);
      }}
      onDragLeave={() => setDndOver(false)}
      onDrop={onDrop}
      className={`rounded border-2 border-dashed p-4 ${
        dndOver
          ? 'border-blue-500 bg-blue-50 dark:bg-blue-900/20'
          : 'border-gray-300 dark:border-gray-700'
      }`}
    >
      <div className="flex flex-wrap gap-3 mb-3">
        <select
          value={localDivision}
          onChange={(e) => setLocalDivision(e.target.value)}
          className="dark:bg-gray-900"
        >
          {['site', 'publishing', 'designs', 'capital', 'tech', 'media', 'realty'].map((d) => (
            <option key={d} value={d}>
              {d}
            </option>
          ))}
        </select>
        <select
          value={localPurpose}
          onChange={(e) => setLocalPurpose(e.target.value)}
          className="dark:bg-gray-900"
        >
          <option value="general">general</option>
          <option value="hero">hero</option>
          <option value="carousel">carousel</option>
        </select>
        <select
          value={localType}
          onChange={(e) => setLocalType(e.target.value)}
          className="dark:bg-gray-900"
        >
          <option value="image">image</option>
          <option value="video">video</option>
          <option value="pdf">pdf</option>
        </select>
        <label className="ml-auto inline-flex items-center gap-2 px-3 py-2 rounded bg-gray-100 dark:bg-gray-800 cursor-pointer">
          <input
            type="file"
            multiple
            className="hidden"
            onChange={(e) => uploadFiles([...e.target.files])}
          />
          Choose files…
        </label>
      </div>
      <p className="text-sm opacity-80">
        Drag & drop files here (multi-upload supported). They’ll go to{' '}
        <b>{localDivision}</b> / <b>{localPurpose}</b>.
      </p>
      {busy && <p className="mt-2 text-sm">Uploading…</p>}
    </div>
  );
}

// QuickProductForm Component (for Designs)
function QuickProductForm({ defaultDivision = 'designs', onCreated }) {
  const [artFile, setArtFile] = useState(null);
  const [assetUrl, setAssetUrl] = useState('');
  const [isUploading, setIsUploading] = useState(false);
  const [title, setTitle] = useState('');
  const [price, setPrice] = useState('19.99');
  const [printfulId, setPrintfulId] = useState('');
  const [thumbnailUrl, setThumbnailUrl] = useState('');
  const [description, setDescription] = useState('');
  const [tagsStr, setTagsStr] = useState('');
  const [metaBook, setMetaBook] = useState('LOHC');
  const [metaSeries, setMetaSeries] = useState('Legacy of the Hidden Clans');
  const [metaPrompt, setMetaPrompt] = useState(1);
  const [metaScene, setMetaScene] = useState('');
  const [metaYear, setMetaYear] = useState(2025);
  const [metaDrop, setMetaDrop] = useState('Drop_1');
  const [purpose, setPurpose] = useState('general');
  const [fileType, setFileType] = useState('image');

  const doUploadAsset = async () => {
    if (!artFile) {
      alert('Choose a file first.');
      return;
    }
    setIsUploading(true);
    try {
      const base64 = await new Promise((resolve, reject) => {
        const r = new FileReader();
        r.onload = () => resolve(String(r.result).split(',')[1] || '');
        r.onerror = reject;
        r.readAsDataURL(artFile);
      });

      const {
        data: { session },
      } = await supabase.auth.getSession();
      const token = session?.access_token;

      const metadata = {
        book: metaBook,
        series: metaSeries,
        prompt: Number(metaPrompt),
        scene: metaScene,
        year: Number(metaYear),
        drop: metaDrop,
      };

      const res = await axios.post(
        '/api/admin/upload-asset',
        {
          file: { data: base64, name: artFile.name },
          file_type: fileType,
          division: defaultDivision,
          purpose,
          metadata,
        },
        { headers: token ? { Authorization: `Bearer ${token}` } : {} }
      );
      if (res.data?.error) throw new Error(res.data.error);
      setAssetUrl(res.data.file_url || '');
      alert('Asset uploaded. URL below.');
    } catch (e) {
      alert(`Upload failed: ${e.message}`);
    } finally {
      setIsUploading(false);
    }
  };

  const doCreateProduct = async () => {
    try {
      if (!title || !price) return alert('Title and price are required.');
      if (!thumbnailUrl) return alert('Provide a thumbnail_url (mockup).');
      if (!printfulId) return alert('Printful product ID is required.');

      const tags = toArrayTags(tagsStr);
      const metadata = {
        book: metaBook,
        series: metaSeries,
        prompt: Number(metaPrompt),
        scene: metaScene,
        year: Number(metaYear),
        drop: metaDrop,
        asset_url: assetUrl || undefined,
      };

      const payload = {
        name: title,
        price: parseFloat(price),
        division: defaultDivision,
        description,
        thumbnail_url: thumbnailUrl,
        printful_product_id: printfulId,
        status: 'active',
        tags,
        metadata,
      };
      const { error } = await supabase.from('products').insert(payload);
      if (error) throw error;

      setTitle('');
      setPrice('');
      setPrintfulId('');
      setThumbnailUrl('');
      setDescription('');
      setTagsStr('');
      setArtFile(null);
      onCreated?.();
      alert('Product created.');
    } catch (e) {
      alert(`Create product failed: ${e.message}`);
    }
  };

  return (
    <SectionCard title="Quick Product (Designs) — Upload → Copy URL → Create">
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
        <div className="md:col-span-3 border rounded p-4 dark:border-gray-700">
          <h3 className="font-semibold mb-2">1) Upload asset (optional)</h3>
          <div className="grid grid-cols-1 md:grid-cols-4 gap-3 items-center">
            <input type="file" onChange={(e) => setArtFile(e.target.files?.[0] || null)} />
            <select
              value={fileType}
              onChange={(e) => setFileType(e.target.value)}
              className="dark:bg-gray-800"
            >
              <option value="image">image</option>
              <option value="video">video</option>
              <option value="pdf">pdf</option>
            </select>
            <select
              value={purpose}
              onChange={(e) => setPurpose(e.target.value)}
              className="dark:bg-gray-800"
            >
              <option value="general">general</option>
              <option value="hero">hero</option>
              <option value="carousel">carousel</option>
            </select>
            <button
              type="button"
              onClick={doUploadAsset}
              disabled={isUploading}
              className="p-2 bg-black text-white rounded dark:bg-gray-700"
            >
              {isUploading ? 'Uploading…' : 'Upload → Get URL'}
            </button>
          </div>
          {assetUrl && (
            <div className="mt-3 flex items-center gap-2">
              <input value={assetUrl} readOnly className="w-full dark:bg-gray-800" />
              <button
                type="button"
                className="px-3 py-2 bg-blue-600 text-white rounded"
                onClick={() => copyText(assetUrl)}
              >
                Copy
              </button>
            </div>
          )}
        </div>
        <div className="md:col-span-3 border rounded p-4 dark:border-gray-700">
          <h3 className="font-semibold mb-2">2) Create product</h3>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
            <input
              placeholder="Title"
              value={title}
              onChange={(e) => setTitle(e.target.value)}
            />
            <input
              placeholder="Price"
              type="number"
              value={price}
              onChange={(e) => setPrice(e.target.value)}
            />
            <input
              placeholder="Printful Product ID"
              value={printfulId}
              onChange={(e) => setPrintfulId(e.target.value)}
            />
            <input
              placeholder="thumbnail_url (mockup)"
              value={thumbnailUrl}
              onChange={(e) => setThumbnailUrl(e.target.value)}
            />
            <input
              className="md:col-span-2"
              placeholder="Description"
              value={description}
              onChange={(e) => setDescription(e.target.value)}
            />
            <input
              className="md:col-span-2"
              placeholder="Tags (comma-separated)"
              value={tagsStr}
              onChange={(e) => setTagsStr(e.target.value)}
            />
          </div>
          <div className="mt-3">
            <button
              type="button"
              onClick={doCreateProduct}
              className="p-2 bg-black text-white rounded dark:bg-gray-700"
            >
              Create Product
            </button>
          </div>
        </div>
      </div>
    </SectionCard>
  );
}

// PublishingProductForm Component
function PublishingProductForm({ onCreated }) {
  const [name, setName] = useState('');
  const [price, setPrice] = useState('9.99');
  const [description, setDescription] = useState('');
  const [coverUrl, setCoverUrl] = useState('');
  const [tagsStr, setTagsStr] = useState('fantasy, lohc');
  const [amazonUrl, setAmazonUrl] = useState('');
  const [paperbackUrl, setPaperbackUrl] = useState('');
  const [kindleUrl, setKindleUrl] = useState('');
  const [hardcoverUrl, setHardcoverUrl] = useState('');
  const [pdfUrl, setPdfUrl] = useState('');
  const [format, setFormat] = useState('ebook');
  const [year, setYear] = useState(2025);
  const [primaryStore, setPrimaryStore] = useState('amazon');

  const uploadCover = async (file) => {
    if (!file) return;
    const base64 = await new Promise((resolve, reject) => {
      const r = new FileReader();
      r.onload = () => resolve(String(r.result).split(',')[1] || '');
      r.onerror = reject;
      r.readAsDataURL(file);
    });
    const {
      data: { session },
    } = await supabase.auth.getSession();
    const token = session?.access_token;
    const res = await axios.post(
      '/api/admin/upload-asset',
      {
        file: { data: base64, name: file.name },
        file_type: 'image',
        division: 'publishing',
        purpose: 'general',
        metadata: { type: 'book_cover', year },
      },
      { headers: token ? { Authorization: `Bearer ${token}` } : {} }
    );
    if (res.data?.file_url) setCoverUrl(res.data.file_url);
  };

  const create = async () => {
    try {
      if (!name) return alert('Title required.');
      if (!coverUrl) return alert('Cover image URL required (upload or paste).');

      const metadata = {
        amazon_url: amazonUrl || undefined,
        paperback_url: paperbackUrl || undefined,
        kindle_url: kindleUrl || undefined,
        hardcover_url: hardcoverUrl || undefined,
        pdf_url: pdfUrl || undefined,
        format,
        year: Number(year),
        primary_store: primaryStore,
      };

      const payload = {
        name,
        price: Number(price || 0),
        division: 'publishing',
        description,
        display_image: coverUrl,
        thumbnail_url: coverUrl,
        status: 'active',
        tags: toArrayTags(tagsStr),
        metadata,
        productType: 'book',
      };

      const { error } = await supabase.from('products').insert(payload);
      if (error) throw error;

      setName('');
      setPrice('9.99');
      setDescription('');
      setCoverUrl('');
      setAmazonUrl('');
      setPaperbackUrl('');
      setKindleUrl('');
      setHardcoverUrl('');
      setPdfUrl('');
      setFormat('ebook');
      setYear(2025);
      setTagsStr('');
      setPrimaryStore('amazon');

      onCreated?.();
      alert('Publishing product created.');
    } catch (e) {
      alert(`Create failed: ${e.message}`);
    }
  };

  return (
    <SectionCard title="Publishing — Add Book (Amazon links + sample PDF)">
      <div className="grid grid-cols-1 md:grid-cols-3 gap-3">
        <input
          placeholder="Book Title"
          value={name}
          onChange={(e) => setName(e.target.value)}
        />
        <input
          placeholder="Internal Price (optional)"
          type="number"
          value={price}
          onChange={(e) => setPrice(e.target.value)}
        />
        <select value={format} onChange={(e) => setFormat(e.target.value)}>
          <option value="ebook">ebook</option>
          <option value="paperback">paperback</option>
          <option value="hardcover">hardcover</option>
        </select>
        <input
          placeholder="Cover Image URL"
          className="md:col-span-2"
          value={coverUrl}
          onChange={(e) => setCoverUrl(e.target.value)}
        />
        <label className="inline-flex items-center gap-2 px-3 py-2 rounded bg-gray-100 dark:bg-gray-800 cursor-pointer">
          <input
            type="file"
            accept="image/*"
            className="hidden"
            onChange={(e) => uploadCover(e.target.files?.[0])}
          />
          Upload Cover…
        </label>
        <textarea
          className="md:col-span-3"
          placeholder="Description"
          value={description}
          onChange={(e) => setDescription(e.target.value)}
        />
        <input
          className="md:col-span-3"
          placeholder="Tags (comma-separated)"
          value={tagsStr}
          onChange={(e) => setTagsStr(e.target.value)}
        />
        <input
          className="md:col-span-3"
          placeholder="Amazon (general product) URL"
          value={amazonUrl}
          onChange={(e) => setAmazonUrl(e.target.value)}
        />
        <input
          placeholder="Amazon Paperback URL"
          value={paperbackUrl}
          onChange={(e) => setPaperbackUrl(e.target.value)}
        />
        <input
          placeholder="Amazon Kindle URL"
          value={kindleUrl}
          onChange={(e) => setKindleUrl(e.target.value)}
        />
        <input
          placeholder="Amazon Hardcover URL"
          value={hardcoverUrl}
          onChange={(e) => setHardcoverUrl(e.target.value)}
        />
        <input
          className="md:col-span-2"
          placeholder="Sample PDF URL (Chapter 1)"
          value={pdfUrl}
          onChange={(e) => setPdfUrl(e.target.value)}
        />
        <input
          placeholder="Year"
          type="number"
          value={year}
          onChange={(e) => setYear(e.target.value)}
        />
        <div className="md:col-span-3 flex items-center gap-3">
          <label>Primary Store Button:</label>
          <select
            value={primaryStore}
            onChange={(e) => setPrimaryStore(e.target.value)}
            className="dark:bg-gray-900"
          >
            <option value="amazon">Amazon (auto)</option>
            <option value="paperback">Paperback</option>
            <option value="kindle">Kindle</option>
            <option value="hardcover">Hardcover</option>
            <option value="pdf">PDF (sample)</option>
          </select>
          <button
            type="button"
            onClick={create}
            className="ml-auto px-4 py-2 rounded bg-blue-600 text-white"
          >
            Create Book
          </button>
        </div>
      </div>
    </SectionCard>
  );
}

// New CapitalProductForm Component
function CapitalProductForm({ onCreated }) {
  const [name, setName] = useState('');
  const [price, setPrice] = useState('99.99');
  const [description, setDescription] = useState('');
  const [thumbnailUrl, setThumbnailUrl] = useState('');
  const [tagsStr, setTagsStr] = useState('trading, signals');
  const [licenseType, setLicenseType] = useState('bot');
  const [apiAccess, setApiAccess] = useState(false);
  const [metadataStr, setMetadataStr] = useState('');

  const create = async () => {
    try {
      if (!name) return alert('Title required.');
      if (!price) return alert('Price required.');
      if (!thumbnailUrl) return alert('Thumbnail URL required.');

      const metadata = {
        license_type: licenseType,
        api_access: apiAccess,
        ...(metadataStr ? safeJSON(metadataStr, {}) : {}),
      };

      const payload = {
        name,
        price: Number(price || 0),
        division: 'capital',
        description,
        display_image: thumbnailUrl,
        thumbnail_url: thumbnailUrl,
        status: 'active',
        tags: toArrayTags(tagsStr),
        metadata,
        productType: 'download',
      };

      const { error } = await supabase.from('products').insert(payload);
      if (error) throw error;

      setName('');
      setPrice('99.99');
      setDescription('');
      setThumbnailUrl('');
      setTagsStr('trading, signals');
      setLicenseType('bot');
      setApiAccess(false);
      setMetadataStr('');
      onCreated?.();
      alert('Capital product created.');
    } catch (e) {
      alert(`Create failed: ${e.message}`);
    }
  };

  return (
    <SectionCard title="Capital — Add Product (Bot License, eBook, etc.)">
      <div className="grid grid-cols-1 md:grid-cols-3 gap-3">
        <input
          placeholder="Product Title (e.g., Trading Bot License)"
          value={name}
          onChange={(e) => setName(e.target.value)}
        />
        <input
          placeholder="Price"
          type="number"
          value={price}
          onChange={(e) => setPrice(e.target.value)}
        />
        <select
          value={licenseType}
          onChange={(e) => setLicenseType(e.target.value)}
          className="dark:bg-gray-800"
        >
          <option value="bot">Bot License</option>
          <option value="ebook">eBook</option>
          <option value="course">Course</option>
          <option value="api">API Access</option>
        </select>
        <input
          placeholder="Thumbnail URL"
          className="md:col-span-2"
          value={thumbnailUrl}
          onChange={(e) => setThumbnailUrl(e.target.value)}
        />
        <textarea
          className="md:col-span-3"
          placeholder="Description"
          value={description}
          onChange={(e) => setDescription(e.target.value)}
        />
        <input
          className="md:col-span-2"
          placeholder="Tags (comma-separated)"
          value={tagsStr}
          onChange={(e) => setTagsStr(e.target.value)}
        />
        <label className="flex items-center gap-2">
          <input
            type="checkbox"
            checked={apiAccess}
            onChange={(e) => setApiAccess(e.target.checked)}
          />
          Includes API Access
        </label>
        <textarea
          className="md:col-span-3"
          placeholder='Additional Metadata (JSON, e.g., {"strategy":"mean-reversion"})'
          value={metadataStr}
          onChange={(e) => setMetadataStr(e.target.value)}
        />
        <button
          type="button"
          onClick={create}
          className="md:col-span-3 px-4 py-2 rounded bg-blue-600 text-white"
        >
          Create Capital Product
        </button>
      </div>
    </SectionCard>
  );
}

// New TechShowcaseForm Component
function TechShowcaseForm({ onCreated }) {
  const [title, setTitle] = useState('');
  const [slug, setSlug] = useState('');
  const [excerpt, setExcerpt] = useState('');
  const [content, setContent] = useState('');
  const [featuredImage, setFeaturedImage] = useState('');
  const [appUrl, setAppUrl] = useState('');
  const [appType, setAppType] = useState('app');

  const create = async () => {
    try {
      if (!title) return alert('Title required.');
      if (!slug) return alert('Slug required.');

      const payload = {
        title,
        slug,
        excerpt,
        content,
        featured_image: featuredImage || undefined,
        status: 'published',
        division: 'tech',
        metadata: { app_type: appType, app_url: appUrl || undefined },
      };

      const { error } = await supabase.from('posts').insert(payload);
      if (error) throw error;

      setTitle('');
      setSlug('');
      setExcerpt('');
      setContent('');
      setFeaturedImage('');
      setAppUrl('');
      setAppType('app');
      onCreated?.();
      alert('Tech showcase item created.');
    } catch (e) {
      alert(`Create failed: ${e.message}`);
    }
  };

  return (
    <SectionCard title="Tech — Add Showcase Item (App/Website)">
      <div className="grid grid-cols-1 md:grid-cols-3 gap-3">
        <input
          placeholder="Title (e.g., Daito App)"
          value={title}
          onChange={(e) => setTitle(e.target.value)}
        />
        <input
          placeholder="Slug (e.g., daito-app)"
          value={slug}
          onChange={(e) => setSlug(e.target.value)}
        />
        <select
          value={appType}
          onChange={(e) => setAppType(e.target.value)}
          className="dark:bg-gray-800"
        >
          <option value="app">App</option>
          <option value="website">Website</option>
          <option value="review">Review</option>
        </select>
        <input
          placeholder="Featured Image URL"
          className="md:col-span-2"
          value={featuredImage}
          onChange={(e) => setFeaturedImage(e.target.value)}
        />
        <input
          placeholder="App/Website URL"
          className="md:col-span-1"
          value={appUrl}
          onChange={(e) => setAppUrl(e.target.value)}
        />
        <textarea
          className="md:col-span-3"
          placeholder="Excerpt"
          value={excerpt}
          onChange={(e) => setExcerpt(e.target.value)}
        />
        <textarea
          className="md:col-span-3 h-32"
          placeholder="Content (MDX)"
          value={content}
          onChange={(e) => setContent(e.target.value)}
        />
        <button
          type="button"
          onClick={create}
          className="md:col-span-3 px-4 py-2 rounded bg-blue-600 text-white"
        >
          Create Showcase Item
        </button>
      </div>
    </SectionCard>
  );
}

// New MediaShowcaseForm Component
function MediaShowcaseForm({ onCreated }) {
  const [title, setTitle] = useState('');
  const [slug, setSlug] = useState('');
  const [excerpt, setExcerpt] = useState('');
  const [content, setContent] = useState('');
  const [featuredImage, setFeaturedImage] = useState('');
  const [mediaUrl, setMediaUrl] = useState('');
  const [mediaType, setMediaType] = useState('playlist');

  const create = async () => {
    try {
      if (!title) return alert('Title required.');
      if (!slug) return alert('Slug required.');

      const payload = {
        title,
        slug,
        excerpt,
        content,
        featured_image: featuredImage || undefined,
        status: 'published',
        division: 'media',
        metadata: { media_type: mediaType, media_url: mediaUrl || undefined },
      };

      const { error } = await supabase.from('posts').insert(payload);
      if (error) throw error;

      setTitle('');
      setSlug('');
      setExcerpt('');
      setContent('');
      setFeaturedImage('');
      setMediaUrl('');
      setMediaType('playlist');
      onCreated?.();
      alert('Media showcase item created.');
    } catch (e) {
      alert(`Create failed: ${e.message}`);
    }
  };

  return (
    <SectionCard title="Media — Add Showcase Item (Playlist, Podcast, etc.)">
      <div className="grid grid-cols-1 md:grid-cols-3 gap-3">
        <input
          placeholder="Title (e.g., Manyagi Playlist)"
          value={title}
          onChange={(e) => setTitle(e.target.value)}
        />
        <input
          placeholder="Slug (e.g., manyagi-playlist)"
          value={slug}
          onChange={(e) => setSlug(e.target.value)}
        />
        <select
          value={mediaType}
          onChange={(e) => setMediaType(e.target.value)}
          className="dark:bg-gray-800"
        >
          <option value="playlist">Playlist</option>
          <option value="podcast">Podcast</option>
          <option value="reel">Reel</option>
          <option value="short">YouTube Short</option>
          <option value="audiobook">Audiobook</option>
        </select>
        <input
          placeholder="Featured Image URL"
          className="md:col-span-2"
          value={featuredImage}
          onChange={(e) => setFeaturedImage(e.target.value)}
        />
        <input
          placeholder="Media URL (e.g., YouTube Playlist)"
          className="md:col-span-1"
          value={mediaUrl}
          onChange={(e) => setMediaUrl(e.target.value)}
        />
        <textarea
          className="md:col-span-3"
          placeholder="Excerpt"
          value={excerpt}
          onChange={(e) => setExcerpt(e.target.value)}
        />
        <textarea
          className="md:col-span-3 h-32"
          placeholder="Content (MDX)"
          value={content}
          onChange={(e) => setContent(e.target.value)}
        />
        <button
          type="button"
          onClick={create}
          className="md:col-span-3 px-4 py-2 rounded bg-blue-600 text-white"
        >
          Create Showcase Item
        </button>
      </div>
    </SectionCard>
  );
}

// New AffiliatesForm Component
function AffiliatesForm({ onCreated }) {
  const [name, setName] = useState('');
  const [referralCode, setReferralCode] = useState('');
  const [commissionRate, setCommissionRate] = useState('0.1');
  const [metadataStr, setMetadataStr] = useState('');

  const create = async () => {
    try {
      if (!name) return alert('Name required.');
      if (!referralCode) return alert('Referral code required.');

      const payload = {
        name,
        referral_code: referralCode,
        commission_rate: Number(commissionRate),
        status: 'active',
        metadata: metadataStr ? safeJSON(metadataStr, {}) : {},
      };

      const { error } = await supabase.from('affiliates').insert(payload);
      if (error) throw error;

      setName('');
      setReferralCode('');
      setCommissionRate('0.1');
      setMetadataStr('');
      onCreated?.();
      alert('Affiliate created.');
    } catch (e) {
      alert(`Create failed: ${e.message}`);
    }
  };

  return (
    <SectionCard title="Affiliates — Add Partner">
      <div className="grid grid-cols-1 md:grid-cols-3 gap-3">
        <input
          placeholder="Partner Name"
          value={name}
          onChange={(e) => setName(e.target.value)}
        />
        <input
          placeholder="Referral Code"
          value={referralCode}
          onChange={(e) => setReferralCode(e.target.value)}
        />
        <input
          placeholder="Commission Rate (e.g., 0.1 for 10%)"
          type="number"
          step="0.01"
          value={commissionRate}
          onChange={(e) => setCommissionRate(e.target.value)}
        />
        <textarea
          className="md:col-span-3"
          placeholder='Metadata (JSON, e.g., {"partner_type":"influencer"})'
          value={metadataStr}
          onChange={(e) => setMetadataStr(e.target.value)}
        />
        <button
          type="button"
          onClick={create}
          className="md:col-span-3 px-4 py-2 rounded bg-blue-600 text-white"
        >
          Create Affiliate
        </button>
      </div>
    </SectionCard>
  );
}

// New BundlesForm Component
function BundlesForm({ products, onCreated }) {
  const [name, setName] = useState('');
  const [description, setDescription] = useState('');
  const [price, setPrice] = useState('49.99');
  const [productIds, setProductIds] = useState([]);

  const create = async () => {
    try {
      if (!name) return alert('Name required.');
      if (!price) return alert('Price required.');
      if (productIds.length === 0) return alert('Select at least one product.');

      const payload = {
        name,
        description,
        price: Number(price),
        product_ids: productIds,
        status: 'active',
      };

      const { error } = await supabase.from('bundles').insert(payload);
      if (error) throw error;

      setName('');
      setDescription('');
      setPrice('49.99');
      setProductIds([]);
      onCreated?.();
      alert('Bundle created.');
    } catch (e) {
      alert(`Create failed: ${e.message}`);
    }
  };

  return (
    <SectionCard title="Bundles — Create Product Bundle">
      <div className="grid grid-cols-1 md:grid-cols-3 gap-3">
        <input
          placeholder="Bundle Name"
          value={name}
          onChange={(e) => setName(e.target.value)}
        />
        <input
          placeholder="Price"
          type="number"
          value={price}
          onChange={(e) => setPrice(e.target.value)}
        />
        <select
          multiple
          value={productIds}
          onChange={(e) =>
            setProductIds([...e.target.selectedOptions].map((o) => o.value))
          }
          className="md:col-span-3 h-32 dark:bg-gray-800"
        >
          {products.map((p) => (
            <option key={p.id} value={p.id}>
              {p.name} ({p.division})
            </option>
          ))}
        </select>
        <textarea
          className="md:col-span-3"
          placeholder="Description"
          value={description}
          onChange={(e) => setDescription(e.target.value)}
        />
        <button
          type="button"
          onClick={create}
          className="md:col-span-3 px-4 py-2 rounded bg-blue-600 text-white"
        >
          Create Bundle
        </button>
      </div>
    </SectionCard>
  );
}

// Main Admin Component
export default function Admin() {
  const router = useRouter();
  const [user, setUser] = useState(null);
  const [isAdmin, setIsAdmin] = useState(false);
  const [products, setProducts] = useState([]);
  const [orders, setOrders] = useState([]);
  const [subscriptions, setSubscriptions] = useState([]);
  const [assets, setAssets] = useState([]);
  const [siteConfig, setSiteConfig] = useState({});
  const [users, setUsers] = useState([]);
  const [properties, setProperties] = useState([]);
  const [affiliates, setAffiliates] = useState([]);
  const [bundles, setBundles] = useState([]);
  const [events, setEvents] = useState([]);
  const [posts, setPosts] = useState([]);
  const [postForm, setPostForm] = useState({
    id: null,
    title: '',
    slug: '',
    excerpt: '',
    content: '',
    featured_image: '',
    status: 'draft',
    division: 'site',
  });
  const [showPreview, setShowPreview] = useState(false);
  const [mdx, setMdx] = useState(null);
  const [postFilter, setPostFilter] = useState('all');
  const [postQuery, setPostQuery] = useState('');
  const [loading, setLoading] = useState(true);
  const [activeTab, setActiveTab] = useState('overview');
  const [productEdits, setProductEdits] = useState({});
  const [assetEdits, setAssetEdits] = useState({});

  useEffect(() => {
    (async () => {
      const {
        data: { user },
      } = await supabase.auth.getUser();
      if (!user) {
        router.push('/login');
        return;
      }
      setUser(user);

      const { data: userRow } = await supabase
        .from('users')
        .select('role')
        .eq('id', user.id)
        .maybeSingle();

      if (userRow?.role !== 'admin') {
        router.push('/dashboard');
        return;
      }
      setIsAdmin(true);

      await refreshAll();
      setLoading(false);
    })();
  }, [router]);

  const refreshAll = async () => {
    const [p, o, s, a, c, b, u, prop, aff, bund, ev] = await Promise.all([
      supabase.from('products').select('*').order('created_at', { ascending: false }),
      supabase.from('orders').select('*').order('created_at', { ascending: false }),
      supabase
        .from('subscriptions')
        .select('*')
        .order('created_at', { ascending: false }),
      supabase.from('assets').select('*').order('created_at', { ascending: false }),
      supabase.from('site_config').select('*'),
      supabase.from('posts').select('*').order('created_at', { ascending: false }),
      supabase.from('users').select('*').order('created_at', { ascending: false }),
      supabase.from('properties').select('*').order('created_at', { ascending: false }),
      supabase.from('affiliates').select('*').order('created_at', { ascending: false }),
      supabase.from('bundles').select('*').order('created_at', { ascending: false }),
      supabase.from('events').select('*').order('created_at', { ascending: false }),
    ]);

    setProducts(p.data || []);
    setOrders(o.data || []);
    setSubscriptions(s.data || []);
    setAssets(a.data || []);
    setSiteConfig((c.data || []).reduce((acc, item) => ({ ...acc, [item.key]: item.value }), {}));
    setPosts(b.data || []);
    setUsers(u.data || []);
    setProperties(prop.data || []);
    setAffiliates(aff.data || []);
    setBundles(bund.data || []);
    setEvents(ev.data || []);
  };

  const saveProductRow = async (p) => {
    try {
      const edits = productEdits[p.id] || {};
      if (!Object.keys(edits).length) return;

      const nextMeta = {
        ...(p.metadata || {}),
        ...(edits.metadata ? safeJSON(edits.metadata, p.metadata || {}) : {}),
      };

      const payload = {
        ...('thumbnail_url' in edits ? { thumbnail_url: edits.thumbnail_url } : {}),
        ...('display_image' in edits ? { display_image: edits.display_image } : {}),
        ...('printful_product_id' in edits
          ? { printful_product_id: edits.printful_product_id }
          : {}),
        ...('price' in edits ? { price: parseFloat(edits.price || 0) } : {}),
        ...('description' in edits ? { description: edits.description } : {}),
        ...('tagsStr' in edits ? { tags: toArrayTags(edits.tagsStr) } : {}),
        ...(edits.metadata ? { metadata: nextMeta } : {}),
      };

      const { error } = await supabase.from('products').update(payload).eq('id', p.id);
      if (error) throw error;

      setProductEdits((prev) => ({ ...prev, [p.id]: {} }));
      await refreshAll();
      alert('Saved.');
    } catch (e) {
      alert(`Save failed: ${e.message}`);
    }
  };

  const deleteProduct = async (id) => {
    if (!confirm('Delete this product?')) return;
    const { error } = await supabase.from('products').delete().eq('id', id);
    if (error) alert(`Delete failed: ${error.message}`);
    else {
      await refreshAll();
      alert('Product deleted.');
    }
  };

  const saveAssetRow = async (a) => {
    try {
      const edits = assetEdits[a.id] || {};
      if (!Object.keys(edits).length) return;

      const payload = {
        ...('filename' in edits ? { filename: edits.filename } : {}),
        ...('division' in edits ? { division: edits.division } : {}),
        ...('purpose' in edits ? { purpose: edits.purpose } : {}),
        ...('tagsStr' in edits ? { tags: toArrayTags(edits.tagsStr) } : {}),
        ...('metadataStr' in edits ? { metadata: safeJSON(edits.metadataStr, a.metadata || {}) } : {}),
      };

      const { error } = await supabase.from('assets').update(payload).eq('id', a.id);
      if (error) throw error;

      setAssetEdits((prev) => ({ ...prev, [a.id]: {} }));
      await refreshAll();
      alert('Asset saved.');
    } catch (e) {
      alert(`Save failed: ${e.message}`);
    }
  };

  const loadPostToForm = (p) => {
    setPostForm({
      id: p.id,
      title: p.title || '',
      slug: p.slug || '',
      excerpt: p.excerpt || '',
      content: p.content || '',
      featured_image: p.featured_image || '',
      status: p.status || 'draft',
      division: p.division || 'site',
    });
    setShowPreview(false);
    setMdx(null);
    window.scrollTo({ top: 0, behavior: 'smooth' });
  };

  const clearPostForm = () =>
    setPostForm({
      id: null,
      title: '',
      slug: '',
      excerpt: '',
      content: '',
      featured_image: '',
      status: 'draft',
      division: 'site',
    });

  const savePost = async (e) => {
    e.preventDefault();
    try {
      const payload = {
        title: postForm.title,
        slug: postForm.slug,
        excerpt: postForm.excerpt,
        content: postForm.content,
        featured_image: postForm.featured_image,
        status: postForm.status,
        division: postForm.division || 'site',
        author_id: user.id,
      };
      if (postForm.id) {
        const { error } = await supabase.from('posts').update(payload).eq('id', postForm.id);
        if (error) throw error;
      } else {
        const { error } = await supabase.from('posts').insert(payload);
        if (error) throw error;
      }
      clearPostForm();
      await refreshAll();
      alert('Saved post.');
    } catch (err) {
      alert(`Failed to save post: ${err.message}`);
    }
  };

  const publishToggle = async (id, nextStatus) => {
    const { error } = await supabase.from('posts').update({ status: nextStatus }).eq('id', id);
    if (error) alert(error.message);
    else refreshAll();
  };

  const deletePost = async (id) => {
    if (!confirm('Delete this post?')) return;
    const { error } = await supabase.from('posts').delete().eq('id', id);
    if (error) alert(error.message);
    else {
      if (postForm.id === id) clearPostForm();
      refreshAll();
    }
  };

  const doPreview = async () => {
    try {
      const ser = await mdxSerialize(postForm.content || '');
      setMdx(ser);
      setShowPreview(true);
    } catch (err) {
      alert(`MDX parse error: ${err.message}`);
    }
  };

  const kpis = useMemo(() => {
    const last30Orders = orders.filter((o) => isWithinLastDays(o.created_at, 30));
    const revenueL30 = last30Orders.reduce((acc, o) => acc + Number(o.total_amount || 0), 0);
    const ordersL30 = last30Orders.length;
    const subsActive = subscriptions.filter(
      (s) => (s.status || '').toLowerCase() === 'active'
    ).length;
    return { revenueL30, ordersL30, subsActive, users: users.length };
  }, [orders, subscriptions, users]);

  const revenueByDivision = useMemo(() => {
    const map = {};
    orders.forEach((o) => {
      if (!isWithinLastDays(o.created_at, 30)) return;
      const d = (o.division || 'site').toLowerCase();
      map[d] = (map[d] || 0) + Number(o.total_amount || 0);
    });
    return Object.entries(map).map(([division, total]) => ({ division, total }));
  }, [orders]);

  const toggleUserRole = async (userId, currentRole) => {
    const newRole = currentRole === 'admin' ? 'user' : 'admin';
    if (!confirm(`Change role to ${newRole} for this user?`)) return;
    const { error } = await supabase.from('users').update({ role: newRole }).eq('id', userId);
    if (error) alert(`Failed to update role: ${error.message}`);
    else await refreshAll();
  };

  const deleteEvent = async (id) => {
    if (!confirm('Delete this event?')) return;
    const { error } = await supabase.from('events').delete().eq('id', id);
    if (error) alert(`Delete failed: ${error.message}`);
    else await refreshAll();
  };

  if (loading) return <p className="p-6">Loading admin dashboard…</p>;
  if (!isAdmin) return <p className="p-6">Not authorized.</p>;

  const filteredPosts = posts
    .filter((p) =>
      postFilter === 'all'
        ? true
        : (p.status || 'draft') === (postFilter === 'draft' ? 'draft' : 'published')
    )
    .filter((p) =>
      !postQuery
        ? true
        : (p.title || '').toLowerCase().includes(postQuery.toLowerCase()) ||
          (p.slug || '').toLowerCase().includes(postQuery.toLowerCase())
    );

  return (
    <>
      <Head>
        <title>Manyagi Admin Dashboard</title>
      </Head>
      <div className="container mx-auto px-4 py-8 space-y-12 gradient-bg dark:bg-gray-900">
        <nav className="flex gap-2 mb-6 flex-wrap">
          {[
            'overview',
            'publishing',
            'designs',
            'capital',
            'tech',
            'media',
            'realty',
            'assets',
            'blog',
            'affiliates',
            'bundles',
            'users',
            'analytics',
            'events',
          ].map((tab) => (
            <TabButton key={tab} active={activeTab === tab} onClick={() => setActiveTab(tab)}>
              {tab.charAt(0).toUpperCase() + tab.slice(1)}
            </TabButton>
          ))}
        </nav>

        {activeTab === 'overview' && (
          <>
            <SectionCard title="Key Metrics (Last 30 Days)">
              <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                <div className="p-4 rounded border dark:border-gray-700 bg-white dark:bg-gray-800">
                  <div className="text-sm opacity-70">Revenue</div>
                  <div className="text-2xl font-bold">{currency(kpis.revenueL30)}</div>
                </div>
                <div className="p-4 rounded border dark:border-gray-700 bg-white dark:bg-gray-800">
                  <div className="text-sm opacity-70">Orders</div>
                  <div className="text-2xl font-bold">{kpis.ordersL30}</div>
                </div>
                <div className="p-4 rounded border dark:border-gray-700 bg-white dark:bg-gray-800">
                  <div className="text-sm opacity-70">Active Subs</div>
                  <div className="text-2xl font-bold">{kpis.subsActive}</div>
                </div>
                <div className="p-4 rounded border dark:border-gray-700 bg-white dark:bg-gray-800">
                  <div className="text-sm opacity-70">Users</div>
                  <div className="text-2xl font-bold">{kpis.users}</div>
                </div>
              </div>
            </SectionCard>
            <SectionCard title="Revenue by Division (Last 30 Days)">
              {revenueByDivision.length === 0 ? (
                <p className="opacity-70">No orders in the last 30 days.</p>
              ) : (
                <div className="w-full h-64">
                  <ResponsiveContainer width="100%" height="100%">
                    <BarChart data={revenueByDivision}>
                      <CartesianGrid strokeDasharray="3 3" />
                      <XAxis dataKey="division" />
                      <YAxis />
                      <Tooltip />
                      <Bar dataKey="total" />
                    </BarChart>
                  </ResponsiveContainer>
                </div>
              )}
            </SectionCard>
          </>
        )}

        {activeTab === 'publishing' && (
          <SectionCard title="Publishing Division">
            <PublishingProductForm onCreated={refreshAll} />
            <div className="mt-6">
              <h3 className="font-semibold mb-3">Books</h3>
              <div className="overflow-x-auto">
                <table className="w-full text-sm border-collapse">
                  <thead>
                    <tr className="text-left border-b dark:border-gray-700">
                      <th className="py-2">Cover</th>
                      <th>Title</th>
                      <th>Display Image</th>
                      <th>Price</th>
                      <th>Tags</th>
                      <th>Description</th>
                      <th>Metadata (Amazon/PDF/etc.)</th>
                      <th>Actions</th>
                    </tr>
                  </thead>
                  <tbody>
                    {products
                      .filter((p) => p.division === 'publishing')
                      .map((p) => {
                        const row = productEdits[p.id] || {};
                        const prettyMeta = JSON.stringify(p.metadata || {}, null, 0);
                        return (
                          <tr key={p.id} className="border-b dark:border-gray-800 align-top">
                            <td className="py-2">
                              {(p.thumbnail_url || p.display_image) ? (
                                <img
                                  src={p.thumbnail_url || p.display_image}
                                  className="w-14 h-14 object-cover rounded"
                                />
                              ) : (
                                '—'
                              )}
                            </td>
                            <td className="py-2">{p.name}</td>
                            <td className="py-2 min-w-[220px]">
                              <input
                                className="w-full dark:bg-gray-800"
                                placeholder="display_image / thumbnail_url"
                                value={
                                  row.display_image ?? (p.display_image || p.thumbnail_url || '')
                                }
                                onChange={(e) =>
                                  setProductEdits((prev) => ({
                                    ...prev,
                                    [p.id]: {
                                      ...row,
                                      display_image: e.target.value,
                                      thumbnail_url: e.target.value,
                                    },
                                  }))
                                }
                              />
                            </td>
                            <td className="py-2 min-w-[100px]">
                              <input
                                type="number"
                                className="w-full dark:bg-gray-800"
                                placeholder={String(p.price ?? '')}
                                value={row.price ?? (p.price ?? '')}
                                onChange={(e) =>
                                  setProductEdits((prev) => ({
                                    ...prev,
                                    [p.id]: { ...row, price: e.target.value },
                                  }))
                                }
                              />
                            </td>
                            <td className="py-2 min-w-[200px]">
                              <input
                                className="w-full dark:bg-gray-800"
                                placeholder="comma,separated,tags"
                                value={row.tagsStr ?? tagsToCSV(p.tags)}
                                onChange={(e) =>
                                  setProductEdits((prev) => ({
                                    ...prev,
                                    [p.id]: { ...row, tagsStr: e.target.value },
                                  }))
                                }
                              />
                            </td>
                            <td className="py-2 min-w-[300px]">
                              <textarea
                                className="w-full h-24 dark:bg-gray-800"
                                value={row.description ?? (p.description || '')}
                                onChange={(e) =>
                                  setProductEdits((prev) => ({
                                    ...prev,
                                    [p.id]: { ...row, description: e.target.value },
                                  }))
                                }
                              />
                            </td>
                            <td className="py-2 min-w-[360px]">
                              <textarea
                                className="w-full h-24 dark:bg-gray-800"
                                placeholder='{"amazon_url":"…","paperback_url":"…","kindle_url":"…","hardcover_url":"…","pdf_url":"…","format":"ebook","year":2025,"primary_store":"amazon"}'
                                value={row.metadata ?? prettyMeta}
                                onChange={(e) =>
                                  setProductEdits((prev) => ({
                                    ...prev,
                                    [p.id]: { ...row, metadata: e.target.value },
                                  }))
                                }
                              />
                            </td>
                            <td className="py-2 space-x-2">
                              <button
                                className="px-3 py-1 bg-blue-600 text-white rounded"
                                onClick={() => saveProductRow(p)}
                              >
                                Save
                              </button>
                              <button
                                className="px-3 py-1 bg-red-600 text-white rounded"
                                onClick={() => deleteProduct(p.id)}
                              >
                                Delete
                              </button>
                            </td>
                          </tr>
                        );
                      })}
                    {products.filter((p) => p.division === 'publishing').length === 0 && (
                      <tr>
                        <td colSpan={8} className="py-6 opacity-70">
                          No books yet.
                        </td>
                      </tr>
                    )}
                  </tbody>
                </table>
              </div>
            </div>
          </SectionCard>
        )}

        {activeTab === 'designs' && (
          <SectionCard title="Designs Division">
            <QuickProductForm defaultDivision="designs" onCreated={refreshAll} />
            <div className="mt-6">
              <h3 className="font-semibold mb-3">Products (Designs)</h3>
              <table className="w-full text-sm border-collapse">
                <thead>
                  <tr className="text-left border-b dark:border-gray-700">
                    <th className="py-2">Thumb</th>
                    <th>Name</th>
                    <th>Price</th>
                    <th>Printful ID</th>
                    <th>thumbnail_url</th>
                    <th>tags</th>
                    <th>description</th>
                    <th>Actions</th>
                  </tr>
                </thead>
                <tbody>
                  {products
                    .filter((p) => p.division === 'designs')
                    .map((p) => {
                      const row = productEdits[p.id] || {};
                      return (
                        <tr key={p.id} className="border-b dark:border-gray-800 align-top">
                          <td className="py-2">
                            {p.thumbnail_url ? (
                              <img
                                src={p.thumbnail_url}
                                className="w-16 h-16 object-cover rounded"
                              />
                            ) : null}
                          </td>
                          <td className="py-2">{p.name}</td>
                          <td className="py-2 min-w-[100px]">
                            <input
                              type="number"
                              className="w-full dark:bg-gray-800"
                              value={row.price ?? (p.price ?? '')}
                              onChange={(e) =>
                                setProductEdits((prev) => ({
                                  ...prev,
                                  [p.id]: { ...row, price: e.target.value },
                                }))
                              }
                            />
                          </td>
                          <td className="py-2 min-w-[160px]">
                            <input
                              className="w-full dark:bg-gray-800"
                              placeholder="printful_product_id"
                              value={row.printful_product_id ?? (p.printful_product_id || '')}
                              onChange={(e) =>
                                setProductEdits((prev) => ({
                                  ...prev,
                                  [p.id]: { ...row, printful_product_id: e.target.value },
                                }))
                              }
                            />
                          </td>
                          <td className="py-2 min-w-[220px]">
                            <input
                              className="w-full dark:bg-gray-800"
                              placeholder="thumbnail_url"
                              value={row.thumbnail_url ?? (p.thumbnail_url || '')}
                              onChange={(e) =>
                                setProductEdits((prev) => ({
                                  ...prev,
                                  [p.id]: { ...row, thumbnail_url: e.target.value },
                                }))
                              }
                            />
                          </td>
                          <td className="py-2 min-w-[200px]">
                            <input
                              className="w-full dark:bg-gray-800"
                              placeholder="comma,separated,tags"
                              value={row.tagsStr ?? tagsToCSV(p.tags)}
                              onChange={(e) =>
                                setProductEdits((prev) => ({
                                  ...prev,
                                  [p.id]: { ...row, tagsStr: e.target.value },
                                }))
                              }
                            />
                          </td>
                          <td className="py-2 min-w-[220px]">
                            <textarea
                              className="w-full h-16 dark:bg-gray-800"
                              placeholder="description"
                              value={row.description ?? (p.description || '')}
                              onChange={(e) =>
                                setProductEdits((prev) => ({
                                  ...prev,
                                  [p.id]: { ...row, description: e.target.value },
                                }))
                              }
                            />
                          </td>
                          <td className="py-2 space-x-2">
                            <button
                              className="px-3 py-1 bg-blue-600 text-white rounded"
                              onClick={() => saveProductRow(p)}
                            >
                              Save
                            </button>
                            <button
                              className="px-3 py-1 bg-red-600 text-white rounded"
                              onClick={() => deleteProduct(p.id)}
                            >
                              Delete
                            </button>
                          </td>
                        </tr>
                      );
                    })}
                  {products.filter((p) => p.division === 'designs').length === 0 && (
                    <tr>
                      <td colSpan={8} className="py-6 opacity-70">
                        No products yet.
                      </td>
                    </tr>
                  )}
                </tbody>
              </table>
            </div>
          </SectionCard>
        )}

        {activeTab === 'capital' && (
          <SectionCard title="Capital Division">
            <CapitalProductForm onCreated={refreshAll} />
            <div className="mt-6">
              <h3 className="font-semibold mb-3">Products (Capital)</h3>
              <table className="w-full text-sm border-collapse">
                <thead>
                  <tr className="text-left border-b dark:border-gray-700">
                    <th className="py-2">Thumb</th>
                    <th>Name</th>
                    <th>Price</th>
                    <th>Thumbnail URL</th>
                    <th>Tags</th>
                    <th>Description</th>
                    <th>Metadata JSON</th>
                    <th>Actions</th>
                  </tr>
                </thead>
                <tbody>
                  {products
                    .filter((p) => p.division === 'capital')
                    .map((p) => {
                      const row = productEdits[p.id] || {};
                      return (
                        <tr key={p.id} className="border-b dark:border-gray-800 align-top">
                          <td className="py-2">
                            {p.thumbnail_url ? (
                              <img
                                src={p.thumbnail_url}
                                className="w-16 h-16 object-cover rounded"
                              />
                            ) : null}
                          </td>
                          <td className="py-2">{p.name}</td>
                          <td className="py-2 min-w-[100px]">
                            <input
                              type="number"
                              className="w-full dark:bg-gray-800"
                              value={row.price ?? (p.price ?? '')}
                              onChange={(e) =>
                                setProductEdits((prev) => ({
                                  ...prev,
                                  [p.id]: { ...row, price: e.target.value },
                                }))
                              }
                            />
                          </td>
                          <td className="py-2 min-w-[220px]">
                            <input
                              className="w-full dark:bg-gray-800"
                              placeholder="thumbnail_url"
                              value={row.thumbnail_url ?? (p.thumbnail_url || '')}
                              onChange={(e) =>
                                setProductEdits((prev) => ({
                                  ...prev,
                                  [p.id]: { ...row, thumbnail_url: e.target.value },
                                }))
                              }
                            />
                          </td>
                          <td className="py-2 min-w-[200px]">
                            <input
                              className="w-full dark:bg-gray-800"
                              placeholder="comma,separated,tags"
                              value={row.tagsStr ?? tagsToCSV(p.tags)}
                              onChange={(e) =>
                                setProductEdits((prev) => ({
                                  ...prev,
                                  [p.id]: { ...row, tagsStr: e.target.value },
                                }))
                              }
                            />
                          </td>
                          <td className="py-2 min-w-[300px]">
                            <textarea
                              className="w-full h-20 dark:bg-gray-800"
                              placeholder="description"
                              value={row.description ?? (p.description || '')}
                              onChange={(e) =>
                                setProductEdits((prev) => ({
                                  ...prev,
                                  [p.id]: { ...row, description: e.target.value },
                                }))
                              }
                            />
                          </td>
                          <td className="py-2 min-w-[300px]">
                            <textarea
                              className="w-full h-20 dark:bg-gray-800"
                              placeholder='{"license_type":"bot","api_access":false}'
                              value={row.metadata ?? JSON.stringify(p.metadata || {}, null, 0)}
                              onChange={(e) =>
                                setProductEdits((prev) => ({
                                  ...prev,
                                  [p.id]: { ...row, metadata: e.target.value },
                                }))
                              }
                            />
                          </td>
                          <td className="py-2 space-x-2">
                            <button
                              className="px-3 py-1 bg-blue-600 text-white rounded"
                              onClick={() => saveProductRow(p)}
                            >
                              Save
                            </button>
                            <button
                              className="px-3 py-1 bg-red-600 text-white rounded"
                              onClick={() => deleteProduct(p.id)}
                            >
                              Delete
                            </button>
                          </td>
                        </tr>
                      );
                    })}
                  {products.filter((p) => p.division === 'capital').length === 0 && (
                    <tr>
                      <td colSpan={8} className="py-6 opacity-70">
                        No products yet.
                      </td>
                    </tr>
                 )}
                </tbody>
              </table>
            </div>
          </SectionCard>
        )}

        {activeTab === 'tech' && (
          <SectionCard title="Tech Division">
            <TechShowcaseForm onCreated={refreshAll} />
            <div className="mt-6">
              <h3 className="font-semibold mb-3">Showcase Items (Tech)</h3>
              <table className="w-full text-sm border-collapse">
                <thead>
                  <tr className="text-left border-b dark:border-gray-700">
                    <th className="py-2">Title</th>
                    <th>Slug</th>
                    <th>Image</th>
                    <th>Metadata</th>
                    <th>Actions</th>
                  </tr>
                </thead>
                <tbody>
                  {posts
                    .filter((p) => p.division === 'tech')
                    .map((p) => (
                      <tr key={p.id} className="border-b dark:border-gray-800 align-top">
                        <td className="py-2">{p.title}</td>
                        <td className="py-2">{p.slug}</td>
                        <td className="py-2">
                          {p.featured_image ? (
                            <img
                              src={p.featured_image}
                              className="w-16 h-16 object-cover rounded"
                            />
                          ) : (
                            '—'
                          )}
                        </td>
                        <td className="py-2 min-w-[200px]">
                          <textarea
                            className="w-full h-16 dark:bg-gray-800"
                            value={JSON.stringify(p.metadata || {}, null, 0)}
                            readOnly
                          />
                        </td>
                        <td className="py-2 space-x-2">
                          <button
                            className="px-3 py-1 bg-blue-600 text-white rounded"
                            onClick={() => loadPostToForm(p)}
                          >
                            Edit
                          </button>
                          <button
                            className="px-3 py-1 bg-red-600 text-white rounded"
                            onClick={() => deletePost(p.id)}
                          >
                            Delete
                          </button>
                        </td>
                      </tr>
                    ))}
                  {posts.filter((p) => p.division === 'tech').length === 0 && (
                    <tr>
                      <td colSpan={5} className="py-6 opacity-70">
                        No showcase items yet.
                      </td>
                    </tr>
                  )}
                </tbody>
              </table>
            </div>
          </SectionCard>
        )}

        {activeTab === 'media' && (
          <SectionCard title="Media Division">
            <MediaShowcaseForm onCreated={refreshAll} />
            <div className="mt-6">
              <h3 className="font-semibold mb-3">Showcase Items (Media)</h3>
              <table className="w-full text-sm border-collapse">
                <thead>
                  <tr className="text-left border-b dark:border-gray-700">
                    <th className="py-2">Title</th>
                    <th>Slug</th>
                    <th>Image</th>
                    <th>Metadata</th>
                    <th>Actions</th>
                  </tr>
                </thead>
                <tbody>
                  {posts
                    .filter((p) => p.division === 'media')
                    .map((p) => (
                      <tr key={p.id} className="border-b dark:border-gray-800 align-top">
                        <td className="py-2">{p.title}</td>
                        <td className="py-2">{p.slug}</td>
                        <td className="py-2">
                          {p.featured_image ? (
                            <img
                              src={p.featured_image}
                              className="w-16 h-16 object-cover rounded"
                            />
                          ) : (
                            '—'
                          )}
                        </td>
                        <td className="py-2 min-w-[200px]">
                          <textarea
                            className="w-full h-16 dark:bg-gray-800"
                            value={JSON.stringify(p.metadata || {}, null, 0)}
                            readOnly
                          />
                        </td>
                        <td className="py-2 space-x-2">
                          <button
                            className="px-3 py-1 bg-blue-600 text-white rounded"
                            onClick={() => loadPostToForm(p)}
                          >
                            Edit
                          </button>
                          <button
                            className="px-3 py-1 bg-red-600 text-white rounded"
                            onClick={() => deletePost(p.id)}
                          >
                            Delete
                          </button>
                        </td>
                      </tr>
                    ))}
                  {posts.filter((p) => p.division === 'media').length === 0 && (
                    <tr>
                      <td colSpan={5} className="py-6 opacity-70">
                        No showcase items yet.
                      </td>
                    </tr>
                  )}
                </tbody>
              </table>
            </div>
          </SectionCard>
        )}

        {activeTab === 'realty' && (
          <div className="mt-8 glass p-6 rounded">
            <h3 className="text-xl font-bold mb-2">Realty Gallery Uploader</h3>
            <p className="text-sm opacity-80 mb-4">
              Upload multiple images to storage under <code>assets/realty/&lt;purpose&gt;/YYYY/MM</code>.
              Then attach them to a property.
            </p>

            <MultiUploader
              division="realty"
              purpose="gallery"
              onUploaded={refreshAll}
            />

            <div className="mt-6 border-t pt-4">
              <h4 className="font-semibold mb-2">Attach uploaded URLs to a property</h4>
              <AttachToProperty properties={properties} onAfter={refreshAll} />
            </div>

            <div className="mt-6 border-t pt-4">
              <h4 className="font-semibold mb-2">Manage Seasonal Rates for a Property</h4>
              <PropertyRatesPanel properties={properties.filter(p => p.division === 'realty')} />
            </div>

            <div className="mt-6 border-t pt-4">
              <h4 className="font-semibold mb-2">Send Test Itinerary Email</h4>
              <RealtyTestEmailPanelWithProperty />
            </div>
          </div>
        )}

        {activeTab === 'assets' && (
          <SectionCard title="Assets Library">
            <p className="text-sm opacity-80 mb-3">
              Upload once, reuse anywhere. Choose division + purpose to route files into
              structured folders in your Supabase Storage (e.g. <code>designs/hero</code>).
            </p>
            <MultiUploader division="site" purpose="general" fileType="image" onUploaded={refreshAll} />
            <div className="mt-6 overflow-x-auto">
              <table className="w-full text-sm">
                <thead>
                  <tr className="text-left border-b dark:border-gray-700">
                    <th className="py-2">Preview</th>
                    <th>Filename</th>
                    <th>Division</th>
                    <th>Purpose</th>
                    <th>Tags</th>
                    <th>Metadata (JSON)</th>
                    <th>URL</th>
                    <th>Actions</th>
                  </tr>
                </thead>
                <tbody>
                  {assets.slice(0, 50).map((a) => {
                    const row = assetEdits[a.id] || {};
                    return (
                      <tr key={a.id} className="align-top border-b dark:border-gray-800">
                        <td className="py-2">
                          {a.file_type === 'image' ? (
                            <img src={a.file_url} className="w-12 h-12 object-cover rounded" />
                          ) : a.file_type === 'video' ? (
                            '🎞️'
                          ) : (
                            '📄'
                          )}
                        </td>
                        <td className="py-2 min-w-[160px]">
                          <input
                            className="w-full dark:bg-gray-800"
                            placeholder={a.filename || '-'}
                            value={row.filename ?? (a.filename || '')}
                            onChange={(e) =>
                              setAssetEdits((prev) => ({
                                ...prev,
                                [a.id]: { ...row, filename: e.target.value },
                              }))
                            }
                          />
                        </td>
                        <td className="py-2">
                          <select
                            className="dark:bg-gray-800"
                            value={row.division ?? (a.division || 'site')}
                            onChange={(e) =>
                              setAssetEdits((prev) => ({
                                ...prev,
                                [a.id]: { ...row, division: e.target.value },
                              }))
                            }
                          >
                            {['site', 'publishing', 'designs', 'capital', 'tech', 'media', 'realty'].map(
                              (d) => (
                                <option key={d} value={d}>
                                  {d}
                                </option>
                              )
                            )}
                          </select>
                        </td>
                        <td className="py-2">
                          <select
                            className="dark:bg-gray-800"
                            value={row.purpose ?? (a.purpose || 'general')}
                            onChange={(e) =>
                              setAssetEdits((prev) => ({
                                ...prev,
                                [a.id]: { ...row, purpose: e.target.value },
                              }))
                            }
                          >
                            <option value="general">general</option>
                            <option value="hero">hero</option>
                            <option value="carousel">carousel</option>
                          </select>
                        </td>
                        <td className="py-2 min-w-[200px]">
                          <input
                            className="w-full dark:bg-gray-800"
                            placeholder="comma,separated,tags"
                            value={row.tagsStr ?? tagsToCSV(a.tags)}
                            onChange={(e) =>
                              setAssetEdits((prev) => ({
                                ...prev,
                                [a.id]: { ...row, tagsStr: e.target.value },
                              }))
                            }
                          />
                        </td>
                        <td className="py-2 min-w-[260px]">
                          <textarea
                            className="w-full h-16 dark:bg-gray-800"
                            placeholder='{"scene":"exile-portal"}'
                            value={row.metadataStr ?? JSON.stringify(a.metadata || {}, null, 0)}
                            onChange={(e) =>
                              setAssetEdits((prev) => ({
                                ...prev,
                                [a.id]: { ...row, metadataStr: e.target.value },
                              }))
                            }
                          />
                        </td>
                        <td className="py-2 max-w-[280px] truncate">{a.file_url}</td>
                        <td className="py-2 space-x-2">
                          <button
                            className="text-blue-600"
                            type="button"
                            onClick={() => copyText(a.file_url)}
                          >
                            Copy URL
                          </button>
                          <button
                            className="px-3 py-1 bg-blue-600 text-white rounded"
                            type="button"
                            onClick={() => saveAssetRow(a)}
                          >
                            Save
                          </button>
                        </td>
                      </tr>
                    );
                  })}
                  {assets.length === 0 && (
                    <tr>
                      <td colSpan={8} className="py-6 opacity-70">
                        No assets yet.
                      </td>
                    </tr>
                  )}
                </tbody>
              </table>
            </div>
          </SectionCard>
        )}

        {activeTab === 'blog' && (
          <SectionCard title="Blog">
            <SEO
              title="Manyagi Admin - Blog Management"
              description="Manage blog posts for Manyagi divisions."
            />
            <div className="flex flex-col md:flex-row gap-3 mb-4">
              <select
                value={postFilter}
                onChange={(e) => setPostFilter(e.target.value)}
                className="p-2 rounded border dark:bg-gray-800"
              >
                <option value="all">All</option>
                <option value="draft">Drafts</option>
                <option value="published">Published</option>
              </select>
              <input
                placeholder="Search title or slug…"
                value={postQuery}
                onChange={(e) => setPostQuery(e.target.value)}
                className="p-2 rounded border flex-1 dark:bg-gray-800"
              />
            </div>
            <form
              onSubmit={savePost}
              className="grid grid-cols-1 md:grid-cols-2 gap-3 bg-white p-4 rounded border mb-6 dark:bg-gray-800"
            >
              <input
                placeholder="Title"
                value={postForm.title}
                onChange={(e) => setPostForm({ ...postForm, title: e.target.value })}
              />
              <input
                placeholder="Slug"
                value={postForm.slug}
                onChange={(e) => setPostForm({ ...postForm, slug: e.target.value })}
              />
              <input
                className="col-span-2"
                placeholder="Excerpt"
                value={postForm.excerpt}
                onChange={(e) => setPostForm({ ...postForm, excerpt: e.target.value })}
              />
              <input
                className="col-span-2"
                placeholder="Featured Image URL"
                value={postForm.featured_image}
                onChange={(e) => setPostForm({ ...postForm, featured_image: e.target.value })}
              />
              <select
                value={postForm.division}
                onChange={(e) => setPostForm({ ...postForm, division: e.target.value })}
              >
                {['site', 'publishing', 'designs', 'capital', 'tech', 'media', 'realty'].map((d) => (
                  <option key={d} value={d}>
                    {d}
                  </option>
                ))}
              </select>
              <select
                value={postForm.status}
                onChange={(e) => setPostForm({ ...postForm, status: e.target.value })}
              >
                <option value="draft">Draft</option>
                <option value="published">Published</option>
              </select>
              <textarea
                className="col-span-2 h-32"
                placeholder="Content (MDX)"
                value={postForm.content}
                onChange={(e) => setPostForm({ ...postForm, content: e.target.value })}
              />
              <div className="flex gap-2">
                <button className="p-2 bg-black text-white rounded dark:bg-gray-700">
                  Save Post
                </button>
                <button
                  type="button"
                  onClick={doPreview}
                  className="p-2 bg-gray-500 text-white rounded"
                >
                  Preview
                </button>
                <button
                  type="button"
                  onClick={() => {
                    setPostForm({
                      id: null,
                      title: '',
                      slug: '',
                      excerpt: '',
                      content: '',
                      featured_image: '',
                      status: 'draft',
                      division: 'site',
                    });
                    setShowPreview(false);
                    setMdx(null);
                  }}
                  className="p-2 bg-red-500 text-white rounded"
                >
                  Clear
                </button>
              </div>
            </form>
            {showPreview && mdx && (
              <SectionCard>
                <MDXRemote {...mdx} />
              </SectionCard>
            )}
            <table className="w-full text-sm">
              <thead>
                <tr>
                  <th className="text-left py-2">Title</th>
                  <th className="text-left py-2">Slug</th>
                  <th className="text-left py-2">Division</th>
                  <th className="text-left py-2">Status</th>
                  <th className="text-left py-2">Actions</th>
                </tr>
              </thead>
              <tbody>
                {filteredPosts.map((p) => (
                  <tr key={p.id} className="border-t dark:border-gray-800">
                    <td className="py-2">{p.title}</td>
                    <td className="py-2">{p.slug}</td>
                    <td className="py-2">{p.division || 'site'}</td>
                    <td className="py-2">
                      <span
                        className={`px-2 py-1 rounded text-xs ${
                          (p.status || 'draft') === 'published'
                            ? 'bg-green-100 text-green-800'
                            : 'bg-yellow-100 text-yellow-800'
                        }`}
                      >
                        {p.status || 'draft'}
                      </span>
                    </td>
                    <td className="py-2 space-x-2">
                      <button
                        onClick={() => loadPostToForm(p)}
                        className="text-blue-500"
                      >
                        Edit
                      </button>
                      <button
                        onClick={() =>
                          publishToggle(
                            p.id,
                            (p.status || 'draft') === 'published' ? 'draft' : 'published'
                          )
                        }
                        className="text-green-600"
                      >
                        {(p.status || 'draft') === 'published' ? 'Unpublish' : 'Publish'}
                      </button>
                      <button
                        onClick={() => deletePost(p.id)}
                        className="text-red-500"
                      >
                        Delete
                      </button>
                    </td>
                  </tr>
                ))}
                {filteredPosts.length === 0 && (
                  <tr>
                    <td className="py-6 opacity-70" colSpan={5}>
                      No posts found.
                    </td>
                  </tr>
                )}
              </tbody>
            </table>
          </SectionCard>
        )}

        {activeTab === 'affiliates' && (
          <SectionCard title="Affiliates Division">
            <AffiliatesForm onCreated={refreshAll} />
            <div className="mt-6">
              <h3 className="font-semibold mb-3">Affiliates</h3>
              <table className="w-full text-sm border-collapse">
                <thead>
                  <tr className="text-left border-b dark:border-gray-700">
                    <th className="py-2">Name</th>
                    <th>Referral Code</th>
                    <th>Commission Rate</th>
                    <th>Metadata</th>
                    <th>Actions</th>
                  </tr>
                </thead>
                <tbody>
                  {affiliates.map((aff) => (
                    <tr key={aff.id} className="border-b dark:border-gray-800 align-top">
                      <td className="py-2">{aff.name}</td>
                      <td className="py-2">{aff.referral_code}</td>
                      <td className="py-2">{aff.commission_rate * 100}%</td>
                      <td className="py-2 min-w-[200px]">
                        <textarea
                          className="w-full h-16 dark:bg-gray-800"
                          value={JSON.stringify(aff.metadata || {}, null, 0)}
                          readOnly
                        />
                      </td>
                      <td className="py-2">
                        <button
                          className="px-3 py-1 bg-red-600 text-white rounded"
                          onClick={async () => {
                            if (!confirm('Delete this affiliate?')) return;
                            const { error } = await supabase.from('affiliates').delete().eq('id', aff.id);
                            if (error) alert(`Delete failed: ${error.message}`);
                            else await refreshAll();
                          }}
                        >
                          Delete
                        </button>
                      </td>
                    </tr>
                  ))}
                  {affiliates.length === 0 && (
                    <tr>
                      <td colSpan={5} className="py-6 opacity-70">
                        No affiliates yet.
                      </td>
                    </tr>
                  )}
                </tbody>
              </table>
            </div>
          </SectionCard>
        )}

        {activeTab === 'bundles' && (
          <SectionCard title="Bundles Division">
            <BundlesForm products={products} onCreated={refreshAll} />
            <div className="mt-6">
              <h3 className="font-semibold mb-3">Bundles</h3>
              <table className="w-full text-sm border-collapse">
                <thead>
                  <tr className="text-left border-b dark:border-gray-700">
                    <th className="py-2">Name</th>
                    <th>Description</th>
                    <th>Price</th>
                    <th>Products</th>
                    <th>Actions</th>
                  </tr>
                </thead>
                <tbody>
                  {bundles.map((bund) => (
                    <tr key={bund.id} className="border-b dark:border-gray-800 align-top">
                      <td className="py-2">{bund.name}</td>
                      <td className="py-2">{bund.description || '—'}</td>
                      <td className="py-2">{currency(bund.price)}</td>
                      <td className="py-2">{bund.product_ids.length} products</td>
                      <td className="py-2">
                        <button
                          className="px-3 py-1 bg-red-600 text-white rounded"
                          onClick={async () => {
                            if (!confirm('Delete this bundle?')) return;
                            const { error } = await supabase.from('bundles').delete().eq('id', bund.id);
                            if (error) alert(`Delete failed: ${error.message}`);
                            else await refreshAll();
                          }}
                        >
                          Delete
                        </button>
                      </td>
                    </tr>
                  ))}
                  {bundles.length === 0 && (
                    <tr>
                      <td colSpan={5} className="py-6 opacity-70">
                        No bundles yet.
                      </td>
                    </tr>
                  )}
                </tbody>
              </table>
            </div>
          </SectionCard>
        )}

        {activeTab === 'users' && (
          <SectionCard title="Users Management">
            <div className="mt-6 overflow-x-auto">
              <table className="w-full text-sm border-collapse">
                <thead>
                  <tr className="text-left border-b dark:border-gray-700">
                    <th className="py-2">Email</th>
                    <th>Role</th>
                    <th>Created At</th>
                    <th>Actions</th>
                  </tr>
                </thead>
                <tbody>
                  {users.map((u) => (
                    <tr key={u.id} className="border-b dark:border-gray-800">
                      <td className="py-2">{u.email}</td>
                      <td className="py-2">{u.role || 'user'}</td>
                      <td className="py-2">{new Date(u.created_at).toLocaleString()}</td>
                      <td className="py-2">
                        <button
                          className="px-3 py-1 bg-blue-600 text-white rounded"
                          onClick={() => toggleUserRole(u.id, u.role)}
                        >
                          Toggle Role
                        </button>
                      </td>
                    </tr>
                  ))}
                  {users.length === 0 && (
                    <tr>
                      <td colSpan={4} className="py-6 opacity-70">
                        No users yet.
                      </td>
                    </tr>
                  )}
                </tbody>
              </table>
            </div>
          </SectionCard>
        )}

        {activeTab === 'analytics' && (
          <SectionCard title="Analytics Dashboard">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <h3 className="font-semibold mb-3">Revenue by Division</h3>
                <div className="w-full h-64">
                  <ResponsiveContainer width="100%" height="100%">
                    <BarChart data={revenueByDivision}>
                      <CartesianGrid strokeDasharray="3 3" />
                      <XAxis dataKey="division" />
                      <YAxis />
                      <Tooltip />
                      <Bar dataKey="total" fill="#8884d8" />
                    </BarChart>
                  </ResponsiveContainer>
                </div>
              </div>
              {/* Add more analytics as needed, e.g., user growth, order trends */}
            </div>
          </SectionCard>
        )}

        {activeTab === 'events' && (
          <SectionCard title="Events Management">
            {/* Simple form to add events */}
            <div className="grid grid-cols-1 md:grid-cols-3 gap-3 mb-6">
              <input
                placeholder="Event Title"
                value={postForm.title} // Reusing postForm for simplicity, but ideally separate state
                onChange={(e) => setPostForm({ ...postForm, title: e.target.value })}
              />
              <input
                type="datetime-local"
                placeholder="Start Date"
                onChange={(e) => setPostForm({ ...postForm, start_date: e.target.value })}
              />
              <input
                type="datetime-local"
                placeholder="End Date"
                onChange={(e) => setPostForm({ ...postForm, end_date: e.target.value })}
              />
              <textarea
                className="md:col-span-3"
                placeholder="Description"
                value={postForm.description || ''}
                onChange={(e) => setPostForm({ ...postForm, description: e.target.value })}
              />
              <button
                type="button"
                onClick={async () => {
                  const payload = {
                    title: postForm.title,
                    description: postForm.description,
                    start_date: postForm.start_date,
                    end_date: postForm.end_date,
                    division: 'site',
                  };
                  const { error } = await supabase.from('events').insert(payload);
                  if (error) alert(`Create failed: ${error.message}`);
                  else {
                    clearPostForm();
                    refreshAll();
                    alert('Event created.');
                  }
                }}
                className="md:col-span-3 px-4 py-2 rounded bg-blue-600 text-white"
              >
                Add Event
              </button>
            </div>
            <EventCalendar events={events} />
            <div className="mt-6">
              <h3 className="font-semibold mb-3">Events List</h3>
              <table className="w-full text-sm border-collapse">
                <thead>
                  <tr className="text-left border-b dark:border-gray-700">
                    <th className="py-2">Title</th>
                    <th>Start Date</th>
                    <th>End Date</th>
                    <th>Actions</th>
                  </tr>
                </thead>
                <tbody>
                  {events.map((ev) => (
                    <tr key={ev.id} className="border-b dark:border-gray-800">
                      <td className="py-2">{ev.title}</td>
                      <td className="py-2">{new Date(ev.start_date).toLocaleString()}</td>
                      <td className="py-2">{ev.end_date ? new Date(ev.end_date).toLocaleString() : '—'}</td>
                      <td className="py-2">
                        <button
                          className="px-3 py-1 bg-red-600 text-white rounded"
                          onClick={() => deleteEvent(ev.id)}
                        >
                          Delete
                        </button>
                      </td>
                    </tr>
                  ))}
                  {events.length === 0 && (
                    <tr>
                      <td colSpan={4} className="py-6 opacity-70">
                        No events yet.
                      </td>
                    </tr>
                  )}
                </tbody>
              </table>
            </div>
          </SectionCard>
        )}
      </div>
    </>
  );
}

// Added as per patch
function AttachToProperty({ properties, onAfter }) {
  const [propertyId, setPropertyId] = useState('');
  const [urls, setUrls] = useState(''); // newline or comma separated

  const save = async () => {
    if (!propertyId) return alert('Pick a property');
    const list = Array.from(new Set(
      urls.split(/\s|,/).map(s => s.trim()).filter(Boolean)
    ));

    if (list.length === 0) return alert('Add at least one URL');

    // insert into property_images
    const rows = list.map((u, i) => ({
      property_id: propertyId,
      file_url: u,
      file_type: u.match(/\.(mp4)$/i) ? 'video' : 'image',
      position: i,
    }));

    const { error } = await supabase.from('property_images').insert(rows);
    if (error) return alert(error.message);

    setUrls('');
    onAfter?.();
    alert('Attached!');
  };

  return (
    <div className="grid grid-cols-1 md:grid-cols-3 gap-3">
      <select value={propertyId} onChange={e => setPropertyId(e.target.value)} className="dark:bg-gray-800">
        <option value="">Select property</option>
        {properties.map(p => <option key={p.id} value={p.id}>{p.name}</option>)}
      </select>
      <textarea
        className="md:col-span-2 h-24 dark:bg-gray-800"
        placeholder="Paste one URL per line (or comma separated)"
        value={urls}
        onChange={(e) => setUrls(e.target.value)}
      />
      <button onClick={save} className="px-4 py-2 rounded bg-blue-600 text-white">Attach</button>
    </div>
  );
}

// Added as per patch
function RealtyRatesManager({ propertyId }) {
  const [items, setItems] = useState([]);
  const [form, setForm] = useState({
    start_date: '',
    end_date: '',
    nightly_rate: '',
    min_nights: '',
    priority: 0,
    notes: '',
  });
  const load = async () => {
    if (!propertyId) return;
    const r = await fetch(`/api/realty/rates?property_id=${encodeURIComponent(propertyId)}`);
    const j = await r.json();
    setItems(j.items || []);
  };
  useEffect(() => { load(); }, [propertyId]);

  const add = async () => {
    if (!form.start_date || !form.end_date || !form.nightly_rate) {
      alert('Start, end and nightly rate are required');
      return;
    }
    const r = await fetch('/api/realty/rates', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ property_id: propertyId, ...form }),
    });
    const j = await r.json();
    if (!j.ok) return alert(j.error || 'Failed');
    setForm({ start_date: '', end_date: '', nightly_rate: '', min_nights: '', priority: 0, notes: '' });
    load();
  };
  const delItem = async (id) => {
    if (!confirm('Delete rate?')) return;
    const r = await fetch(`/api/realty/rates?id=${encodeURIComponent(id)}`, { method: 'DELETE' });
    const j = await r.json();
    if (!j.ok) return alert(j.error || 'Failed');
    load();
  };

  return (
    <div className="mt-6 glass p-4 rounded">
      <h3 className="font-semibold mb-3">Seasonal / Holiday Rates</h3>
      <div className="grid grid-cols-1 md:grid-cols-6 gap-2">
        <input type="date" value={form.start_date} onChange={(e)=>setForm({...form,start_date:e.target.value})} />
        <input type="date" value={form.end_date} onChange={(e)=>setForm({...form,end_date:e.target.value})} />
        <input type="number" placeholder="Nightly $" value={form.nightly_rate} onChange={(e)=>setForm({...form,nightly_rate:e.target.value})}/>
        <input type="number" placeholder="Min nights" value={form.min_nights} onChange={(e)=>setForm({...form,min_nights:e.target.value})}/>
        <input type="number" placeholder="Priority (higher wins)" value={form.priority} onChange={(e)=>setForm({...form,priority:e.target.value})}/>
        <input placeholder="Notes" value={form.notes} onChange={(e)=>setForm({...form,notes:e.target.value})}/>
      </div>
      <button className="mt-3 px-3 py-2 rounded bg-blue-600 text-white" onClick={add}>Add Rate</button>

      <div className="mt-4 overflow-x-auto">
        <table className="w-full text-sm border-collapse">
          <thead>
            <tr className="text-left border-b dark:border-gray-800">
              <th className="py-2">Dates</th><th>Nightly</th><th>Min</th><th>Priority</th><th>Notes</th><th>Actions</th>
            </tr>
          </thead>
          <tbody>
            {items.map(r => (
              <tr key={r.id} className="border-b dark:border-gray-900">
                <td className="py-2">{r.start_date} → {r.end_date}</td>
                <td className="py-2">${Number(r.nightly_rate).toFixed(2)}</td>
                <td className="py-2">{r.min_nights ?? '—'}</td>
                <td className="py-2">{r.priority ?? 0}</td>
                <td className="py-2">{r.notes || '—'}</td>
                <td className="py-2">
                  <button className="text-red-600" onClick={()=>delItem(r.id)}>Delete</button>
                </td>
              </tr>
            ))}
            {items.length === 0 && <tr><td colSpan={6} className="py-4 opacity-70">No overrides yet.</td></tr>}
          </tbody>
        </table>
      </div>
    </div>
  );
}

// Added as per patch
function PropertyRatesPanel({ properties }) {
  const [selected, setSelected] = useState('');
  return (
    <div className="glass p-4 rounded">
      <div className="flex items-center gap-3 mb-3">
        <select
          className="dark:bg-gray-900"
          value={selected}
          onChange={(e)=>setSelected(e.target.value)}
        >
          <option value="">Select property…</option>
          {properties.map(p => (
            <option key={p.id} value={p.id}>{p.name}</option>
          ))}
        </select>
      </div>
      {selected ? <RealtyRatesManager propertyId={selected} /> : <p className="opacity-70 text-sm">Choose a property to manage seasonal rates.</p>}
    </div>
  );
}

// Added stub for RealtyTestEmailPanel as per partial
function RealtyTestEmailPanel({ properties }) {
  const [selected, setSelected] = useState('');
  const [email, setEmail] = useState(process.env.NEXT_PUBLIC_TEST_EMAIL || '');
  const [busy, setBusy] = useState(false);

  const sendTest = async () => {
    if (!selected) return alert('Select a property');
    if (!email) return alert('Enter an email');
    setBusy(true);
    try {
      const { data } = await axios.post('/api/realty/test-email', { property_id: selected, email });
      alert(data.message || 'Sent!');
    } catch (e) {
      alert(e.message);
    } finally {
      setBusy(false);
    }
  };

  return (
    <div className="glass p-4 rounded">
      <select value={selected} onChange={e => setSelected(e.target.value)} className="dark:bg-gray-800">
        <option value="">Select property</option>
        {properties.map(p => <option key={p.id} value={p.id}>{p.name}</option>)}
      </select>
      <input value={email} onChange={e => setEmail(e.target.value)} placeholder="Test email" className="dark:bg-gray-800" />
      <button onClick={sendTest} disabled={busy} className="px-4 py-2 rounded bg-blue-600 text-white">
        {busy ? 'Sending...' : 'Send Test Email'}
      </button>
    </div>
  );
}

// Added stub for RealtyTestEmailPanelWithProperty as per partial
function RealtyTestEmailPanelWithProperty() {
  // Assume fetching properties or use context; for stub, empty
  return <RealtyTestEmailPanel properties={[]} />;
}


===== FILE: pages/api/admin/fulfillment/retry.js  (size=5870 bytes) =====
// pages/api/admin/fulfillment/retry.js
import { supabaseAdmin } from '@/lib/supabaseAdmin';
import { createPrintfulOrder } from '@/lib/printful';
import Stripe from 'stripe';

const stripe = new Stripe(process.env.STRIPE_SECRET_KEY, { apiVersion: '2024-06-20' });

export default async function handler(req, res) {
  if (req.method !== 'POST') return res.status(405).json({ error: 'Method not allowed' });

  try {
    // --- Auth (admin only) ---
    const auth = req.headers.authorization || '';
    const token = auth.startsWith('Bearer ') ? auth.slice(7) : null;
    if (!token) return res.status(401).json({ error: 'Unauthorized' });

    const { data: userResp, error: getUserErr } = await supabaseAdmin.auth.getUser(token);
    if (getUserErr || !userResp?.user) return res.status(401).json({ error: 'Unauthorized' });

    const { data: roleRow } = await supabaseAdmin
      .from('users')
      .select('role')
      .eq('id', userResp.user.id)
      .maybeSingle();

    if ((roleRow?.role || 'user') !== 'admin') {
      return res.status(403).json({ error: 'Forbidden' });
    }

    // --- Inputs ---
    const { order_id, override_variant_id = null } = req.body || {};
    if (!order_id) return res.status(400).json({ error: 'order_id is required' });

    // --- Load order ---
    const { data: order, error: oErr } = await supabaseAdmin
      .from('orders')
      .select('*')
      .eq('id', order_id)
      .maybeSingle();
    if (oErr) throw oErr;
    if (!order) return res.status(404).json({ error: 'Order not found' });
    if ((order.status || '').toLowerCase() !== 'paid') {
      return res.status(400).json({ error: 'Order is not paid' });
    }
    if (!order.stripe_session_id) {
      return res.status(400).json({ error: 'Missing stripe_session_id on order' });
    }

    // --- Load product & build items ---
    const { data: product } = await supabaseAdmin
      .from('products')
      .select('*')
      .eq('id', order.product_id)
      .maybeSingle();

    const meta = product?.metadata || {};
    const quantity = Math.max(1, Number(order.quantity || 1));

    // If product includes a full multi-line item list, use it; else fall back to single variant
    let items = [];
    if (Array.isArray(meta.printful_items) && meta.printful_items.length > 0) {
      items = meta.printful_items.map(it => ({
        sync_variant_id: Number(it.sync_variant_id),
        quantity: Math.max(1, Number(it.quantity || quantity)),
      }));
    } else {
      const syncVariantId =
        override_variant_id ||
        meta.printful_sync_variant_id ||
        meta.printful_sync_variant ||
        null;

      if (!syncVariantId) {
        return res.status(400).json({
          error: 'Product is not configured for Printful (missing printful_sync_variant_id)',
        });
      }
      items = [{ sync_variant_id: Number(syncVariantId), quantity }];
    }

    // --- Get shipping details from original checkout session ---
    const session = await stripe.checkout.sessions.retrieve(order.stripe_session_id);
    const addr = session?.shipping_details?.address || null;
    if (!addr) {
      return res.status(400).json({
        error: 'This order has no shipping address; cannot send to Printful.',
      });
    }

    const recipient = {
      name: session?.customer_details?.name || 'Customer',
      address1: addr.line1 || '',
      city: addr.city || '',
      state_code: addr.state || '',
      country_code: addr.country || 'US',
      zip: addr.postal_code || '',
      phone: session?.customer_details?.phone || '',
      email: session?.customer_details?.email || '',
    };

    const packingSlip = {
      email: 'support@manyagi.net',
      phone: '',
      message: 'Thank you for supporting Manyagi!',
    };

    // Use stripe_session_id as external id for idempotency across webhook/retry
    const externalId = order.stripe_session_id;

    let pf;
    try {
      pf = await createPrintfulOrder({
        externalId,
        recipient,
        items,
        packingSlip,
      });
    } catch (e) {
      // If this fails because the external_id already exists, treat as success and fetch it
      const msg = e?.response?.data?.result || e?.response?.data || e?.message || '';
      const alreadyExists =
        typeof msg === 'string' && /external.*exist|already.*exist/i.test(msg);

      if (alreadyExists) {
        // Attempt to fetch by external_id
        try {
          const resp = await fetch(
            `https://api.printful.com/orders/@${encodeURIComponent(externalId)}`,
            { headers: { Authorization: `Bearer ${process.env.PRINTFUL_API_KEY}` } }
          );
          if (resp.ok) {
            const j = await resp.json();
            pf = j?.result;
          } else {
            throw new Error('Order exists but could not fetch from Printful');
          }
        } catch (fetchErr) {
          console.warn('Printful fetch-by-externalId failed:', fetchErr?.message || fetchErr);
          throw e; // bubble original
        }
      } else {
        throw e; // real error
      }
    }

    // --- Persist fulfillment back on the order ---
    await supabaseAdmin
      .from('orders')
      .update({
        fulfillment_provider: 'printful',
        fulfillment_status: pf?.status || 'submitted',
        fulfillment_id: pf?.id ? String(pf.id) : order.fulfillment_id || null,
        updated_at: new Date().toISOString(),
      })
      .eq('id', order.id);

    return res.status(200).json({ ok: true, printful: pf });
  } catch (err) {
    console.error('fulfillment/retry error:', err?.response?.data || err.message);
    return res.status(500).json({ error: err.message || 'Internal error' });
  }
}


===== FILE: pages/api/admin/quick-create-product.js  (size=4366 bytes) =====
// pages/api/admin/quick-create-product.js
import Stripe from 'stripe';
import { supabaseAdmin } from '@/lib/supabaseAdmin';

const stripe = new Stripe(process.env.STRIPE_SECRET_KEY, { apiVersion: '2024-06-20' });

async function fetchPrintfulPreview(variantId) {
  if (!variantId || !process.env.PRINTFUL_API_KEY) return { preview_url: null, product_id: null };
  try {
    const headers = { Authorization: `Bearer ${process.env.PRINTFUL_API_KEY}` };
    const vRes = await fetch(`https://api.printful.com/store/variants/${variantId}`, { headers });
    if (!vRes.ok) throw new Error('Variant not found');
    const vJson = await vRes.json();
    const variant = vJson?.result;

    let preview_url =
      variant?.files?.find(f => f?.preview_url)?.preview_url ||
      variant?.thumbnail_url || null;

    const product_id = variant?.product_id ?? null;

    if (!preview_url && product_id) {
      const pRes = await fetch(`https://api.printful.com/store/products/${product_id}`, { headers });
      if (pRes.ok) {
        const pJson = await pRes.json();
        const sp = pJson?.result?.sync_product;
        const sv = pJson?.result?.sync_variants || [];
        preview_url =
          sp?.thumbnail_url ||
          (sv.find(x => (x?.files || []).some(f => f?.preview_url))?.files || []).find(f => f?.preview_url)?.preview_url ||
          null;
      }
    }
    return { preview_url, product_id };
  } catch (e) {
    return { preview_url: null, product_id: null };
  }
}

export default async function handler(req, res) {
  if (req.method !== 'POST') return res.status(405).json({ error: 'Method not allowed' });

  try {
    const {
      name,
      description = '',
      price,                 // number or numeric string
      currency = 'usd',
      image = '',            // optional thumbnail/mockup URL
      printfulVariantId = '',// optional: numeric/id as string
      divisions = ['designs'],
      status = 'active',
      tags = [],
      extraMetadata = {},
    } = req.body || {};

    if (!name) return res.status(400).json({ error: 'Name is required' });
    const amount = Number(price);
    if (!(amount > 0)) return res.status(400).json({ error: 'Valid price required' });

    // If no image provided but we have a variant, try to fetch a mockup URL
    let thumbnail_url = image || null;
    let printful_product_id = null;

    if (!thumbnail_url && printfulVariantId) {
      const { preview_url, product_id } = await fetchPrintfulPreview(printfulVariantId);
      thumbnail_url = preview_url || null;
      printful_product_id = product_id ? String(product_id) : null;
    }

    // 1) Stripe objects
    const sProduct = await stripe.products.create({
      name,
      description,
      images: thumbnail_url ? [thumbnail_url] : undefined,
      default_price_data: {
        currency,
        unit_amount: Math.round(amount * 100),
      },
      metadata: {
        brand: 'Manyagi',
        ...extraMetadata,
      },
    });

    // default_price_data returns price in product’s default_price
    const sPriceId =
      typeof sProduct.default_price === 'string'
        ? sProduct.default_price
        : sProduct.default_price?.id;

    // 2) Create Supabase products for each division
    const rows = divisions.map((division) => ({
      name,
      division,
      price: amount,
      description,
      status,
      thumbnail_url: thumbnail_url || null,
      printful_product_id: printful_product_id, // may be null if not fetched
      tags,
      metadata: {
        stripe_product_id: sProduct.id,
        stripe_price_id: sPriceId,
        printful_sync_variant_id: printfulVariantId || null,
        extra: extraMetadata || {},
      },
    }));

    const { error: insErr } = await supabaseAdmin.from('products').insert(rows);
    if (insErr) throw insErr;

    return res.status(200).json({
      ok: true,
      stripe_product_id: sProduct.id,
      stripe_price_id: sPriceId,
      used_thumbnail_url: thumbnail_url || null,
      printful_product_id: printful_product_id,
      divisions_created: divisions,
    });
  } catch (err) {
    console.error('quick-create-product error:', err);
    return res.status(500).json({ error: err.message || 'Internal error' });
  }
}


===== FILE: pages/api/admin/upload-asset-multi.js  (size=3559 bytes) =====
// pages/api/admin/upload-asset-multi.js
import { supabaseAdmin } from '@/lib/supabaseAdmin';
import { nanoid } from 'nanoid';

export const config = { api: { bodyParser: { sizeLimit: '25mb' } } }; // allow chunky uploads

const BUCKET = 'assets';

/**
 * Body:
 * {
 *   files: [{ data: base64WithoutPrefix, name: "photo.webp" }, ...],
 *   division: "realty" | "publishing" | "designs" | "site" ...,
 *   purpose: "general" | "hero" | "carousel",
 *   folder: "optional/extra/path",
 *   metadata: { ... } // optional metadata to save in assets table
 * }
 *
 * Returns: { ok: true, items: [{ file_url, path, name }] }
 */
export default async function handler(req, res) {
  if (req.method !== 'POST') return res.status(405).json({ error: 'Method not allowed' });

  try {
    // Added: Admin auth check
    const auth = req.headers.authorization || '';
    const token = auth.startsWith('Bearer ') ? auth.slice(7) : null;
    if (!token) return res.status(401).json({ error: 'Unauthorized' });

    const { data: userResp, error: getUserErr } = await supabaseAdmin.auth.getUser(token);
    if (getUserErr || !userResp?.user) return res.status(401).json({ error: 'Unauthorized' });

    const { data: roleRow } = await supabaseAdmin
      .from('users')
      .select('role')
      .eq('id', userResp.user.id)
      .maybeSingle();

    if ((roleRow?.role || 'user') !== 'admin') {
      return res.status(403).json({ error: 'Forbidden' });
    }

    const { files, division = 'site', purpose = 'general', folder = '', metadata = {} } = req.body || {};
    if (!Array.isArray(files) || files.length === 0) {
      return res.status(400).json({ error: 'No files provided' });
    }

    const now = new Date();
    const yyyy = now.getUTCFullYear();
    const mm = String(now.getUTCMonth() + 1).padStart(2, '0');

    const basePrefix = `${division}/${purpose}/${yyyy}/${mm}${folder ? `/${folder}` : ''}`;

    const out = [];

    for (const f of files) {
      const name = f?.name || `upload-${nanoid(8)}`;
      // guess contentType from name
      const ext = name.split('.').pop()?.toLowerCase() || 'bin';
      const contentType =
        ext === 'webp' ? 'image/webp'
      : ext === 'jpg' || ext === 'jpeg' ? 'image/jpeg'
      : ext === 'png' ? 'image/png'
      : ext === 'mp4' ? 'video/mp4'
      : ext === 'pdf' ? 'application/pdf'
      : 'application/octet-stream';

      const path = `${basePrefix}/${nanoid(6)}-${name}`;
      const buffer = Buffer.from(f.data, 'base64');

      const { error: upErr } = await supabaseAdmin.storage
        .from(BUCKET)
        .upload(path, buffer, { contentType, upsert: false });

      if (upErr) throw upErr;

      const { data: pub } = supabaseAdmin.storage.from(BUCKET).getPublicUrl(path);
      const file_url = pub?.publicUrl;

      // OPTIONAL: record in your `assets` table for discoverability
      await supabaseAdmin.from('assets').insert({
        bucket: BUCKET,
        path,
        file_url,
        file_type: contentType.startsWith('image') ? 'image'
                 : contentType.startsWith('video') ? 'video'
                 : 'file',
        division,
        purpose,
        filename: name,
        metadata,
      });

      out.push({ file_url, path, name });
    }

    return res.status(200).json({ ok: true, items: out });
  } catch (e) {
    console.error('upload-asset-multi error', e);
    return res.status(500).json({ error: e.message || 'Upload failed' });
  }
}


===== FILE: pages/api/admin/upload-asset.js  (size=9043 bytes) =====
// pages/api/admin/upload-asset.js
// Upload to Supabase Storage, insert into public.assets, and (optionally) upsert/link tags.
// Works with your existing supabaseAdmin helper (service role).
// Accepts file.data as either raw base64 *or* a data URL.
// Returns the inserted asset row, plus convenience fields.

import { supabaseAdmin } from '@/lib/supabaseAdmin';

export const config = { api: { bodyParser: { sizeLimit: '50mb' } } }; // allow big images/mp4

// ---------- helpers ----------
const clean = (s) =>
  String(s || '')
    .trim()
    .toLowerCase()
    .replace(/\s+/g, '-')
    .replace(/[^a-z0-9._-]/g, '');

const normalizeTags = (input) => {
  if (!input) return [];
  if (Array.isArray(input)) return input.map(clean).filter(Boolean);
  if (typeof input === 'string') return input.split(',').map(clean).filter(Boolean);
  return [];
};

const guessMime = (name, fallbackType) => {
  const ext = (String(name || '').split('.').pop() || '').toLowerCase();
  if (['jpg', 'jpeg'].includes(ext)) return 'image/jpeg';
  if (ext === 'png') return 'image/png';
  if (ext === 'webp') return 'image/webp';
  if (ext === 'gif') return 'image/gif';
  if (ext === 'mp4') return 'video/mp4';
  if (ext === 'pdf') return 'application/pdf';
  // fall back to declared file_type if helpful
  if (fallbackType === 'image') return 'application/octet-stream'; // storage will still host
  if (fallbackType === 'video') return 'video/mp4';
  if (fallbackType === 'pdf') return 'application/pdf';
  return 'application/octet-stream';
};

const toBuffer = (maybeBase64) => {
  // Accept plain base64 or full data URL
  if (!maybeBase64) return null;
  const base64 =
    typeof maybeBase64 === 'string'
      ? (maybeBase64.includes('base64,') ? maybeBase64.split('base64,').pop() : maybeBase64)
      : '';
  try { return Buffer.from(base64, 'base64'); } catch { return null; }
};

// Best-effort column-exists probe (cached per lambda run)
let _columnsCache = null;
async function tableColumns(table) {
  if (!_columnsCache) {
    const { data } = await supabaseAdmin
      .from('pg_catalog.pg_attribute') // will be blocked by RLS; use information_schema via rpc? Simpler: try-select.
      .select('*')
      .limit(0);
    // In case the above is blocked, just fall back to a direct attempt below.
  }
  // Cheap fallback: ask information_schema
  const { data } = await supabaseAdmin
    .from('information_schema.columns')
    .select('column_name')
    .eq('table_schema', 'public')
    .eq('table_name', table);
  return (data || []).map((r) => r.column_name);
}

export default async function handler(req, res) {
  if (req.method !== 'POST') return res.status(405).json({ error: 'Method not allowed' });

  try {
    // ---------- 1) Auth: Bearer token + admin role ----------
    const auth = req.headers.authorization || '';
    const token = auth.startsWith('Bearer ') ? auth.slice(7) : null;
    if (!token) return res.status(401).json({ error: 'Unauthorized (missing token)' });

    const { data: u, error: userErr } = await supabaseAdmin.auth.getUser(token);
    if (userErr || !u?.user?.id) return res.status(401).json({ error: 'Unauthorized (invalid token)' });
    const userId = u.user.id;

    const { data: roleRow, error: roleErr } = await supabaseAdmin
      .from('users')
      .select('role')
      .eq('id', userId)
      .maybeSingle();
    if (roleErr || roleRow?.role !== 'admin') return res.status(403).json({ error: 'Forbidden' });

    // ---------- 2) Parse inputs ----------
    const { file, file_type, division, purpose, metadata, tags } = req.body || {};
    if (!file?.data || !file?.name) return res.status(400).json({ error: 'Missing file {data,name}' });
    if (!file_type || !division || !purpose) {
      return res.status(400).json({ error: 'Missing file_type/division/purpose' });
    }

    const tagSlugs = normalizeTags(tags);
    const now = new Date().toISOString().replace(/[:.]/g, '-');
    const storage_key = `${clean(division)}/${clean(purpose)}/${now}-${clean(file.name)}`;
    const contentType = guessMime(file.name, file_type);

    // ---------- 3) Upload to Storage (handle duplicate path safely) ----------
    const bin = toBuffer(file.data);
    if (!bin) return res.status(400).json({ error: 'Invalid base64 payload' });

    let finalKey = storage_key;
    let upErr = null;

    const doUpload = async (key) => {
      const { error } = await supabaseAdmin.storage
        .from('assets')
        .upload(key, bin, { contentType, upsert: false });
      return error;
    };

    upErr = await doUpload(finalKey);
    if (upErr && String(upErr.message || '').toLowerCase().includes('duplicate')) {
      finalKey = `${clean(division)}/${clean(purpose)}/${now}-${Date.now()}-${clean(file.name)}`;
      upErr = await doUpload(finalKey);
    }
    if (upErr) {
      console.error('[upload error]', upErr);
      return res.status(500).json({ error: `Storage upload failed: ${upErr.message || 'unknown'}` });
    }

    const { data: pub } = await supabaseAdmin.storage.from('assets').getPublicUrl(finalKey);
    const file_url = pub?.publicUrl;
    if (!file_url) return res.status(500).json({ error: 'Failed to compute public URL' });

    // ---------- 4) Normalize metadata ----------
    let meta = {};
    if (metadata) {
      if (typeof metadata === 'string') {
        try { meta = JSON.parse(metadata); } catch { meta = { raw: metadata }; }
      } else if (typeof metadata === 'object') {
        meta = metadata;
      }
    }

    // ---------- 5) Insert into public.assets (supports assets.tags if present) ----------
    const cols = await tableColumns('assets').catch(() => []);
    const hasTagsColumn = cols.includes('tags');          // text[]
    const hasFilename = cols.includes('filename');
    const hasStorageKey = cols.includes('storage_key');
    const hasUploadedBy = cols.includes('uploaded_by');

    const insertPayload = {
      file_url,
      file_type,
      division,
      purpose,
      metadata: { ...meta, tags: tagSlugs }, // keep tags inside metadata too (handy)
    };
    if (hasTagsColumn) insertPayload.tags = tagSlugs;
    if (hasFilename) insertPayload.filename = String(file.name);
    if (hasStorageKey) insertPayload.storage_key = finalKey;
    if (hasUploadedBy) insertPayload.uploaded_by = userId;

    let inserted = null;
    {
      const { data, error } = await supabaseAdmin.from('assets').insert(insertPayload).select('*').single();
      if (error) {
        console.error('[insert assets error]', error);
        return res.status(500).json({ error: `DB insert failed: ${error.message}` });
      }
      inserted = data;
    }

    // ---------- 6) Optional tags upsert & linking (assets_tags) ----------
    // If you created public.tags + public.assets_tags, we populate them; otherwise we silently skip.
    try {
      if (tagSlugs.length) {
        // upsert tags
        const upsertRows = tagSlugs.map((slug) => ({
          slug,
          label: slug.replace(/-/g, ' ').replace(/\b\w/g, (c) => c.toUpperCase()),
          kind: 'asset',
        }));
        const { data: tagRows } = await supabaseAdmin
          .from('tags')
          .upsert(upsertRows, { onConflict: 'slug' })
          .select('id, slug');

        if (Array.isArray(tagRows) && tagRows.length) {
          const linkRows = tagRows.map((t) => ({ asset_id: inserted.id, tag_id: t.id }));
          await supabaseAdmin.from('assets_tags').insert(linkRows);
        }
      }
    } catch (e) {
      // tables might not exist; ignore silently
      console.warn('[tags upsert/link skipped]', e?.message || e);
    }

    // ---------- 7) Optional site_config hooks ----------
    try {
      if (['hero', 'logo', 'favicon'].includes(purpose)) {
        await supabaseAdmin
          .from('site_config')
          .upsert({ key: purpose, value: { asset_id: inserted.id, file_url } }, { onConflict: 'key' });
      } else if (purpose === 'carousel') {
        const { data: existing } = await supabaseAdmin
          .from('site_config')
          .select('value')
          .eq('key', 'carousel_images')
          .maybeSingle();
        const arr = Array.isArray(existing?.value) ? existing.value : [];
        const updated = [...arr, file_url].slice(-5);
        await supabaseAdmin.from('site_config').upsert({ key: 'carousel_images', value: updated }, { onConflict: 'key' });
      }
    } catch (e) {
      console.warn('[site_config hook skipped]', e?.message || e);
    }

    // ---------- 8) Done ----------
    return res.status(200).json({
      ...inserted,
      file_url,
      storage_key: finalKey,
      tags: tagSlugs,
    });
  } catch (error) {
    console.error('Asset upload fatal:', error);
    return res.status(500).json({ error: error?.message || 'Failed to upload asset' });
  }
}


===== FILE: pages/api/checkout/create-session.js  (size=5207 bytes) =====
// pages/api/checkout/create-session.js
import Stripe from 'stripe';
import { supabaseAdmin } from '@/lib/supabaseAdmin';

const stripe = new Stripe(process.env.STRIPE_SECRET_KEY, { apiVersion: '2024-06-20' });

export default async function handler(req, res) {
  if (req.method !== 'POST') return res.status(405).json({ error: 'Method not allowed' });

  try {
    const {
      // Shared
      success_url,
      cancel_url,
      // SUBSCRIPTION path
      mode,                 // 'subscription' => create subscription checkout
      price_id,             // optional override; falls back to env
      email,                // optional prefill for subscription
      telegramId,           // from Signals form
      // ONE-TIME path
      product_id,           // required for one-time purchase
      quantity = 1,
      user_id = null,
    } = req.body || {};

    const baseUrl = process.env.NEXT_PUBLIC_SITE_URL || 'http://localhost:3000';

    // -------------------------
    // 1) SUBSCRIPTION CHECKOUT
    // -------------------------
    if (mode === 'subscription') {
      const activePrice = price_id || process.env.NEXT_PUBLIC_STRIPE_PRICE_ID;
      if (!activePrice) {
        return res.status(400).json({ error: 'Missing price_id. Set NEXT_PUBLIC_STRIPE_PRICE_ID or pass price_id in body.' });
      }

      const session = await stripe.checkout.sessions.create({
        mode: 'subscription',
        line_items: [{ price: activePrice, quantity: 1 }],
        allow_promotion_codes: true,
        customer_email: email || undefined,
        success_url: success_url || `${baseUrl}/checkout/success?session_id={CHECKOUT_SESSION_ID}`,
        cancel_url: cancel_url || `${baseUrl}/checkout/cancelled`,
        customer_creation: 'always', // ensures we have a Customer to store metadata on
        // put telegramId everywhere we might read it later
        metadata: {
          telegramId: telegramId ? String(telegramId) : '',
          plan: 'Basic Signals',
          division: 'capital',
        },
        subscription_data: {
          metadata: {
            telegramId: telegramId ? String(telegramId) : '',
            plan: 'Basic Signals',
            division: 'capital',
          },
        },
      });

      return res.status(200).json({ ok: true, id: session.id, url: session.url });
    }

    // --------------------------------
    // 2) ONE-TIME (PRODUCT) CHECKOUT
    // --------------------------------
    if (!product_id) {
      return res.status(400).json({ error: 'product_id is required for one-time checkout (or set mode: "subscription")' });
    }

    const qty = Math.max(1, parseInt(quantity, 10) || 1);

    // Load product from Supabase
    const { data: product, error: pErr } = await supabaseAdmin
      .from('products')
      .select('*')
      .eq('id', product_id)
      .maybeSingle();

    if (pErr) throw pErr;
    if (!product) return res.status(404).json({ error: 'Product not found' });

    const meta = product.metadata || {};
    const stripePriceId = meta.stripe_price_id;
    if (!stripePriceId) {
      return res.status(400).json({ error: 'Missing metadata.stripe_price_id on this product' });
    }

    // Decide if we must collect shipping (for merch/physical items)
    const needsShipping =
      !!meta.printful_sync_variant_id ||
      meta.fulfill_with_printful === true;

    const session = await stripe.checkout.sessions.create({
      mode: 'payment',
      line_items: [{ price: stripePriceId, quantity: qty }],
      allow_promotion_codes: true,
      automatic_tax: { enabled: true },
      shipping_address_collection: needsShipping
        ? { allowed_countries: ['US','CA','GB','AU','NZ','DE','FR','ES','IT','NL','SE'] }
        : undefined,
      phone_number_collection: needsShipping ? { enabled: true } : undefined,
      success_url: success_url || `${baseUrl}/checkout/success?session_id={CHECKOUT_SESSION_ID}`,
      cancel_url: cancel_url || `${baseUrl}/checkout/cancelled`,
      metadata: {
        product_id: String(product.id),
        division: String(product.division || 'site'),
        quantity: String(qty),
        product_name: String(product.name || ''),
      },
    });

    // Record a pending order for your webhook to finalize
    const estimatedTotal = Number(product.price || 0) * qty;
    await supabaseAdmin.from('orders').insert({
      user_id,
      product_id: product.id,
      division: product.division || 'site',
      status: 'pending',
      quantity: qty,
      total_amount: estimatedTotal,
      stripe_session_id: session.id,
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString(),
      product_snapshot: {
        name: product.name,
        price: product.price,
        thumbnail_url: product.thumbnail_url || null,
        metadata: meta || {},
      },
    });

    return res.status(200).json({ ok: true, id: session.id, url: session.url });
  } catch (err) {
    console.error('create-session error:', err);
    return res.status(500).json({ error: err.message || 'Internal error' });
  }
}


===== FILE: pages/api/order-details.js  (size=724 bytes) =====
// pages/api/order-details.js
import { supabaseAdmin } from '@/lib/supabaseAdmin';

export default async function handler(req, res) {
  const { session_id } = req.query;

  if (!session_id) {
    return res.status(400).json({ error: 'Missing session_id' });
  }

  try {
    const { data, error } = await supabaseAdmin.from('orders').select('*').eq('stripe_session_id', session_id).single();
    if (error) throw error;
    if (!data) return res.status(404).json({ error: 'Order not found' });
    res.status(200).json({ ...data, type: data.type || 'general' });
  } catch (error) {
    console.error('Supabase error:', error);
    res.status(500).json({ error: 'Failed to fetch order details' });
  }
}


===== FILE: pages/api/posts.js  (size=522 bytes) =====
import { supabaseAdmin } from '@/lib/supabaseAdmin';

export default async function handler(_req, res) {
  try {
    const { data, error } = await supabaseAdmin
      .from('posts')
      .select('id,title,slug,excerpt,created_at,featured_image,content,status')
      .eq('status', 'published')
      .order('created_at', { ascending: false });
    if (error) throw error;
    res.status(200).json(data || []);
  } catch (e) {
    console.error('posts list error:', e);
    res.status(200).json([]);
  }
}


===== FILE: pages/api/posts/[slug].js  (size=713 bytes) =====
import { supabaseAdmin } from '@/lib/supabaseAdmin';

export default async function handler(req, res) {
  const { slug } = req.query;
  if (!slug) return res.status(400).json({ error: 'Missing slug' });
  try {
    const { data, error } = await supabaseAdmin
      .from('posts')
      .select('id,title,slug,excerpt,created_at,featured_image,content,status')
      .eq('slug', slug)
      .eq('status', 'published')
      .maybeSingle();
    if (error) throw error;
    if (!data) return res.status(404).json({ error: 'Not found' });
    res.status(200).json(data);
  } catch (e) {
    console.error('post fetch error:', e);
    res.status(500).json({ error: 'Failed to fetch post' });
  }
}


===== FILE: pages/api/products.js  (size=6010 bytes) =====
// pages/api/products.js
import { supabaseAdmin } from '@/lib/supabaseAdmin';

function coerceMetadata(meta) {
  if (!meta) return {};
  if (typeof meta === 'object') return meta;
  if (typeof meta === 'string') {
    try {
      return JSON.parse(meta);
    } catch {
      return {};
    }
  }
  return {};
}

function coerceTags(tags) {
  if (!tags) return [];
  if (Array.isArray(tags)) return tags;
  if (typeof tags === 'string') {
    // try JSON first
    try {
      const parsed = JSON.parse(tags);
      if (Array.isArray(parsed)) return parsed.map(String);
    } catch {
      // CSV fallback
      return tags
        .split(',')
        .map(t => t.trim())
        .filter(Boolean);
    }
  }
  return [];
}

export default async function handler(req, res) {
  if (req.method !== 'GET') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  const {
    division = '',
    collection = '', // maps to metadata fields like book/series/drop/year/prompt
    tag = '',        // matches any item in products.tags text[]
    q = '',          // search in name/description/metadata.scene/book
    sort = 'new',    // 'new' | 'price_asc' | 'price_desc'
    limit = '16',
    offset = '0',
  } = req.query;

  try {
    // IMPORTANT: include nft_url in the selection!
    let query = supabaseAdmin
      .from('products')
      .select(
        `
        id, name, description, price, division, status,
        image_url, thumbnail_url, printful_product_id,
        metadata, tags, nft_url,
        created_at
      `,
        { count: 'exact' }
      )
      .eq('status', 'active');

    if (division) query = query.eq('division', division);

    if (q) {
      // Search across name, description, and metadata fields
      query = query.or(
        [
          `name.ilike.%${q}%`,
          `description.ilike.%${q}%`,
          `metadata->>scene.ilike.%${q}%`,
          `metadata->>book.ilike.%${q}%`,
        ].join(',')
      );
    }

    if (tag) {
      // products.tags is text[]; Supabase contains() works with arrays
      query = query.contains('tags', [tag]);
    }

    if (collection) {
      // support "prompt-1" or "2025" or direct book/series/drop strings
      if (/^prompt-\d+$/i.test(collection)) {
        const p = collection.split('-')[1];
        query = query.eq('metadata->>prompt', String(Number(p)));
      } else if (/^\d{4}$/.test(collection)) {
        query = query.eq('metadata->>year', collection);
      } else {
        // try book or series or drop match
        query = query.or(
          [
            `metadata->>book.eq.${collection}`,
            `metadata->>series.eq.${collection}`,
            `metadata->>drop.eq.${collection}`,
          ].join(',')
        );
      }
    }

    if (sort === 'price_asc') {
      query = query.order('price', { ascending: true, nullsFirst: true });
    } else if (sort === 'price_desc') {
      query = query.order('price', { ascending: false, nullsFirst: false });
    } else {
      query = query.order('created_at', { ascending: false });
    }

    const lim = Math.max(1, Math.min(100, Number(limit) || 16));
    const off = Math.max(0, Number(offset) || 0);
    query = query.range(off, off + lim - 1);

    const { data, error, count } = await query;
    if (error) throw error;

    const items = (data || []).map((row) => {
      const metadata = coerceMetadata(row.metadata);
      const tags = coerceTags(row.tags);

      // Prefer top-level nft_url; then metadata.nft_url; support legacy nftUrl as well
      const nft_url =
        row.nft_url ||
        metadata.nft_url ||
        row.nftUrl ||
        metadata.nftUrl ||
        null;

      return {
        id: row.id,
        name: row.name,
        description: row.description || '',
        division: row.division,
        status: row.status,
        price: Number(row.price),
        image_url: row.image_url || '',
        thumbnail_url: row.thumbnail_url || '',
        display_image: row.thumbnail_url || row.image_url || '',
        printful_product_id: row.printful_product_id || '',
        tags,
        metadata,
        // expose nft_url so Card can show the ribbon & button
        nft_url,
        // convenience fields that your UI already uses
        prompt: metadata?.prompt,
        book: metadata?.book,
        scene: metadata?.scene,
        productType:
          row.division === 'designs'
            ? 'merch'
            : row.division === 'publishing'
            ? 'book'
            : row.division === 'capital'
            ? 'download'
            : 'general',
        created_at: row.created_at,
      };
    });

    res.status(200).json({ items, total: count ?? items.length });
  } catch (error) {
    console.error('Supabase products error:', error);

    const fallback =
      division === 'designs'
        ? [
            {
              id: 'fallback-tee',
              name: 'Sample T-Shirt',
              price: 29.99,
              display_image:
                'https://dlbbjeohndiwtofitwec.supabase.co/storage/v1/object/public/assets/images/mock-tee-1.webp',
              thumbnail_url:
                'https://dlbbjeohndiwtofitwec.supabase.co/storage/v1/object/public/assets/images/mock-tee-1.webp',
              image_url:
                'https://dlbbjeohndiwtofitwec.supabase.co/storage/v1/object/public/assets/images/mock-tee-1.webp',
              division: 'designs',
              description: 'Fallback design merchandise',
              printful_product_id: 'fallback-tee-id',
              productType: 'merch',
              metadata: { prompt: 1, book: 'Sample', scene: 'Portal' },
              tags: ['sample', 'tee'],
              nft_url: null,
            },
          ]
        : [];

    res.status(200).json({ items: fallback, total: fallback.length });
  }
}


===== FILE: pages/api/realty/[slug].js  (size=5163 bytes) =====
// pages/realty/[slug].js
import Head from 'next/head';
import { useRouter } from 'next/router';
import { useEffect, useState } from 'react';
import { Calendar, dateFnsLocalizer } from 'react-big-calendar';
import { format, parse, startOfWeek, getDay } from 'date-fns';
import enUS from 'date-fns/locale/en-US';
import 'react-big-calendar/lib/css/react-big-calendar.css';

const localizer = dateFnsLocalizer({
  format,
  parse,
  startOfWeek,
  getDay,
  locales: { 'en-US': enUS }
});

export default function PropertyDetail() {
  const router = useRouter();
  const { slug } = router.query;
  const [property, setProperty] = useState(null);
  const [availability, setAvailability] = useState([]);
  const [checkin, setCheckin] = useState('');
  const [checkout, setCheckout] = useState('');
  const [guests, setGuests] = useState(1);
  const [quote, setQuote] = useState(null);
  const [guestName, setGuestName] = useState('');
  const [guestEmail, setGuestEmail] = useState('');
  const [guestPhone, setGuestPhone] = useState('');
  const [notes, setNotes] = useState('');
  const [loading, setLoading] = useState(true);
  const [busy, setBusy] = useState(false);

  useEffect(() => {
    if (slug) {
      fetch(`/api/realty/property?slug=${slug}`)
        .then(res => res.json())
        .then(data => {
          setProperty(data.property);
          setAvailability(data.availability || []);
          setLoading(false);
        })
        .catch(() => setLoading(false));
    }
  }, [slug]);

  const getQuote = async () => {
    if (!checkin || !checkout) return alert('Select dates');
    setBusy(true);
    try {
      const res = await fetch('/api/realty/quote', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ property_id: property.id, checkin, checkout }),
      });
      const data = await res.json();
      if (!data.ok) throw new Error(data.error);
      setQuote(data);
    } catch (e) {
      alert(e.message);
    } finally {
      setBusy(false);
    }
  };

  const book = async () => {
    if (!quote) return alert('Get a quote first');
    if (!guestName || !guestEmail) return alert('Enter guest details');
    setBusy(true);
    try {
      const res = await fetch('/api/realty/create-checkout', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          property_id: property.id,
          checkin,
          checkout,
          guests,
          guest_name: guestName,
          guest_email: guestEmail,
          guest_phone: guestPhone,
          notes,
        }),
      });
      const data = await res.json();
      if (data.url) window.location.href = data.url;
      else alert('Failed to book');
    } catch (e) {
      alert(e.message);
    } finally {
      setBusy(false);
    }
  };

  const events = availability.map(a => ({
    title: a.status,
    start: new Date(a.date),
    end: new Date(a.date),
    allDay: true,
  }));

  if (loading) return <div>Loading property...</div>;
  if (!property) return <div>Property not found</div>;

  return (
    <>
      <Head>
        <title>{property.name} — Manyagi Realty</title>
        <meta name="description" content={property.description} />
      </Head>
      <section className="container mx-auto px-4 py-16">
        <h1 className="text-4xl font-bold mb-4">{property.name}</h1>
        <img src={property.image_url} alt={property.name} className="w-full h-64 object-cover rounded mb-6" />
        <p className="mb-4">{property.description}</p>
        <p><strong>Price per night:</strong> ${property.nightly_price}</p>

        <h2 className="text-2xl font-bold mt-8">Availability</h2>
        <Calendar
          localizer={localizer}
          events={events}
          startAccessor="start"
          endAccessor="end"
          style={{ height: 500 }}
        />

        <h2 className="text-2xl font-bold mt-8">Book Now</h2>
        <div className="space-y-4">
          <input type="date" value={checkin} onChange={e => setCheckin(e.target.value)} />
          <input type="date" value={checkout} onChange={e => setCheckout(e.target.value)} />
          <input type="number" value={guests} onChange={e => setGuests(e.target.value)} min="1" />
          <button onClick={getQuote} disabled={busy}>Get Quote</button>
          {quote && (
            <div>
              <p>Total: ${quote.summary.total}</p>
              <input placeholder="Name" value={guestName} onChange={e => setGuestName(e.target.value)} />
              <input placeholder="Email" value={guestEmail} onChange={e => setGuestEmail(e.target.value)} />
              <input placeholder="Phone" value={guestPhone} onChange={e => setGuestPhone(e.target.value)} />
              <textarea placeholder="Notes" value={notes} onChange={e => setNotes(e.target.value)} />
              <button onClick={book} disabled={busy}>Book Now</button>
            </div>
          )}
        </div>
      </section>
    </>
  );
}


===== FILE: pages/api/realty/availability.js  (size=640 bytes) =====
// pages/api/realty/availability.js
import { supabaseAdmin } from '@/lib/supabaseAdmin';

export default async function handler(req, res) {
  if (req.method !== 'GET') return res.status(405).json({ error: 'Method not allowed' });
  const { property_id } = req.query;
  if (!property_id) return res.status(400).json({ error: 'property_id required' });

  const { data, error } = await supabaseAdmin
    .from('property_availability')
    .select('*')
    .eq('property_id', property_id)
    .order('date');

  if (error) return res.status(500).json({ error: error.message });
  return res.status(200).json({ items: data });
}


===== FILE: pages/api/realty/book.js  (size=4039 bytes) =====
// pages/api/realty/book.js
import Stripe from 'stripe';
import { supabaseAdmin } from '@/lib/supabaseAdmin';

const stripe = new Stripe(process.env.STRIPE_SECRET_KEY, { apiVersion: '2024-06-20' });

export default async function handler(req, res) {
  if (req.method !== 'POST') return res.status(405).json({ error: 'Method not allowed' });

  try {
    const {
      property_id,
      checkin,        // 'YYYY-MM-DD'
      checkout,       // 'YYYY-MM-DD' (exclusive)
      guests = 1,
      quote_total_cents,        // from /api/realty/quote (server validates)
      currency = 'usd',
      // NEW guest details
      guestName,
      guestEmail,
      guestPhone,
      notes,
      // NEW deposit
      includeDamageDeposit = false,
      success_url,
      cancel_url,
    } = req.body || {};

    if (!property_id || !checkin || !checkout || !quote_total_cents) {
      return res.status(400).json({ error: 'Missing required fields' });
    }

    // Load property for deposit & name
    const { data: prop } = await supabaseAdmin
      .from('properties')
      .select('id, name, metadata')
      .eq('id', property_id)
      .maybeSingle();
    if (!prop) return res.status(404).json({ error: 'Property not found' });

    const meta = prop.metadata || {};
    const depositCents = includeDamageDeposit ? Number(meta.damage_deposit_cents || 0) : 0;

    // Create or update pending reservation row (soft hold tied to Stripe session)
    const nights = Math.max(
      1,
      Math.round(
        (new Date(checkout).getTime() - new Date(checkin).getTime()) / (1000 * 60 * 60 * 24)
      )
    );

    // Stripe line items
    const line_items = [
      {
        price_data: {
          currency,
          unit_amount: Number(quote_total_cents),
          product_data: {
            name: `${prop.name} — ${checkin} → ${checkout} (${nights} nights)`,
            metadata: { division: 'realty', property_id },
          },
        },
        quantity: 1,
      },
    ];

    if (depositCents > 0) {
      line_items.push({
        price_data: {
          currency,
          unit_amount: depositCents,
          product_data: {
            name: 'Damage Deposit (refundable)',
            metadata: { division: 'realty', property_id, type: 'deposit' },
          },
        },
        quantity: 1,
      });
    }

    const baseUrl = process.env.NEXT_PUBLIC_SITE_URL || 'http://localhost:3000';
    const session = await stripe.checkout.sessions.create({
      mode: 'payment',
      line_items,
      customer_email: guestEmail || undefined,
      success_url: success_url || `${baseUrl}/realty/booking-success?session_id={CHECKOUT_SESSION_ID}`,
      cancel_url: cancel_url || `${baseUrl}/realty/booking-cancelled`,
      metadata: {
        type: 'realty_booking',
        property_id,
        checkin,
        checkout,
        guests: String(guests),
        nights: String(nights),
        guestName: guestName || '',
        guestEmail: guestEmail || '',
        guestPhone: guestPhone || '',
        notes: notes || '',
        includeDamageDeposit: includeDamageDeposit ? 'true' : 'false',
      },
    });

    // Create or update pending hold row keyed by session id
    await supabaseAdmin.from('realty_reservations')
      .upsert({
        property_id,
        checkin,
        checkout,
        nights,
        guests,
        status: 'pending',
        amount_cents: Number(quote_total_cents) + Number(depositCents || 0),
        currency,
        stripe_session_id: session.id,
        guest_name: guestName || null,
        guest_email: guestEmail || null,
        guest_phone: guestPhone || null,
        notes: notes || null,
      }, { onConflict: 'stripe_session_id' });

    return res.status(200).json({ ok: true, url: session.url, session_id: session.id });
  } catch (e) {
    console.error('book error', e);
    return res.status(500).json({ error: e.message });
  }
}


===== FILE: pages/api/realty/booking-success.js  (size=1433 bytes) =====
// pages/realty/booking-success.js
import Head from 'next/head';
import { useRouter } from 'next/router';
import { useEffect, useState } from 'react';

export default function BookingSuccess() {
  const router = useRouter();
  const { session_id } = router.query;
  const [summary, setSummary] = useState(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    if (session_id) {
      fetch(`/api/realty/booking-summary?session_id=${session_id}`)
        .then(res => res.json())
        .then(data => {
          setSummary(data);
          setLoading(false);
        })
        .catch(() => setLoading(false));
    }
  }, [session_id]);

  if (loading) return <div>Loading booking summary...</div>;

  return (
    <>
      <Head>
        <title>Booking Success — Manyagi Realty</title>
      </Head>
      <section className="container mx-auto px-4 py-16 text-center">
        <h1 className="text-4xl font-bold mb-4">Booking Confirmed!</h1>
        {summary ? (
          <div>
            <p>Property: {summary.property}</p>
            <p>Check-in: {summary.checkin}</p>
            <p>Check-out: {summary.checkout}</p>
            <p>Guests: {summary.guests}</p>
            <p>Status: {summary.status}</p>
          </div>
        ) : (
          <p>Thank you for your booking. Check your email for details.</p>
        )}
      </section>
    </>
  );
}


===== FILE: pages/api/realty/booking-summary.js  (size=893 bytes) =====
// pages/api/realty/booking-summary.js
import { supabaseAdmin } from '@/lib/supabaseAdmin';

export default async function handler(req, res) {
  if (req.method !== 'GET') return res.status(405).json({ error: 'Method not allowed' });
  const { session_id } = req.query;
  if (!session_id) return res.status(400).json({ error: 'session_id required' });

  const { data: resv } = await supabaseAdmin.from('realty_reservations').select('*').eq('stripe_session_id', session_id).maybeSingle();
  if (!resv) return res.status(404).json({ error: 'Reservation not found' });

  const { data: prop } = await supabaseAdmin.from('properties').select('name').eq('id', resv.property_id).maybeSingle();

  return res.status(200).json({
    property: prop?.name || 'Unknown',
    checkin: resv.checkin,
    checkout: resv.checkout,
    guests: resv.guests,
    status: resv.status,
  });
}


===== FILE: pages/api/realty/booking/[slug].js  (size=3308 bytes) =====
// pages/realty/booking/[slug].js
import { useRouter } from 'next/router';
import { useState } from 'react';

export default function BookingForm() {
  const router = useRouter();
  const { slug } = router.query;
  const [form, setForm] = useState({
    checkin: '', checkout: '', guests: 1, guestName: '', guestEmail: '', guestPhone: '', notes: '',
  });
  const [quote, setQuote] = useState(null);
  const [loading, setLoading] = useState(false);

  const handleQuote = async () => {
    setLoading(true);
    try {
      const res = await fetch('/api/realty/quote', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ property_id: slug, checkin: form.checkin, checkout: form.checkout }),
      });
      const json = await res.json();
      if (!json.ok) throw new Error(json.error);
      setQuote(json);
    } catch (e) {
      alert(e.message);
    } finally {
      setLoading(false);
    }
  };

  const handleBook = async () => {
    setLoading(true);
    try {
      const res = await fetch('/api/realty/book', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          property_id: slug,
          checkin: form.checkin,
          checkout: form.checkout,
          guests: form.guests,
          quote_total_cents: quote?.summary?.total * 100,
          guestName: form.guestName,
          guestEmail: form.guestEmail,
          guestPhone: form.guestPhone,
          notes: form.notes,
        }),
      });
      const json = await res.json();
      if (!json.ok) throw new Error(json.error);
      window.location.href = json.url; // Redirect to Stripe
    } catch (e) {
      alert(e.message);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="container mx-auto px-4 py-10">
      <h1>Book Property</h1>
      <div className="grid gap-4 max-w-md">
        <input type="date" value={form.checkin} onChange={e => setForm({ ...form, checkin: e.target.value })} />
        <input type="date" value={form.checkout} onChange={e => setForm({ ...form, checkout: e.target.value })} />
        <input type="number" value={form.guests} onChange={e => setForm({ ...form, guests: e.target.value })} />
        <button onClick={handleQuote} disabled={loading} className="btn bg-blue-600 text-white">
          Get Quote
        </button>
        {quote && (
          <div>
            <p>Total: ${(quote.summary.total / 100).toFixed(2)}</p>
            <input placeholder="Name" value={form.guestName} onChange={e => setForm({ ...form, guestName: e.target.value })} />
            <input placeholder="Email" value={form.guestEmail} onChange={e => setForm({ ...form, guestEmail: e.target.value })} />
            <input placeholder="Phone" value={form.guestPhone} onChange={e => setForm({ ...form, guestPhone: e.target.value })} />
            <textarea placeholder="Notes" value={form.notes} onChange={e => setForm({ ...form, notes: e.target.value })} />
            <button onClick={handleBook} disabled={loading} className="btn bg-green-600 text-white">
              Book Now
            </button>
          </div>
        )}
      </div>
    </div>
  );
}


===== FILE: pages/api/realty/cleanup-holds.js  (size=544 bytes) =====
// pages/api/realty/cleanup-holds.js
import { supabaseAdmin } from '@/lib/supabaseAdmin';

export default async function handler(req, res) {
  // Delete pending reservations older than 30 min
  const threshold = new Date(Date.now() - 30 * 60 * 1000).toISOString();
  const { error } = await supabaseAdmin
    .from('realty_reservations')
    .delete()
    .eq('status', 'pending')
    .lt('created_at', threshold);

  if (error) return res.status(500).json({ error: error.message });
  return res.status(200).json({ ok: true });
}


===== FILE: pages/api/realty/create-checkout.js  (size=2356 bytes) =====
// pages/api/realty/create-checkout.js
import Stripe from 'stripe';
import { supabaseAdmin } from '@/lib/supabaseAdmin';

const stripe = new Stripe(process.env.STRIPE_SECRET_KEY, { apiVersion: '2024-06-20' });

export default async function handler(req, res) {
  if (req.method !== 'POST') return res.status(405).json({ error: 'Method not allowed' });

  const {
    property_id,
    checkin,
    checkout,
    guests = 1,
    guest_name,
    guest_email,
    guest_phone,
    notes,
  } = req.body;

  if (!property_id || !checkin || !checkout || !guest_name || !guest_email) {
    return res.status(400).json({ error: 'Missing required fields' });
  }

  // Get quote
  const quoteRes = await fetch('/api/realty/quote', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ property_id, checkin, checkout }),
  });
  const quote = await quoteRes.json();
  if (!quote.ok) return res.status(500).json({ error: quote.error });

  // Create pending reservation
  const nights = quote.summary.nights;
  const amountCents = Math.round(quote.summary.total * 100);
  const { data: reservation, error } = await supabaseAdmin.from('realty_reservations').insert({
    property_id,
    checkin,
    checkout,
    nights,
    guests,
    guest_name,
    guest_email,
    guest_phone,
    notes,
    amount_cents: amountCents,
    currency: 'usd',
    status: 'pending',
  }).select('*').maybeSingle();
  if (error) return res.status(500).json({ error: error.message });

  // Create Stripe session
  const session = await stripe.checkout.sessions.create({
    mode: 'payment',
    line_items: [{
      price_data: {
        currency: 'usd',
        product_data: { name: `Booking at Property ID ${property_id}` },
        unit_amount: amountCents,
      },
      quantity: 1,
    }],
    metadata: { type: 'realty_booking', reservation_id: reservation.id },
    success_url: `${req.headers.origin}/realty/booking-success?session_id={CHECKOUT_SESSION_ID}`,
    cancel_url: `${req.headers.origin}/realty/${property_id}?cancelled=true`,
  });

  // Update reservation with session ID
  await supabaseAdmin.from('realty_reservations').update({ stripe_session_id: session.id }).eq('id', reservation.id);

  res.status(200).json({ url: session.url });
}


===== FILE: pages/api/realty/external-blocks.js  (size=1500 bytes) =====
// pages/api/realty/external-blocks.js
import { supabaseAdmin } from '@/lib/supabaseAdmin';

export default async function handler(req, res) {
  if (req.method === 'GET') {
    const { property_id } = req.query;
    if (!property_id) return res.status(400).json({ error: 'property_id required' });
    const { data, error } = await supabaseAdmin
      .from('realty_external_blocks')
      .select('*')
      .eq('property_id', property_id);
    if (error) return res.status(500).json({ error: error.message });
    return res.status(200).json({ items: data });
  }

  if (req.method === 'POST') {
    const { property_id, starts_on, ends_on, source, uid } = req.body || {};
    if (!property_id || !starts_on || !ends_on || !source) return res.status(400).json({ error: 'required fields missing' });
    const { error } = await supabaseAdmin.from('realty_external_blocks').insert({ property_id, starts_on, ends_on, source, uid });
    if (error) return res.status(500).json({ error: error.message });
    return res.status(200).json({ ok: true });
  }

  if (req.method === 'DELETE') {
    const { id } = req.query;
    if (!id) return res.status(400).json({ error: 'id required' });
    const { error } = await supabaseAdmin.from('realty_external_blocks').delete().eq('id', id);
    if (error) return res.status(500).json({ error: error.message });
    return res.status(200).json({ ok: true });
  }

  return res.status(405).json({ error: 'Method not allowed' });
}


===== FILE: pages/api/realty/ical-export.js  (size=3420 bytes) =====
// pages/api/realty/ical-export.js
import { supabaseAdmin } from '@/lib/supabaseAdmin';

const fmt = (d) => {
  const pad = (n) => String(n).padStart(2, '0');
  const y = d.getUTCFullYear();
  const m = pad(d.getUTCMonth() + 1);
  const day = pad(d.getUTCDate());
  const hh = pad(d.getUTCHours());
  const mm = pad(d.getUTCMinutes());
  const ss = pad(d.getUTCSeconds());
  return `${y}${m}${day}T${hh}${mm}${ss}Z`;
};

// Return VEVENT for a date range (all-day style, DTEND exclusive)
const vevent = ({ uid, start, end, summary }) => {
  const dtstamp = fmt(new Date());
  const dtstart = `${start.getUTCFullYear()}${String(start.getUTCMonth() + 1).padStart(2, '0')}${String(start.getUTCDate()).padStart(2, '0')}`;
  const dtend = `${end.getUTCFullYear()}${String(end.getUTCMonth() + 1).padStart(2, '0')}${String(end.getUTCDate()).padStart(2, '0')}`;
  return [
    'BEGIN:VEVENT',
    `UID:${uid}`,
    `DTSTAMP:${dtstamp}`,
    `DTSTART;VALUE=DATE:${dtstart}`,
    `DTEND;VALUE=DATE:${dtend}`,
    `SUMMARY:${summary || 'Reserved'}`,
    'TRANSP:OPAQUE',
    'END:VEVENT',
  ].join('\r\n');
};

export default async function handler(req, res) {
  try {
    const { property_id } = req.query || {};
    if (!property_id) {
      res.statusCode = 400;
      return res.end('Missing property_id');
    }

    // Property (for title)
    const { data: prop } = await supabaseAdmin
      .from('properties')
      .select('id,name')
      .eq('id', property_id)
      .maybeSingle();

    // Paid reservations
    const { data: paid } = await supabaseAdmin
      .from('realty_reservations')
      .select('id, checkin, checkout, status')
      .eq('property_id', property_id)
      .eq('status', 'paid');

    // External blocks
    const { data: blocks } = await supabaseAdmin
      .from('realty_external_blocks')
      .select('id, starts_on, ends_on, source')
      .eq('property_id', property_id);

    const events = [];

    (paid || []).forEach((r) => {
      const ci = new Date(r.checkin);
      const co = new Date(r.checkout); // checkout is exclusive
      events.push(
        vevent({
          uid: `${r.id}@manyagi`,
          start: ci,
          end: co,
          summary: `${prop?.name || 'Property'} — Reserved`,
        })
      );
    });

    (blocks || []).forEach((b) => {
      const s = new Date(b.starts_on + 'T00:00:00Z');
      const e = new Date(b.ends_on + 'T00:00:00Z');
      // Make DTEND exclusive
      const eExclusive = new Date(e);
      eExclusive.setUTCDate(eExclusive.getUTCDate() + 1);
      events.push(
        vevent({
          uid: `${b.id}@manyagi-block`,
          start: s,
          end: eExclusive,
          summary: `${prop?.name || 'Property'} — ${b.source || 'External Block'}`,
        })
      );
    });

    const ics = [
      'BEGIN:VCALENDAR',
      'VERSION:2.0',
      `PRODID:-//Manyagi Realty//Booking Calendar//EN`,
      `X-WR-CALNAME:${(prop?.name || 'Property') + ' — Manyagi'}`,
      ...events,
      'END:VCALENDAR',
      '',
    ].join('\r\n');

    res.setHeader('Content-Type', 'text/calendar; charset=utf-8');
    res.setHeader('Content-Disposition', `attachment; filename="manyagi-${property_id}.ics"`);
    return res.status(200).send(ics);
  } catch (e) {
    return res.status(500).send('ICS error: ' + e.message);
  }
}


===== FILE: pages/api/realty/ical.js  (size=487 bytes) =====
// pages/api/realty/ical.js
export default async function handler(req, res) {
  try {
    const { url } = req.query;
    if (!url) return res.status(400).send('missing url');
    const r = await fetch(url);
    if (!r.ok) return res.status(502).send('ical fetch failed');
    const text = await r.text();
    res.setHeader('Content-Type', 'text/calendar; charset=utf-8');
    return res.status(200).send(text);
  } catch (e) {
    return res.status(500).send('error');
  }
}


===== FILE: pages/api/realty/property.js  (size=1027 bytes) =====
// pages/api/realty/property.js
import { supabaseAdmin } from '@/lib/supabaseAdmin';

export default async function handler(req, res) {
  if (req.method !== 'GET') return res.status(405).json({ error: 'Method not allowed' });
  const { slug } = req.query;
  if (!slug) return res.status(400).json({ error: 'slug required' });

  try {
    const { data: property, error: pErr } = await supabaseAdmin
      .from('properties')
      .select('*')
      .eq('slug', slug)
      .maybeSingle();
    if (pErr || !property) return res.status(404).json({ error: 'Property not found' });

    const { data: availability, error: aErr } = await supabaseAdmin
      .from('property_availability')
      .select('*')
      .eq('property_id', property.id)
      .order('date');

    if (aErr) throw aErr;

    res.status(200).json({ property, availability: availability || [] });
  } catch (err) {
    console.error('Realty property API error:', err);
    res.status(500).json({ error: 'Internal error' });
  }
}


===== FILE: pages/api/realty/quote.js  (size=3116 bytes) =====
// pages/api/realty/quote.js
import { supabaseAdmin } from '@/lib/supabaseAdmin';

function* dateRangeUTC(startISO, endISO) {
  const d = new Date(startISO + 'T00:00:00Z');
  const end = new Date(endISO + 'T00:00:00Z');
  for (; d < end; d.setUTCDate(d.getUTCDate() + 1)) {
    yield new Date(d);
  }
}
const ymd = (d) =>
  `${d.getUTCFullYear()}-${String(d.getUTCMonth() + 1).padStart(2, '0')}-${String(d.getUTCDate()).padStart(2, '0')}`;

export default async function handler(req, res) {
  try {
    if (req.method !== 'POST') return res.status(405).json({ error: 'Method not allowed' });
    const { query } = req;
    const { property_id, checkin, checkout } = req.body || {};
    if (!property_id || !checkin || !checkout) {
      return res.status(400).json({ error: 'property_id, checkin, checkout required (YYYY-MM-DD)' });
    }

    // 1) Load property (base pricing + fees)
    const { data: prop, error: propErr } = await supabaseAdmin
      .from('properties')
      .select('*')
      .eq('id', property_id)
      .maybeSingle();
    if (propErr) return res.status(500).json({ error: propErr.message });
    if (!prop) return res.status(404).json({ error: 'property not found' });

    const m = prop.metadata || {};
    const pr = m.pricing || {};
    const base = (typeof pr.base === 'number' ? pr.base : null) ?? Number(prop.price || 0);
    const weekend = typeof pr.weekend === 'number' ? pr.weekend : null;
    const cleaningFee = Number(pr.cleaning_fee || 0);
    const taxRate = Number(pr.tax_rate || 0);

    // 2) Load overrides
    const { data: rates } = await supabaseAdmin
      .from('realty_rates')
      .select('*')
      .eq('property_id', property_id);

    // 3) Build a map of nightly price per date
    const nights = [];
    for (const d of dateRangeUTC(checkin, checkout)) {
      const iso = ymd(d);
      // pick highest priority override that covers this date
      const candidates = (rates || []).filter(
        (r) => iso >= r.start_date && iso <= r.end_date
      );
      candidates.sort((a, b) => (b.priority || 0) - (a.priority || 0));
      let nightly = candidates.length ? Number(candidates[0].nightly_rate) : base;

      // optional weekend override if no seasonal override matched
      if (!candidates.length && weekend && [5, 6].includes(d.getUTCDay())) {
        nightly = weekend;
      }

      nights.push({ date: iso, nightly });
    }

    const subtotal = nights.reduce((acc, n) => acc + Number(n.nightly), 0);
    const totalBeforeTax = subtotal + cleaningFee;
    const taxAmt = Math.round((totalBeforeTax * taxRate + Number.EPSILON) * 100) / 100;
    const total = totalBeforeTax + taxAmt;

    res.status(200).json({
      ok: true,
      currency: 'usd',
      nights,
      summary: {
        nights: nights.length,
        base_subtotal: subtotal,
        cleaning_fee: cleaningFee,
        tax_rate: taxRate,
        tax_amount: taxAmt,
        total,
      },
    });
  } catch (e) {
    res.status(500).json({ error: e.message || 'internal error' });
  }
}


===== FILE: pages/api/realty/send-booking-confirmation.js  (size=1538 bytes) =====
// pages/api/realty/send-booking-confirmation.js
import { supabaseAdmin } from '@/lib/supabaseAdmin';
import { sendItineraryEmail } from '@/lib/emails/itineraryEmail';
import { sendBookingReceipt } from '@/lib/emails/bookingReceipt';

export default async function handler(req, res) {
  if (req.method !== 'POST') return res.status(405).json({ error: 'Method not allowed' });
  const { session_id } = req.body;
  if (!session_id) return res.status(400).json({ error: 'session_id required' });

  const { data: resv } = await supabaseAdmin.from('realty_reservations').select('*').eq('stripe_session_id', session_id).maybeSingle();
  if (!resv) return res.status(404).json({ error: 'Reservation not found' });

  const { data: prop } = await supabaseAdmin.from('properties').select('name').eq('id', resv.property_id).maybeSingle();

  try {
    await sendItineraryEmail({
      guestName: resv.guest_name,
      to: resv.guest_email,
      property: prop?.name || 'Property',
      checkin: resv.checkin,
      checkout: resv.checkout,
      guests: resv.guests,
      replyTo: 'realty@manyagi.net',
    });

    await sendBookingReceipt({
      guestName: resv.guest_name,
      to: resv.guest_email,
      property: prop?.name || 'Property',
      checkin: resv.checkin,
      checkout: resv.checkout,
      guests: resv.guests,
      replyTo: 'realty@manyagi.net',
    });

    return res.status(200).json({ ok: true });
  } catch (e) {
    return res.status(500).json({ error: e.message });
  }
}


===== FILE: pages/api/realty/sync-ical.js  (size=3803 bytes) =====
// pages/api/realty/sync-ical.js
// Fetch external ICS feeds from property.ical_urls (array of URLs) and upsert blocks
import { supabaseAdmin } from '@/lib/supabaseAdmin';

function parseIcsDate(v) {
  // supports VALUE=DATE (YYYYMMDD) and UTC date-time
  const m = String(v).trim();
  if (/^\\d{8}$/.test(m)) {
    const y = Number(m.slice(0, 4));
    const mm = Number(m.slice(4, 6)) - 1;
    const d = Number(m.slice(6, 8));
    return new Date(Date.UTC(y, mm, d, 0, 0, 0));
  }
  // try basic YYYYMMDDTHHMMSSZ
  const iso = m.replace(
    /^(\d{4})(\d{2})(\d{2})T?(\d{2})(\d{2})(\d{2})Z$/,
    '$1-$2-$3T$4:$5:$6Z'
  );
  const dt = new Date(iso);
  if (!isNaN(dt)) return dt;
  return null;
}

function extractEvents(icsText) {
  const blocks = icsText.split(/BEGIN:VEVENT/gi).slice(1);
  const events = [];
  blocks.forEach((raw) => {
    const seg = 'BEGIN:VEVENT' + raw;
    const endIdx = seg.indexOf('END:VEVENT');
    const vevent = seg.slice(0, endIdx);
    const lines = vevent.split(/\r?\n/).map((l) => l.trim()).filter(Boolean);
    let dtstart, dtend, uid, summary = '';
    lines.forEach((ln) => {
      if (ln.startsWith('UID:')) uid = ln.slice(4);
      if (ln.startsWith('SUMMARY:')) summary = ln.slice(8);
      if (ln.startsWith('DTSTART')) {
        const val = ln.split(':')[1];
        dtstart = parseIcsDate(val);
      }
      if (ln.startsWith('DTEND')) {
        const val = ln.split(':')[1];
        dtend = parseIcsDate(val);
      }
    });
    if (dtstart && dtend) {
      events.push({ uid, summary, dtstart, dtend });
    }
  });
  return events;
}

const ymd = (d) => d.toISOString().slice(0, 10);

export default async function handler(req, res) {
  if (req.method !== 'POST') return res.status(405).json({ error: 'Method not allowed' });

  try {
    const { property_id } = req.body || {};
    if (!property_id) return res.status(400).json({ error: 'property_id required' });

    // Load property to get feeds
    const { data: prop, error: pErr } = await supabaseAdmin
      .from('properties')
      .select('id, metadata')
      .eq('id', property_id)
      .maybeSingle();
    if (pErr) throw pErr;
    if (!prop) return res.status(404).json({ error: 'Property not found' });

    const feeds = (prop.metadata?.ical_urls || []).filter(Boolean);
    if (!feeds.length) return res.status(200).json({ ok: true, imported: 0, feeds: 0 });

    let imported = 0;

    for (const url of feeds) {
      const r = await fetch(url);
      if (!r.ok) continue;
      const text = await r.text();
      const events = extractEvents(text);

      // Clear previous blocks for this source (optional: keep rolling window)
      await supabaseAdmin
        .from('realty_external_blocks')
        .delete()
        .eq('property_id', property_id)
        .eq('source', url);

      const rows = [];
      for (const ev of events) {
        // many channel feeds use DTEND exclusive; make the inclusive date:
        const dtend = new Date(ev.dtend);
        dtend.setUTCDate(dtend.getUTCDate() - 1);
        rows.push({
          property_id,
          starts_on: ymd(ev.dtstart),
          ends_on: ymd(dtend),
          source: url,
          uid: ev.uid || null,
        });
      }
      if (rows.length) {
        // insert in chunks
        const chunk = 500;
        for (let i = 0; i < rows.length; i += chunk) {
          const slice = rows.slice(i, i + chunk);
          await supabaseAdmin.from('realty_external_blocks').insert(slice);
        }
        imported += rows.length;
      }
    }

    return res.status(200).json({ ok: true, feeds: feeds.length, imported });
  } catch (e) {
    return res.status(500).json({ error: e.message });
  }
}


===== FILE: pages/api/realty/test-email.js  (size=1009 bytes) =====
// pages/api/realty/test-email.js
import { supabaseAdmin } from '@/lib/supabaseAdmin';
import { sendItineraryEmail } from '@/lib/emails/itineraryEmail';

export default async function handler(req, res) {
  if (req.method !== 'POST') return res.status(405).json({ error: 'Method not allowed' });
  const { property_id, email } = req.body;
  if (!property_id || !email) return res.status(400).json({ error: 'property_id and email required' });

  const { data: prop } = await supabaseAdmin.from('properties').select('name').eq('id', property_id).maybeSingle();
  if (!prop) return res.status(404).json({ error: 'Property not found' });

  try {
    await sendItineraryEmail({
      guestName: 'Test Guest',
      to: email,
      property: prop.name,
      checkin: '2025-10-25',
      checkout: '2025-10-28',
      guests: 2,
    });
    return res.status(200).json({ ok: true, message: 'Test email sent' });
  } catch (e) {
    return res.status(500).json({ error: e.message });
  }
}


===== FILE: pages/api/site-config.js  (size=460 bytes) =====
import { supabaseAdmin } from '@/lib/supabaseAdmin';

export default async function handler(_req, res) {
  try {
    const { data, error } = await supabaseAdmin.from('site_config').select('*');
    if (error) throw error;
    const map = (data || []).reduce((acc, row) => { acc[row.key] = row.value; return acc; }, {});
    res.status(200).json(map);
  } catch (e) {
    console.error('site-config error:', e);
    res.status(200).json({});
  }
}


===== FILE: pages/api/stripe-webhook.js  (size=11214 bytes) =====
// pages/api/stripe-webhook.js
import { buffer } from 'micro';
import Stripe from 'stripe';
import axios from 'axios';
import { supabaseAdmin } from '@/lib/supabaseAdmin';
import { createPrintfulOrder } from '@/lib/printful';
import { sendEmail } from '@/lib/email';

export const config = { api: { bodyParser: false } };

const stripe = new Stripe(process.env.STRIPE_SECRET_KEY, { apiVersion: '2024-06-20' });
const webhookSecret = process.env.STRIPE_WEBHOOK_SECRET;
const telegramBotToken = process.env.TELEGRAM_BOT_TOKEN;
const telegramGroupChatId = process.env.TELEGRAM_GROUP_CHAT_ID;

export default async function handler(req, res) {
  if (req.method !== 'POST') return res.status(405).json({ error: 'Method not allowed' });

  const buf = await buffer(req);
  const sig = req.headers['stripe-signature'];

  let event;
  try {
    event = stripe.webhooks.constructEvent(buf, sig, webhookSecret);
  } catch (err) {
    return res.status(400).json({ error: `Webhook Error: ${err.message}` });
  }

  try {
    switch (event.type) {
      case 'checkout.session.completed': {
        // Expand
        const session = await stripe.checkout.sessions.retrieve(
          event.data.object.id,
          { expand: ['customer_details', 'shipping_details', 'payment_intent'] }
        );

        // --- Realty bookings ---------------------------------------
        if (session?.metadata?.type === 'realty_booking') {
          const {
            property_id, checkin, checkout, guests, guestEmail, guestName,
          } = session.metadata;

          // 1) Mark reservation row paid
          await supabaseAdmin
            .from('realty_reservations')
            .update({
              status: 'paid',
              updated_at: new Date().toISOString(),
            })
            .eq('stripe_session_id', session.id);

          // 2) Fetch property for name and ical URL
          const { data: prop } = await supabaseAdmin
            .from('properties')
            .select('id, name, metadata')
            .eq('id', property_id)
            .maybeSingle();

          const site = process.env.NEXT_PUBLIC_SITE_URL || 'https://manyagi.net';
          const icsUrl = `${site}/api/realty/ical-export?property_id=${property_id}`;
          const slug = prop?.metadata?.slug || prop?.id;
          const detailsUrl = `${site}/realty/${slug}`;

          // 3) Email the itinerary (if SMTP configured and guestEmail present)
          if (guestEmail) {
            const html = itineraryEmailHTML({
              propertyName: prop?.name,
              checkin, checkout, guests,
              guestName,
              icsUrl,
              detailsUrl,
              supportEmail: process.env.SUPPORT_EMAIL || 'realty@manyagi.net',
            });
            try { await sendEmail({ to: guestEmail, subject: 'Your Manyagi stay is confirmed', html }); }
            catch (e) { console.warn('Email send failed:', e.message); }
          }

          break;
        }

        // --- Physical merch fulfillment (kept from your version) ---
        const email = session?.customer_details?.email || null;
        const name  = session?.customer_details?.name || null;
        const addr  = session?.shipping_details?.address || null;

        await supabaseAdmin
          .from('orders')
          .update({
            status: 'paid',
            customer_email: email,
            customer_name: name,
            shipping_snapshot: addr ? {
              line1: addr.line1 || '',
              line2: addr.line2 || '',
              city: addr.city || '',
              state: addr.state || '',
              postal_code: addr.postal_code || '',
              country: addr.country || '',
            } : null,
            updated_at: new Date().toISOString(),
          })
          .eq('stripe_session_id', session.id);

        try {
          const { data: orderRow } = await supabaseAdmin
            .from('orders')
            .select('*')
            .eq('stripe_session_id', session.id)
            .maybeSingle();

          if (!orderRow) break;

          const { data: product } = await supabaseAdmin
            .from('products')
            .select('*')
            .eq('id', orderRow.product_id)
            .maybeSingle();

          const meta = product?.metadata || {};
          const syncVariantId = meta.printful_sync_variant_id || meta.printful_sync_variant || null;

          const haveShippingAddress = Boolean(session?.shipping_details?.address?.line1);
          if (syncVariantId && haveShippingAddress) {
            const a = session.shipping_details.address;
            const recipient = {
              name: session?.customer_details?.name || 'Customer',
              address1: a.line1 || '',
              address2: a.line2 || '',
              city: a.city || '',
              state_code: a.state || '',
              country_code: a.country || 'US',
              zip: a.postal_code || '',
              phone: session?.customer_details?.phone || '',
              email: session?.customer_details?.email || '',
            };

            const qty = Math.max(1, Number(orderRow?.quantity || 1));
            const items = [{ sync_variant_id: Number(syncVariantId), quantity: qty }];

            const packingSlip = {
              email: 'support@manyagi.net',
              phone: '',
              message: 'Thank you for supporting Manyagi!',
            };

            try {
              const pf = await createPrintfulOrder({
                externalId: session.id,
                recipient,
                items,
                packingSlip,
              });

              await supabaseAdmin
                .from('orders')
                .update({
                  fulfillment_provider: 'printful',
                  fulfillment_status: pf?.status || 'submitted',
                  fulfillment_id: pf?.id ? String(pf.id) : null,
                  updated_at: new Date().toISOString(),
                })
                .eq('stripe_session_id', session.id);
            } catch (pfErr) {
              await supabaseAdmin
                .from('orders')
                .update({
                  fulfillment_provider: 'printful',
                  fulfillment_status: 'error',
                  fulfillment_error: String(pfErr?.response?.data?.error || pfErr.message || 'unknown'),
                  updated_at: new Date().toISOString(),
                })
                .eq('stripe_session_id', session.id);
              console.warn('Printful error:', pfErr?.response?.data || pfErr.message);
            }
          }
        } catch (fulfillErr) {
          console.warn('Fulfillment skipped:', fulfillErr?.response?.data || fulfillErr.message);
        }

        break;
      }

      // ====== your Telegram + Subscriptions logic (unchanged) ======
      case 'customer.subscription.created': {
        const subscription = event.data.object;
        const customer = await stripe.customers.retrieve(subscription.customer);
        const telegramId = subscription?.metadata?.telegramId || customer?.metadata?.telegramId;

        if (telegramId && !isNaN(telegramId)) {
          try {
            await axios.post(`https://api.telegram.org/bot${telegramBotToken}/unbanChatMember`, {
              chat_id: telegramGroupChatId,
              user_id: telegramId,
            });
          } catch (tgErr) {
            console.warn('Telegram unban (created) error:', tgErr?.response?.data || tgErr.message);
          }
        }
        break;
      }

      case 'invoice.paid': {
        const invoice = event.data.object;
        const customerId = invoice.customer;
        const subId = invoice.subscription;

        const [subscription, customer] = await Promise.all([
          subId ? stripe.subscriptions.retrieve(subId) : null,
          customerId ? stripe.customers.retrieve(customerId) : null,
        ]);

        const telegramId =
          subscription?.metadata?.telegramId ||
          customer?.metadata?.telegramId ||
          invoice?.metadata?.telegramId;

        if (!telegramId || isNaN(telegramId)) {
          console.warn(`[stripe-webhook] Missing/invalid Telegram ID, event=${event.type}, invoice=${invoice.id}`);
          break;
        }

        try {
          await axios.post(`https://api.telegram.org/bot${telegramBotToken}/unbanChatMember`, {
            chat_id: telegramGroupChatId,
            user_id: telegramId,
          });
        } catch (tgErr) {
          console.warn('Telegram unban error:', tgErr?.response?.data || tgErr.message);
        }

        const periodStart = subscription?.current_period_start
          ? new Date(subscription.current_period_start * 1000).toISOString()
          : new Date().toISOString();
        const periodEnd = subscription?.current_period_end
          ? new Date(subscription.current_period_end * 1000).toISOString()
          : null;

        await supabaseAdmin.from('subscriptions').upsert({
          stripe_subscription_id: subId || null,
          user_id: null,
          status: 'active',
          plan_type: 'Basic Signals',
          division: 'capital',
          current_period_start: periodStart,
          current_period_end: periodEnd,
          telegram_id: String(telegramId),
          created_at: new Date().toISOString(),
        });

        try {
          const message = `Welcome to Manyagi Capital Signals! Join our Telegram group for real-time updates: ${process.env.TELEGRAM_INVITE_LINK}`;
          await axios.post(`https://api.telegram.org/bot${telegramBotToken}/sendMessage`, {
            chat_id: telegramId,
            text: message,
          });
        } catch (tgMsgErr) {
          console.warn('Telegram welcome message error:', tgMsgErr?.response?.data || tgMsgErr.message);
        }
        break;
      }

      case 'customer.subscription.deleted':
      case 'invoice.payment_failed': {
        const obj = event.data.object;
        const customer = await stripe.customers.retrieve(obj.customer);
        const telegramId = obj.metadata?.telegramId || customer?.metadata?.telegramId;

        if (telegramId) {
          await supabaseAdmin.from('subscriptions').delete().eq('telegram_id', String(telegramId));
          try {
            await axios.post(`https://api.telegram.org/bot${telegramBotToken}/banChatMember`, {
              chat_id: telegramGroupChatId,
              user_id: telegramId,
            });
          } catch (tgBanErr) {
            console.warn('Telegram ban error:', tgBanErr?.response?.data || tgBanErr.message);
          }
        }
        break;
      }

      default:
        console.log(`Unhandled event type: ${event.type}`);
    }

    return res.status(200).json({ received: true });
  } catch (err) {
    console.error('Webhook processing error:', err.message);
    return res.status(500).json({ error: `Webhook processing failed: ${err.message}` });
  }
}


===== FILE: pages/api/stripe/charge.js  (size=3698 bytes) =====
import Stripe from 'stripe';
import { supabaseAdmin } from '@/lib/supabaseAdmin';

const stripe = new Stripe(process.env.STRIPE_SECRET_KEY, { apiVersion: '2024-06-20' });

export default async function handler(req, res) {
  if (req.method !== 'POST') {
    res.setHeader('Allow', ['POST']);
    return res.status(405).json({ error: 'Method not allowed' });
  }

  const { items, telegramId, priceId, email, address } = req.body;

  try {
    if (!items && !priceId) {
      return res.status(400).json({ error: 'Missing items or priceId' });
    }

    const lineItems = items
      ? items.map(item => ({
          price_data: {
            currency: 'usd',
            product_data: { 
              name: item.name, 
              metadata: { 
                division: item.division || 'general',
                type: item.productType || 'general',
                product_id: item.id 
              } 
            },
            unit_amount: Math.round(item.price * 100),
          },
          quantity: item.quantity || 1,
        }))
      : [{ price: priceId, quantity: 1 }];

    const mode = items ? 'payment' : 'subscription';

    const sessionMetadata = {
      telegramId: telegramId ?? '',
      address: JSON.stringify(address || {}),
    };

    const checkoutSession = await stripe.checkout.sessions.create({
      payment_method_types: ['card'],
      line_items: lineItems,
      mode,
      success_url: `${process.env.SITE_URL}/thank-you?session_id={CHECKOUT_SESSION_ID}`,
      cancel_url: `${process.env.SITE_URL}/`,
      customer_email: email,
      // 👇 ensure a Customer object exists (so metadata can live on it)
      customer_creation: 'always',
      // 👇 only for subscriptions: attach telegramId on the Subscription itself
      ...(mode === 'subscription'
        ? {
            subscription_data: {
              metadata: { telegramId: String(telegramId || '') },
            },
          }
        : {}),
      // Keep session-level metadata as well (belt & suspenders)
      metadata: sessionMetadata,
    });

    // Calculate total amount
    let totalAmount = 0;
    if (mode === 'subscription') {
      const pricePromises = lineItems.map(async (li) => {
        if (li.price_data?.unit_amount) return li.price_data.unit_amount / 100;
        const price = await stripe.prices.retrieve(li.price);
        return price.unit_amount / 100;
      });
      const prices = await Promise.all(pricePromises);
      totalAmount = lineItems.reduce((acc, li, index) => acc + (li.quantity * prices[index]), 0);
    } else {
      totalAmount = items.reduce((acc, item) => acc + (item.price * (item.quantity || 1)), 0);
    }

    // Save to Supabase
    const { error: saveError } = await supabaseAdmin.from('orders').insert({
      stripe_session_id: checkoutSession.id,
      total_amount: totalAmount,
      status: 'pending',
      items: items || [],
      shipping_address: address ? { ...address } : null,
      user_id: null,
      division: items?.[0]?.division || 'general',
      type: mode === 'subscription' ? 'signals' : items?.[0]?.productType || 'general',
      created_at: new Date().toISOString(),
    }).select().single();
    
    if (saveError) {
      console.error('Supabase save error:', saveError);
      return res.status(500).json({ error: 'Failed to save order' });
    }

    return res.status(200).json({ sessionId: checkoutSession.id, url: checkoutSession.url });
  } catch (error) {
    console.error('Stripe error:', error);
    return res.status(500).json({ error: error.message || 'Failed to process payment' });
  }
}


===== FILE: pages/api/track.js  (size=809 bytes) =====
import { supabaseAdmin } from '@/lib/supabaseAdmin';

export default async function handler(req, res) {
  const { order_id } = req.query;

  if (!order_id) {
    return res.status(400).json({ error: 'Missing order_id' });
  }

  try {
    const { data: order, error } = await supabaseAdmin
      .from('orders')
      .select('*')
      .eq('id', order_id)
      .single();
      
    if (error || !order) throw new Error('Order not found');

    res.status(200).json({
      status: order.status,
      estimated_delivery: order.updated_at,
      division: order.division,
      total: order.total_amount,
      items: order.items
    });
  } catch (error) {
    console.error('Supabase track error:', error);
    res.status(500).json({ error: 'Failed to track order' });
  }
}


===== FILE: pages/blog.js  (size=2829 bytes) =====
import Head from 'next/head';
import Link from 'next/link';
import { useEffect, useState } from 'react';
import { MDXRemote } from 'next-mdx-remote';
import { serialize } from 'next-mdx-remote/serialize';
import SubscriptionForm from '../components/SubscriptionForm';
import Recommender from '../components/Recommender';

export default function Blog() {
  const [blogPosts, setBlogPosts] = useState([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => { (async () => {
    try {
      const posts = await fetch('/api/posts').then(r => r.json());
      const serialized = await Promise.all((posts || []).map(async (p) => ({ ...p, mdxContent: await serialize(p.content || '') })));
      setBlogPosts(serialized);
    } catch (e) {
      console.error('Blog fetch error:', e);
      const fallback = [{
        id: '1',
        title: 'Welcome to Manyagi',
        slug: 'welcome-to-manyagi',
        excerpt: 'An introduction to our multi-division platform.',
        created_at: '2025-09-01T00:00:00Z',
        featured_image: 'https://dlbbjeohndiwtofitwec.supabase.co/storage/v1/object/public/assets/images/og-home.webp',
        mdxContent: await serialize('# Welcome to Manyagi\n\nThis is our first blog post introducing our platform.')
      }];
      setBlogPosts(fallback);
    } finally { setLoading(false); }
  })(); }, []);

  if (loading) return <div className="container mx-auto px-4 py-16 text-center">Loading blog posts...</div>;

  return (
    <>
      <Head>
        <title>Manyagi Blog — Insights & Updates</title>
        <meta name="description" content="Read the latest updates and insights from Manyagi." />
      </Head>
      <section className="container mx-auto px-4 py-16">
        <h1 className="text-4xl font-bold mb-8 text-center">Manyagi Blog</h1>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          {blogPosts.map((post) => (
            <div key={post.id} className="border rounded p-4">
              <img src={post.featured_image} alt={post.title} className="w-full h-48 object-cover rounded mb-4" />
              <h2 className="text-2xl font-bold mb-2">{post.title}</h2>
              <p className="text-gray-600 mb-2">{new Date(post.created_at).toLocaleDateString()}</p>
              <p className="mb-4">{post.excerpt}</p>
              <Link href={`/blog/${post.slug}`} className="text-blue-600 hover:underline">Read More</Link>
            </div>
          ))}
        </div>
      </section>

      <section id="subscribe" className="container mx-auto px-4 py-16">
        <SubscriptionForm formId="8427852" uid="637df68a05" title="Subscribe to Blog Updates" description="Stay informed with our latest posts and insights." />
      </section>

      <Recommender />
    </>
  );
}


===== FILE: pages/blog/[slug].js  (size=2568 bytes) =====
import Head from 'next/head';
import { useRouter } from 'next/router';
import { useEffect, useState } from 'react';
import { MDXRemote } from 'next-mdx-remote';
import { serialize } from 'next-mdx-remote/serialize';
import SubscriptionForm from '../../components/SubscriptionForm';
import Recommender from '../../components/Recommender';

export default function BlogPost() {
  const router = useRouter();
  const { slug } = router.query;
  const [post, setPost] = useState(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => { if (!slug) return; (async () => {
    try {
      const data = await fetch(`/api/posts/${slug}`).then(r => r.json());
      if (!data || data.error) throw new Error('Post not found');
      const mdxContent = await serialize(data.content || '');
      setPost({ ...data, mdxContent });
    } catch (e) {
      const fallback = {
        id: '1',
        title: 'Welcome to Manyagi',
        slug: 'welcome-to-manyagi',
        excerpt: 'An introduction to our multi-division platform.',
        created_at: '2025-09-01T00:00:00Z',
        featured_image: 'https://dlbbjeohndiwtofitwec.supabase.co/storage/v1/object/public/assets/images/og-home.webp',
        mdxContent: await serialize('# Welcome to Manyagi\n\nThis is our first blog post introducing our platform.'),
      };
      setPost(fallback);
    } finally { setLoading(false); }
  })(); }, [slug]);

  if (loading) return <div className="container mx-auto px-4 py-16 text-center">Loading post...</div>;
  if (!post) return <div className="container mx-auto px-4 py-16 text-center">Post not found</div>;

  return (
    <>
      <Head>
        <title>{post.title} — Manyagi Blog</title>
        <meta name="description" content={post.excerpt} />
      </Head>
      <section className="container mx-auto px-4 py-16">
        <h1 className="text-4xl font-bold mb-4">{post.title}</h1>
        <p className="text-gray-600 mb-4">{new Date(post.created_at).toLocaleDateString()}</p>
        <img src={post.featured_image} alt={post.title} className="w-full h-64 object-cover rounded mb-6" />
        <div className="prose max-w-none">
          <MDXRemote {...post.mdxContent} />
        </div>
      </section>

      <section id="subscribe" className="container mx-auto px-4 py-16">
        <SubscriptionForm formId="8427852" uid="637df68a05" title="Subscribe to Blog Updates" description="Stay informed with our latest posts and insights." />
      </section>

      <Recommender />
    </>
  );
}


===== FILE: pages/capital.js  (size=6122 bytes) =====
// pages/capital.js
import Head from 'next/head';
import Link from 'next/link';
import { useEffect, useState } from 'react';
import { useDispatch } from 'react-redux';
import { addToCart } from '../lib/cartSlice';
import SignalsSubscriptionForm from '../components/SignalsSubscriptionForm';
import Recommender from '../components/Recommender';
import Hero from '../components/Hero';
import Card from '../components/Card';

// Helpers
const asList = (v) => {
  if (Array.isArray(v)) return v;
  if (Array.isArray(v?.items)) return v.items;
  return [];
};
const pickImage = (p) =>
  p?.thumbnail_url || p?.display_image || p?.image_url || p?.image || '';

export default function Capital() {
  const [products, setProducts] = useState([]);
  const [total, setTotal] = useState(0);
  const [loading, setLoading] = useState(true);
  const dispatch = useDispatch();

  useEffect(() => {
    (async () => {
      try {
        const res = await fetch('/api/products?division=capital');
        const json = await res.json();
        const list = asList(json).map((p) => ({
          ...p,
          display_image: pickImage(p),
          productType: p.productType || 'download',
        }));
        if (list.length === 0) {
          const fallback = [
            {
              id: 'bot1',
              name: 'Trading Bot License',
              price: 99.99,
              display_image:
                'https://dlbbjeohndiwtofitwec.supabase.co/storage/v1/object/public/assets/images/bot-license.webp',
              division: 'capital',
              description: 'Lifetime access to premium trading bot, trusted by 100K+ users.',
              productType: 'download',
            },
          ];
          setProducts(fallback);
          setTotal(fallback.length);
        } else {
          setProducts(list);
          setTotal(Number(json?.total ?? list.length));
        }
      } catch (error) {
        console.error('Capital fetch error:', error);
        const fallback = [
          {
            id: 'bot1',
            name: 'Trading Bot License',
            price: 99.99,
            display_image:
              'https://dlbbjeohndiwtofitwec.supabase.co/storage/v1/object/public/assets/images/bot-license.webp',
            division: 'capital',
            description: 'Lifetime access to premium trading bot, trusted by 100K+ users.',
            productType: 'download',
          },
        ];
        setProducts(fallback);
        setTotal(fallback.length);
      } finally {
        setLoading(false);
      }
    })();
  }, []);

  const handleAddToCart = (product) => {
    const payload = { ...product, productType: 'download' };
    if (!payload.display_image) payload.display_image = pickImage(product);
    dispatch(addToCart(payload));
  };

  const carouselImages = [
    'https://dlbbjeohndiwtofitwec.supabase.co/storage/v1/object/public/assets/images/chart-hero.webp',
    'https://dlbbjeohndiwtofitwec.supabase.co/storage/v1/object/public/assets/images/performance-chart.webp',
  ];

  if (loading) {
    return (
      <div className="container mx-auto px-4 py-16 text-center">
        Loading capital products...
      </div>
    );
  }

  const list = asList(products);

  return (
    <>
      <Head>
        <title>Manyagi Capital — Trusted Trading Insights</title>
        <meta name="description" content="Access real-time signals and bots used by millions." />
      </Head>

      <Hero
        kicker="Capital"
        title="Maximize Your Trades"
        lead="Leverage signals trusted by 100M+ users for better decisions."
        carouselImages={carouselImages}
        height="h-[600px]"
      >
        <Link
          href="#subscribe" // point CTA to the restored subscribe section
          className="btn bg-blue-600 text-white py-2 px-4 rounded hover:bg-blue-700 transition"
        >
          Get Started
        </Link>
      </Hero>
      
      <section id="performance" className="container mx-auto px-4 py-16">
        <h2 className="text-3xl font-bold mb-6">Performance Charts</h2>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-5">
          <Card
            title="Weekly Performance"
            description="View our latest trading results."
            image="https://dlbbjeohndiwtofitwec.supabase.co/storage/v1/object/public/assets/images/performance-chart.webp"
            link="https://www.myfxbook.com/members/Blackkungfu/manyagi-meanpulse/11661957"
            category="capital"
          />
          <Card
            title="Bot Insights"
            description="Automated trading with proven results."
            image="https://dlbbjeohndiwtofitwec.supabase.co/storage/v1/object/public/assets/images/chart-hero.webp"
            category="capital"
          >
            <Link
              href="#products"
              className="btn bg-blue-600 text-white py-2 px-4 rounded hover:bg-blue-700 transition"
            >
              Explore Bots
            </Link>
          </Card>
        </div>
      </section>

      <section
        id="products"
        className="container mx-auto px-4 py-16 grid grid-cols-1 md:grid-cols-2 gap-5"
      >
        {list.length === 0 ? (
          <div className="col-span-full text-center text-lg">
            No capital products found.
          </div>
        ) : (
          list.map((product) => (
            <Card
              key={product.id}
              title={product.name}
              description={product.description}
              image={product.display_image || pickImage(product)}
              category="capital"
              buyButton={product}
              onBuy={() => handleAddToCart(product)}
            />
          ))
        )}
      </section>

      {/* RESTORED: subscribe block from production */}
      <section id="subscribe" className="container mx-auto px-4 py-16">
        <SignalsSubscriptionForm />
      </section>

      <Recommender />
    </>
  );
}


===== FILE: pages/cart.js  (size=401 bytes) =====
import Head from 'next/head';
import Cart from '../components/Cart';

export default function CartPage() {
  return (
    <>
      <Head>
        <title>Manyagi — Cart</title>
        <meta name="description" content="Review and checkout your Manyagi Designs." />
      </Head>
      <section className="container mx-auto px-4 py-10">
        <Cart />
      </section>
    </>
  );
};


===== FILE: pages/coming-soon.js  (size=1293 bytes) =====
// pages/coming-soon.js
import Head from 'next/head';
import Hero from '../components/Hero';
import SubscriptionForm from '../components/SubscriptionForm';
import Recommender from '../components/Recommender';

export default function ComingSoon() {
  const carouselImages = [
    '/images/og-comingsoon.webp',
    '/images/home-carousel-1.webp',
    '/images/home-carousel-2.webp',
  ];

  return (
    <>
      <Head>
        <title>Coming Soon — Manyagi</title>
        <meta name="description" content="This page is under construction. Sign up for updates." />
      </Head>
      <Hero
        kicker="Coming Soon"
        title="Page Under Construction"
        lead="We're building this page — join the Manyagi newsletter for updates and early access."
        carouselImages={carouselImages}
        height="h-[600px]"
      >
        <a href="https://manyagi.net" className="btn bg-blue-600 text-white py-4 px-6 rounded hover:scale-105 transition">
          Back to Home
        </a>
      </Hero>
      <section className="container mx-auto px-4 py-16">
        <SubscriptionForm formId="8427635" uid="db12290300" title="Get Notified" description="Be the first to know when it's live." />
      </section>
      <Recommender />
    </>
  );
};


===== FILE: pages/contact.js  (size=2612 bytes) =====
import Head from 'next/head';
import { useForm, ValidationError } from '@formspree/react';
import SubscriptionForm from '../components/SubscriptionForm';
import Recommender from '../components/Recommender';
import Hero from '../components/Hero';

export default function Contact() {
  const [state, handleSubmit] = useForm('xwkdwgdp');

  const carouselImages = [
    'https://dlbbjeohndiwtofitwec.supabase.co/storage/v1/object/public/assets/images/og-contact.webp',
  ];

  return (
    <>
      <Head>
        <title>Contact Manyagi — Get in Touch</title>
        <meta name="description" content="Reach out to Manyagi for inquiries and support." />
      </Head>
      <Hero
        kicker="Contact"
        title="Get in Touch"
        lead="Have questions? We're here to help."
        carouselImages={carouselImages}
        height="h-[600px]"
      />

      <section className="container mx-auto px-4 py-16">
        <h2 className="text-3xl font-bold mb-6 text-center">Contact Form</h2>
        <form onSubmit={handleSubmit} className="max-w-lg mx-auto space-y-4">
          <div>
            <label htmlFor="email" className="block text-sm font-medium">Email Address</label>
            <input
              id="email"
              type="email"
              name="email"
              className="w-full p-2 border rounded"
              required
            />
            <ValidationError prefix="Email" field="email" errors={state.errors} />
          </div>
          <div>
            <label htmlFor="message" className="block text-sm font-medium">Message</label>
            <textarea
              id="message"
              name="message"
              className="w-full p-2 border rounded"
              rows="5"
              required
            />
            <ValidationError prefix="Message" field="message" errors={state.errors} />
          </div>
          <button
            type="submit"
            disabled={state.submitting}
            className="bg-blue-600 text-white py-2 px-4 rounded hover:bg-blue-700"
          >
            Submit
          </button>
          {state.succeeded && <p className="text-green-600">Thanks for your message!</p>}
        </form>
      </section>

      <section id="subscribe" className="container mx-auto px-4 py-16">
        <SubscriptionForm
          formId="8427853"
          uid="637df68a06"
          title="Stay Connected"
          description="Join our community for updates and insights."
        />
      </section>

      <Recommender />
    </>
  );
}


===== FILE: pages/dashboard.js  (size=6120 bytes) =====
import Head from 'next/head';
import { useEffect, useState } from 'react';
import { useRouter } from 'next/router';
import { supabase } from '@/lib/supabase';

export default function Dashboard() {
  const router = useRouter();
  const [user, setUser] = useState(null);
  const [error, setError] = useState(null);
  const [orders, setOrders] = useState([]);
  const [subscriptions, setSubscriptions] = useState([]);
  const [affiliate, setAffiliate] = useState(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    (async () => {
      try {
        // Fetch authenticated user
        const { data: { user }, error: authError } = await supabase.auth.getUser();
        console.log('User fetch result:', { user, authError });
        if (authError || !user) {
          console.log('No user or auth error, redirecting to /login');
          router.push('/login');
          return;
        }
        setUser(user);

        // Fetch user role
        const { data: userRow, error: roleError } = await supabase
          .from('users')
          .select('role')
          .eq('id', user.id)
          .maybeSingle();
        console.log('User ID:', user.id);
        console.log('Fetched role:', userRow?.role);
        console.log('Role error:', roleError);
        if (roleError) {
          console.error('Role fetch failed:', roleError);
          setError('Failed to load user role. Please try again.');
          setLoading(false);
          return;
        }
        if (!userRow) {
          console.error('No user row found for ID:', user.id);
          setError('User data not found. Contact support.');
          setLoading(false);
          return;
        }
        if (userRow.role === 'admin') {
          console.log('Admin role detected, redirecting to /admin');
          router.push('/admin');
          return;
        }

        // Fetch orders, subscriptions, affiliates
        const [o, s, a] = await Promise.all([
          supabase.from('orders').select('*').eq('user_id', user.id).order('created_at', { ascending: false }),
          supabase.from('subscriptions').select('*').eq('user_id', user.id).order('created_at', { ascending: false }),
          supabase.from('affiliates').select('*').eq('user_id', user.id).maybeSingle(),
        ]);
        console.log('Fetched data:', { orders: o.data, subscriptions: s.data, affiliate: a.data, ordersError: o.error, subscriptionsError: s.error, affiliatesError: a.error });

        if (o.error || s.error || a.error) {
          console.error('Data fetch errors:', { ordersError: o.error, subscriptionsError: s.error, affiliatesError: a.error });
          setError('Failed to load some dashboard data. Please try again.');
        }

        setOrders(o.data || []);
        setSubscriptions(s.data || []);
        setAffiliate(a.data);
        setLoading(false);
      } catch (err) {
        console.error('Unexpected error:', err);
        setError('An unexpected error occurred. Please try again.');
        setLoading(false);
      }
    })();
  }, [router]);

  if (error) return <p className="p-6 text-red-500">{error}</p>;
  if (loading) return <p className="p-6">Loading dashboard...</p>;

  return (
    <>
      <Head>
        <title>Manyagi User Dashboard</title>
      </Head>
      <div className="container mx-auto px-4 py-8 space-y-8">
        <h1 className="text-2xl font-bold">User Dashboard</h1>
        <section>
          <h2 className="text-xl font-bold mb-2">Your Orders</h2>
          {orders.length === 0 ? (
            <p>No orders yet.</p>
          ) : (
            <table className="w-full border-collapse">
              <thead>
                <tr>
                  <th className="border p-2">Order ID</th>
                  <th className="border p-2">Date</th>
                  <th className="border p-2">Total</th>
                  <th className="border p-2">Status</th>
                </tr>
              </thead>
              <tbody>
                {orders.map((order) => (
                  <tr key={order.id}>
                    <td className="border p-2">{order.id}</td>
                    <td className="border p-2">{new Date(order.created_at).toLocaleDateString()}</td>
                    <td className="border p-2">${order.total_amount}</td>
                    <td className="border p-2">{order.status}</td>
                  </tr>
                ))}
              </tbody>
            </table>
          )}
        </section>
        <section>
          <h2 className="text-xl font-bold mb-2">Your Subscriptions</h2>
          {subscriptions.length === 0 ? (
            <p>No subscriptions yet.</p>
          ) : (
            <table className="w-full border-collapse">
              <thead>
                <tr>
                  <th className="border p-2">Subscription ID</th>
                  <th className="border p-2">Start Date</th>
                  <th className="border p-2">Status</th>
                </tr>
              </thead>
              <tbody>
                {subscriptions.map((sub) => (
                  <tr key={sub.id}>
                    <td className="border p-2">{sub.id}</td>
                    <td className="border p-2">{new Date(sub.created_at).toLocaleDateString()}</td>
                    <td className="border p-2">{sub.status}</td>
                  </tr>
                ))}
              </tbody>
            </table>
          )}
        </section>
        <section>
          <h2 className="text-xl font-bold mb-2">Your Affiliate Info</h2>
          {affiliate ? (
            <p>Referral Code: {affiliate.referral_code}</p>
          ) : (
            <p>No affiliate account. Contact support to join.</p>
          )}
        </section>
        <button
          onClick={() => supabase.auth.signOut().then(() => router.push('/'))}
          className="p-2 bg-red-500 text-white rounded"
        >
          Logout
        </button>
      </div>
    </>
  );
}


===== FILE: pages/designs.js  (size=13567 bytes) =====
// pages/designs.js
import Head from 'next/head';
import Link from 'next/link';
import { useEffect, useState, useMemo } from 'react';
import { useRouter } from 'next/router';
import { useDispatch } from 'react-redux';
import { addToCart } from '../lib/cartSlice';
import SubscriptionForm from '../components/SubscriptionForm';
import Recommender from '../components/Recommender';
import Hero from '../components/Hero';
import Card from '../components/Card';

const PAGE_SIZE = 16;

// Prefer higher-quality image fields when available
function pickImage(p) {
  return (
    (p?.thumbnail_url && typeof p.thumbnail_url === 'string' && p.thumbnail_url) ||
    (p?.display_image && typeof p.display_image === 'string' && p.display_image) ||
    (p?.image_url && typeof p.image_url === 'string' && p.image_url) ||
    (p?.image && typeof p.image === 'string' && p.image) ||
    '/placeholder.png' // CSP-safe local fallback
  );
}

export default function Designs() {
  const router = useRouter();
  const dispatch = useDispatch();

  const [items, setItems] = useState([]);
  const [total, setTotal] = useState(0);
  const [loading, setLoading] = useState(true);
  const [fetchingMore, setFetchingMore] = useState(false);
  const [showModal, setShowModal] = useState(false);

  const initial = useMemo(
    () => ({
      q: (router.query.q || '').toString(),
      collection: (router.query.collection || '').toString(),
      tag: (router.query.tag || '').toString(),
      sort: (router.query.sort || 'new').toString(),
    }),
    [router.query]
  );

  const [q, setQ] = useState(initial.q);
  const [collection, setCollection] = useState(initial.collection);
  const [tag, setTag] = useState(initial.tag);
  const [sort, setSort] = useState(initial.sort);

  const canLoadMore = items.length < total;

  const carouselImages = [
    'https://dlbbjeohndiwtofitwec.supabase.co/storage/v1/object/public/assets/images/merch-carousel-1.webp',
    'https://dlbbjeohndiwtofitwec.supabase.co/storage/v1/object/public/assets/images/merch-carousel-2.webp',
    'https://dlbbjeohndiwtofitwec.supabase.co/storage/v1/object/public/assets/images/merch-carousel-3.webp',
    'https://dlbbjeohndiwtofitwec.supabase.co/storage/v1/object/public/assets/images/merch-carousel-4.webp',
    'https://dlbbjeohndiwtofitwec.supabase.co/storage/v1/object/public/assets/images/merch-carousel-5.webp',
  ];

  const fetchProducts = async ({ offset = 0, append = false } = {}) => {
    const params = new URLSearchParams({
      division: 'designs',
      limit: String(PAGE_SIZE),
      offset: String(offset),
      sort: sort || 'new',
    });
    if (q) params.set('q', q);
    if (collection) params.set('collection', collection);
    if (tag) params.set('tag', tag);

    try {
      if (offset === 0) setLoading(true);
      else setFetchingMore(true);

      const res = await fetch(`/api/products?${params.toString()}`);
      const data = await res.json();

      const nextItemsRaw = Array.isArray(data?.items)
        ? data.items
        : Array.isArray(data)
        ? data
        : [];

      // Normalize the image field so cards never break
      const nextItems = nextItemsRaw.map((p) => ({
        ...p,
        display_image: pickImage(p),
      }));

      setItems((prev) => (append ? [...prev, ...nextItems] : nextItems));
      setTotal(Number(data?.total ?? nextItems.length));
    } catch (e) {
      console.error('Designs fetch error:', e);
      if (offset === 0) {
        const sample = [
          {
            id: 'fallback-tee',
            name: 'Sample T-Shirt',
            price: 29.99,
            display_image:
              'https://dlbbjeohndiwtofitwec.supabase.co/storage/v1/object/public/assets/images/mock-tee-1.webp',
            division: 'designs',
            description: 'Fallback design merchandise. Made with 100% cotton for comfort.',
            printful_product_id: 'fallback-tee-id',
            productType: 'merch',
            metadata: { book: 'Sample', prompt: 1 },
          },
        ];
        setItems(sample);
        setTotal(sample.length);
      }
    } finally {
      setLoading(false);
      setFetchingMore(false);
    }
  };

  useEffect(() => {
    setQ(initial.q);
    setCollection(initial.collection);
    setTag(initial.tag);
    setSort(initial.sort || 'new');
    fetchProducts({ offset: 0, append: false });
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [initial.q, initial.collection, initial.tag, initial.sort]);

  const applyFilters = (e) => {
    e?.preventDefault?.();
    const params = new URLSearchParams();
    params.set('division', 'designs');
    if (q) params.set('q', q);
    if (collection) params.set('collection', collection);
    if (tag) params.set('tag', tag);
    if (sort) params.set('sort', sort);
    router.push(`/designs?${params.toString()}`, undefined, { shallow: true });
  };

  const clearFilters = () => {
    setQ('');
    setCollection('');
    setTag('');
    setSort('new');
    router.push('/designs?division=designs', undefined, { shallow: true });
  };

  const loadMore = () => {
    if (!canLoadMore || fetchingMore) return;
    fetchProducts({ offset: items.length, append: true });
  };

  const collectionOptions = useMemo(() => {
    const set = new Set();
    items.forEach((p) => {
      if (p?.metadata?.book) set.add(p.metadata.book);
      if (p?.metadata?.series) set.add(p.metadata.series);
      if (p?.metadata?.drop) set.add(p.metadata.drop);
      if (p?.metadata?.year) set.add(String(p.metadata.year));
      if (p?.metadata?.prompt) set.add(`prompt-${p.metadata.prompt}`);
    });
    return Array.from(set);
  }, [items]);

  const tagOptions = useMemo(() => {
    const set = new Set();
    items.forEach((p) => (p?.tags || []).forEach((t) => set.add(t)));
    return Array.from(set);
  }, [items]);

  const handleAddToCart = (product) => {
    dispatch(
      addToCart({
        ...product,
        productType: 'merch',
        printful_product_id: product.printful_product_id,
        metadata: product.metadata || {},
      })
    );
    setShowModal(true);
    setTimeout(() => setShowModal(false), 1600);
  };

  if (loading) {
    return (
      <div className="container mx-auto px-4 py-16 text-center">
        Loading designs…
      </div>
    );
  }

  return (
    <>
      <Head>
        <title>Manyagi Designs — Premium Apparel & Gear</title>
        <meta name="description" content="High-quality T-shirts, mugs, and prints inspired by our stories. Shop now for exclusive designs." />
      </Head>

      <Hero
        kicker="Designs"
        title="Elevate Your Style"
        lead="Discover apparel and gear crafted with premium materials, inspired by epic tales."
        carouselImages={carouselImages}
        height="h-[600px]"
      >
        <Link
          href="#products"
          className="btn bg-blue-600 text-white py-3 px-5 rounded hover:scale-105 transition"
        >
          Browse Collection
        </Link>
      </Hero>

      {/* Trust Badges */}
      <section className="container mx-auto px-4 py-8 flex justify-center gap-6">
        <div className="flex items-center gap-2">
          <svg className="w-6 h-6" fill="currentColor" viewBox="0 0 20 20"><path d="M2.003 5.884L10 9.882l7.997-3.998A2 2 0 0016 4H4a2 2 0 00-1.997 1.884z"/><path d="M18 8.118l-8 4-8-4V14a2 2 0 002 2h12a2 2 0 002-2V8.118z"/></svg>
          Secure Payment
        </div>
        <div className="flex items-center gap-2">
          <svg className="w-6 h-6" fill="currentColor" viewBox="0 0 20 20"><path d="M8 2a1 1 0 000 2h2a1 1 0 100-2H8z"/><path d="M3 5a2 2 0 012-2 3 3 0 003 3h2a3 3 0 003-3 2 2 0 012 2v6h-4.586l1.293-1.293a1 1 0 00-1.414-1.414l-3 3a1 1 0 000 1.414l3 3a1 1 0 001.414-1.414L10.414 13H15v3a2 2 0 01-2 2H5a2 2 0 01-2-2V5zM15 11h2a1 1 0 110 2h-2v-2z"/></svg>
          Free Shipping
        </div>
        <div className="flex items-center gap-2">
          <svg className="w-6 h-6" fill="currentColor" viewBox="0 0 20 20"><path d="M2.003 5.884L10 9.882l7.997-3.998A2 2 0 0016 4H4a2 2 0 00-1.997 1.884z"/><path d="M18 8.118l-8 4-8-4V14a2 2 0 002 2h12a2 2 0 002-2V8.118z"/></svg>
          30-Day Returns
        </div>
      </section>

      {/* Filter Bar */}
      <section className="container mx-auto px-4 mt-8">
        <form
          onSubmit={applyFilters}
          className="flex flex-col md:flex-row gap-3 items-stretch md:items-end"
        >
          <div className="flex-1">
            <label className="block text-sm font-medium mb-1">Search</label>
            <input
              value={q}
              onChange={(e) => setQ(e.target.value)}
              placeholder="Search title, scene, book…"
              className="w-full border rounded px-3 py-2 dark:bg-gray-900"
            />
          </div>
          <div>
            <label className="block text-sm font-medium mb-1">Collection</label>
            <select
              value={collection}
              onChange={(e) => setCollection(e.target.value)}
              className="border rounded px-3 py-2 w-48 dark:bg-gray-900"
            >
              <option value="">All</option>
              {collectionOptions.map((opt) => (
                <option key={opt} value={opt}>
                  {opt}
                </option>
              ))}
            </select>
          </div>
          <div>
            <label className="block text-sm font-medium mb-1">Tag</label>
            <select
              value={tag}
              onChange={(e) => setTag(e.target.value)}
              className="border rounded px-3 py-2 w-48 dark:bg-gray-900"
            >
              <option value="">All</option>
              {tagOptions.map((t) => (
                <option key={t} value={t}>
                  {t}
                </option>
              ))}
            </select>
          </div>
          <div>
            <label className="block text-sm font-medium mb-1">Sort</label>
            <select
              value={sort}
              onChange={(e) => setSort(e.target.value)}
              className="border rounded px-3 py-2 w-40 dark:bg-gray-900"
            >
              <option value="new">Newest</option>
              <option value="price_asc">Price ↑</option>
              <option value="price_desc">Price ↓</option>
            </select>
          </div>
          <div className="flex gap-2">
            <button className="px-4 py-2 bg-blue-600 text-white rounded">
              Apply
            </button>
            <button
              type="button"
              onClick={clearFilters}
              className="px-4 py-2 bg-gray-200 rounded dark:bg-gray-800"
            >
              Clear
            </button>
          </div>
        </form>
      </section>

      {/* Products Grid */}
      <section id="products" className="container mx-auto px-4 py-10">
        {items.length === 0 ? (
          <div className="text-center py-20">
            <p className="text-lg">No products found for your filters.</p>
            <button
              onClick={clearFilters}
              className="mt-4 px-4 py-2 bg-blue-600 text-white rounded"
            >
              Reset Filters
            </button>
          </div>
        ) : (
          <>
            <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 xl:grid-cols-4 gap-5">
              {items.map((product) => (
                <Card
                  key={product.id}
                  title={product.name}
                  description={`${product.description} Made with premium cotton for lasting comfort.`}
                  image={product.display_image}
                  category="designs"
                  buyButton={product}
                  onBuy={() => handleAddToCart(product)}
                />
              ))}
            </div>

            {canLoadMore && (
              <div className="text-center mt-10">
                <button
                  disabled={fetchingMore}
                  onClick={loadMore}
                  className="px-5 py-2 rounded bg-gray-200 hover:bg-gray-300 dark:bg-gray-800 dark:hover:bg-gray-700"
                >
                  {fetchingMore ? 'Loading…' : 'Load more'}
                </button>
              </div>
            )}
          </>
        )}
      </section>

      {/* RESTORED: subscribe block from production */}
      <section id="subscribe" className="container mx-auto px-4 pb-16">
        <SubscriptionForm
          formId="8432506"
          uid="a194031db7"
          title="Stay Updated on New Designs"
          description="Get notified about new drops and exclusive offers."
        />
      </section>

      {showModal && (
        <div className="fixed inset-0 flex items-center justify-center bg-black/50 z-50">
          <div className="bg-white p-6 rounded shadow-lg text-center dark:bg-gray-900">
            <p className="text-base">Added to cart!</p>
            <Link
              href="/cart"
              className="text-blue-600 hover:underline mt-4 inline-block"
            >
              View Cart
            </Link>
          </div>
        </div>
      )}

      <Recommender />
    </>
  );
}


===== FILE: pages/index.js  (size=9862 bytes) =====
import Head from 'next/head';
import Link from 'next/link';
import { useDispatch } from 'react-redux';
import { addToCart } from '../lib/cartSlice';
import Hero from '../components/Hero';
import SubscriptionForm from '../components/SubscriptionForm';
import Recommender from '../components/Recommender';
import Card from '../components/Card';
import { useEffect, useState } from 'react';

function getCfgImg(val, fallback) {
  // site_config values might be a plain string URL or { file_url }
  if (!val) return fallback;
  if (typeof val === 'string') return val;
  if (typeof val === 'object' && val.file_url) return val.file_url;
  return fallback;
}

export default function Home() {
  const dispatch = useDispatch();
  const [siteConfig, setSiteConfig] = useState({});
  const [products, setProducts] = useState([]);

  useEffect(() => {
    (async () => {
      try {
        // 1) site config
        const cfg = await fetch('/api/site-config')
          .then((r) => r.json())
          .catch(() => ({}));
        setSiteConfig(cfg || {});

        // 2) products (accept both array and { items, total })
        const res = await fetch('/api/products?limit=12');
        const json = await res.json().catch(() => []);
        const items = Array.isArray(json) ? json : Array.isArray(json.items) ? json.items : [];

        // normalize image field so Card gets a valid image
        const normalized = items.map((p) => ({
          ...p,
          image_url: p.image_url || p.thumbnail_url || p.image || p.imageUrl || p.display_image || '',
        }));

        setProducts(normalized);
      } catch (e) {
        console.error('Home fetch error:', e);
        setProducts([]); // stay safe
      }
    })();
  }, []);

  const carouselImages = siteConfig.carousel_images || [
    '/images/home-carousel-1.webp',
    '/images/home-carousel-2.webp',
    '/images/home-carousel-3.webp',
  ];
  const heroImage = getCfgImg(siteConfig.hero, '/videos/hero-bg.mp4');

  // Division card images with safe fallbacks
  const publishingImg = getCfgImg(siteConfig.publishing_hero, '/images/legacy-chapter-1.webp');
  const designsImg = getCfgImg(siteConfig.designs_hero, '/images/mock-tee-1.webp');
  const capitalImg = getCfgImg(siteConfig.capital_hero, '/images/chart-hero.webp');
  const techImg = getCfgImg(siteConfig.tech_hero, '/images/daito-screenshot.webp');
  const mediaImg = getCfgImg(siteConfig.media_hero, '/images/og-media.webp');

  // IMPORTANT: use Supabase URL as fallback so it won't 404 locally
  const realtyImg = getCfgImg(
    siteConfig.realty_hero,
    'https://dlbbjeohndiwtofitwec.supabase.co/storage/v1/object/public/assets/images/realty-hero.webp'
  );

  return (
    <>
      <Head>
        <title>Manyagi — Creativity Meets Innovation</title>
        <meta
          name="description"
          content="Manyagi unifies Publishing, Designs, Capital, Tech, and Media."
        />
        {getCfgImg(siteConfig.favicon, null) && (
          <link rel="icon" href={getCfgImg(siteConfig.favicon)} />
        )}
      </Head>

      <Hero
        kicker="Welcome"
        title="Explore Our Worlds"
        lead="One HQ powering books, fashion, trading, audio, and apps."
        carouselImages={carouselImages}
        videoSrc={heroImage}
        height="h-[600px]"
      >
        <Link
          href="#divisions"
          className="btn bg-blue-600 text-white py-2 px-4 rounded hover:scale-105 transition"
        >
          Explore
        </Link>
      </Hero>

      <section
        id="divisions"
        className="container mx-auto px-4 py-16 grid grid-cols-1 md:grid-cols-3 gap-5"
      >
        <Card
          title="Publishing"
          description="Two novels + poetry. Read the opening chapter."
          image={publishingImg}
          link="/publishing"
          category="publishing"
        />
        <Card
          title="Designs"
          description="Wear our stories with T-shirts, mugs."
          image={designsImg}
          link="/designs"
          category="designs"
        />
        <Card
          title="Capital"
          description="Trading signals and bot charts for success."
          image={capitalImg}
          link="/capital"
          category="capital"
        />
        <Card
          title="Tech"
          description="Apps for commerce and community."
          image={techImg}
          link="/tech"
          category="tech"
        />
        <Card
          title="Media"
          description="Stories in motion with videos and audio."
          image={mediaImg}
          link="/media"
          category="media"
        />
        <Card
          title="Realty"
          description="Premium properties and rentals."
          image={realtyImg}
          link="/realty"
          category="realty"
        />
      </section>

      <section id="featured" className="container mx-auto px-4 py-16">
        <h2 className="text-3xl font-bold mb-6">Featured Products</h2>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-5">
          {(Array.isArray(products) ? products : []).slice(0, 3).map((product) => {
            if (product.division === 'publishing') {
              const m = product.metadata || {};
              const buyUrl =
                m.amazon_url ||
                m.kindle_url ||
                m.paperback_url ||
                m.store_url ||
                null;

              const alsoLinks = [
                m.kindle_url ? { label: "Kindle", url: m.kindle_url } : null,
                m.paperback_url ? { label: "Paperback", url: m.paperback_url } : null,
              ].filter(Boolean);

              const chips = [
                m.format ? String(m.format).toUpperCase() : null,
                m.year ? `Y${m.year}` : null,
              ].filter(Boolean);

              return (
                <Card
                  key={product.id}
                  title={product.name}
                  description={product.description}
                  image={product.image_url}
                  category={product.division}
                  tags={Array.isArray(product.tags) ? product.tags : []}
                >
                  {/* Meta chips */}
                  {chips.length > 0 && (
                    <div className="flex flex-wrap gap-2 justify-center mb-2">
                      {chips.map((c) => (
                        <span key={c} className="text-xs px-2 py-1 rounded-full bg-gray-100 text-gray-700 dark:bg-gray-800 dark:text-gray-200">
                          {c}
                        </span>
                      ))}
                    </div>
                  )}

                  {/* Primary CTAs */}
                  <div className="flex flex-wrap gap-3 mt-2 justify-center">
                    {buyUrl && (
                      <a
                        href={buyUrl}
                        target="_blank"
                        rel="noopener noreferrer"
                        className="btn bg-blue-600 text-white py-2 px-4 rounded hover:bg-blue-700 transition"
                      >
                        Get Your Copy
                      </a>
                    )}
                    {m.pdf_url && (
                      <a
                        href={m.pdf_url}
                        target="_blank"
                        rel="noopener noreferrer"
                        className="btn bg-gray-700 text-white py-2 px-4 rounded hover:bg-gray-800 transition"
                      >
                        Preview Chapter 1
                      </a>
                    )}
                  </div>

                  {/* Secondary storefront links */}
                  {alsoLinks.length > 0 && (
                    <div className="text-xs text-gray-600 mt-3">
                      Also available:{' '}
                      {alsoLinks.map((l, i) => (
                        <a
                          key={l.label}
                          href={l.url}
                          target="_blank"
                          rel="noopener noreferrer"
                          className="underline hover:text-blue-700"
                        >
                          {l.label}{i < alsoLinks.length - 1 ? ', ' : ''}
                        </a>
                      ))}
                    </div>
                  )}
                </Card>
              );
            }

            // Non-publishing products keep buyButton
            return (
              <Card
                key={product.id}
                title={product.name}
                description={product.description}
                image={product.image_url}
                category={product.division}
                buyButton={product}
                onBuy={() =>
                  dispatch(
                    addToCart({
                      ...product,
                      productType:
                        product.division === 'designs'
                          ? 'merch'
                          : product.division === 'capital'
                          ? 'download'
                          : 'book',
                    })
                  )
                }
              />
            );
          })}
        </div>
      </section>

      <section id="subscribe" className="container mx-auto px-4 py-16">
        <SubscriptionForm
          formId="8427635"
          uid="db12290300"
          title="Get Chapter 1 + Drops + Early Access"
          description="Be the first to know about updates."
        />
      </section>

      <Recommender />
    </>
  );
}


===== FILE: pages/links.js  (size=3725 bytes) =====
import Head from 'next/head';
import Link from 'next/link';
import { FaInstagram, FaTiktok, FaYoutube, FaTwitter, FaLinkedin, FaPinterest } from 'react-icons/fa';
import SubscriptionForm from '../components/SubscriptionForm';
import Recommender from '../components/Recommender';
import Hero from '../components/Hero';

export default function Links() {
  const socialLinks = [
    { platform: 'Instagram', handle: 'https://instagram.com/manyagi.official', icon: <FaInstagram size={24} /> },
    { platform: 'Twitter', handle: 'https://x.com/ManyagiOfficial', icon: <FaTwitter size={24} /> },
    { platform: 'YouTube', handle: 'https://youtube.com/@ManyagiOfficial', icon: <FaYoutube size={24} /> },
    { platform: 'LinkedIn', handle: 'https://linkedin.com/company/manyagi', icon: <FaLinkedin size={24} /> },
    { platform: 'Pinterest', handle: 'https://pinterest.com/ManyagiOfficial', icon: <FaPinterest size={24} /> },
    { platform: 'TikTok', handle: 'https://tiktok.com/@manyagi.official', icon: <FaTiktok size={24} /> },
  ];

  const divisionLinks = [
    { name: 'Publishing', url: '/publishing', description: 'Novels and poetry' },
    { name: 'Designs', url: '/designs', description: 'T-shirts, mugs, and prints' },
    { name: 'Capital', url: '/capital', description: 'Trading signals and bots' },
    { name: 'Tech', url: '/tech', description: 'Innovative apps' },
    { name: 'Media', url: '/media', description: 'Videos and audio' },
    { name: 'Realty', url: '/realty', description: 'Premium properties' },
  ];

  const carouselImages = [
    'https://dlbbjeohndiwtofitwec.supabase.co/storage/v1/object/public/assets/images/og-home.webp',
  ];

  return (
    <>
      <Head>
        <title>Manyagi Links — Connect with Us</title>
        <meta name="description" content="Find all our social media and division links." />
      </Head>
      <Hero
        kicker="Links"
        title="Connect with Manyagi"
        lead="Explore our social media and divisions."
        carouselImages={carouselImages}
        height="h-[600px]"
      />

      <section className="container mx-auto px-4 py-16">
        <h2 className="text-3xl font-bold mb-6 text-center">Social Media</h2>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4 max-w-2xl mx-auto">
          {socialLinks.map((link) => (
            <a
              key={link.platform}
              href={link.handle}
              target="_blank"
              rel="noopener noreferrer"
              className="flex items-center gap-2 p-4 border rounded hover:bg-gray-100"
            >
              {link.icon}
              <span>{link.platform}</span>
            </a>
          ))}
        </div>
      </section>

      <section className="container mx-auto px-4 py-16">
        <h2 className="text-3xl font-bold mb-6 text-center">Our Divisions</h2>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4 max-w-4xl mx-auto">
          {divisionLinks.map((link) => (
            <Link
              key={link.name}
              href={link.url}
              className="p-4 border rounded hover:bg-gray-100"
            >
              <h3 className="text-xl font-bold">{link.name}</h3>
              <p className="text-gray-600">{link.description}</p>
            </Link>
          ))}
        </div>
      </section>

      <section id="subscribe" className="container mx-auto px-4 py-16">
        <SubscriptionForm
          formId="8427853"
          uid="637df68a06"
          title="Stay Connected"
          description="Join our community for updates and insights."
        />
      </section>

      <Recommender />
    </>
  );
}


===== FILE: pages/login.js  (size=3735 bytes) =====
import Head from 'next/head';
import { useState } from 'react';
import { useRouter } from 'next/router';
import { supabase } from '@/lib/supabase';
import Hero from '../components/Hero';  // Add Hero for background

export default function Login() {
  const router = useRouter();
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [isSignup, setIsSignup] = useState(false);
  const [error, setError] = useState(null);
  const [loading, setLoading] = useState(false);

  const handleAuth = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError(null);
    try {
      let data, authError;
      if (isSignup) {
        ({ data, error: authError } = await supabase.auth.signUp({ email, password }));
        if (authError) throw authError;
        await supabase.from('users').insert({
          id: data.user.id,
          email,
          role: 'user',
          created_at: new Date().toISOString(),
          updated_at: new Date().toISOString()
        });
      } else {
        ({ data, error: authError } = await supabase.auth.signInWithPassword({ email, password }));
        if (authError) throw authError;
      }
      router.push('/dashboard');
    } catch (err) {
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  const handleGoogleLogin = async () => {
    try {
      const { error } = await supabase.auth.signInWithOAuth({ provider: 'google' });
      if (error) throw error;
    } catch (err) {
      setError(err.message);
    }
  };

  return (
    <>
      <Head>
        <title>{isSignup ? 'Sign Up' : 'Login'} - Manyagi</title>
      </Head>
      <Hero
        kicker={isSignup ? "Join Us" : "Welcome Back"}
        title={isSignup ? "Sign Up" : "Login"}
        lead={isSignup ? "Create your Manyagi account." : "Access your dashboard."}
        carouselImages={[]}  // Optional, or add images
        height="h-screen"  // Full screen for login
      >
        <div className="card max-w-md mx-auto bg-white text-black glass p-8 rounded-lg shadow-xl">
          {error && <p className="text-red-500 mb-4 text-center">{error}</p>}
          <form onSubmit={handleAuth} className="space-y-4">
            <input
              type="email"
              placeholder="Email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              className="w-full p-3 border rounded bg-white text-black"
              required
            />
            <input
              type="password"
              placeholder="Password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              className="w-full p-3 border rounded bg-white text-black"
              required
            />
            <button
              type="submit"
              disabled={loading}
              className="w-full p-3 bg-black text-white rounded disabled:opacity-50 hover:bg-gray-800 transition"
            >
              {loading ? 'Processing...' : isSignup ? 'Sign Up' : 'Login'}
            </button>
          </form>
          <button
            onClick={handleGoogleLogin}
            className="mt-4 w-full p-3 bg-blue-500 text-white rounded hover:bg-blue-600 transition"
          >
            {isSignup ? 'Sign Up' : 'Login'} with Google
          </button>
          <button
            onClick={() => setIsSignup(!isSignup)}
            className="mt-4 text-blue-500 underline w-full text-center"
          >
            {isSignup ? 'Switch to Login' : 'Switch to Sign Up'}
          </button>
        </div>
      </Hero>
    </>
  );
}


===== FILE: pages/media.js  (size=5336 bytes) =====
import Head from 'next/head';
import Link from 'next/link';
import { useEffect, useState } from 'react';
import { useDispatch } from 'react-redux';
import { addToCart } from '../lib/cartSlice';
import SubscriptionForm from '../components/SubscriptionForm';
import Recommender from '../components/Recommender';
import Hero from '../components/Hero';
import Card from '../components/Card';

// Helpers to keep things bulletproof
const asList = (v) => {
  if (Array.isArray(v)) return v;
  if (Array.isArray(v?.items)) return v.items;
  return [];
};

const pickImage = (p) =>
  p?.thumbnail_url ||
  p?.display_image ||
  p?.image_url ||
  p?.image ||
  '';

export default function Media() {
  const [products, setProducts] = useState([]);
  const [total, setTotal] = useState(0);
  const [loading, setLoading] = useState(true);
  const dispatch = useDispatch();

  useEffect(() => {
    (async () => {
      try {
        const res = await fetch('/api/products?division=media');
        const json = await res.json();

        const list = asList(json).map((p) => ({
          ...p,
          display_image: pickImage(p),
          // enforce a consistent productType for media
          productType: p.productType || 'download',
        }));

        if (list.length === 0) {
          // Safe fallback so UI still renders
          const fallback = [
            {
              id: 'audio1',
              name: 'Audio Story Collection',
              price: 14.99,
              display_image:
                'https://dlbbjeohndiwtofitwec.supabase.co/storage/v1/object/public/assets/images/video-carousel-1.webp',
              division: 'media',
              description: 'Immersive audio stories',
              productType: 'download',
            },
          ];
          setProducts(fallback);
          setTotal(fallback.length);
        } else {
          setProducts(list);
          setTotal(Number(json?.total ?? list.length));
        }
      } catch (error) {
        console.error('Media fetch error:', error);
        const fallback = [
          {
            id: 'audio1',
            name: 'Audio Story Collection',
            price: 14.99,
            display_image:
              'https://dlbbjeohndiwtofitwec.supabase.co/storage/v1/object/public/assets/images/video-carousel-1.webp',
            division: 'media',
            description: 'Immersive audio stories',
            productType: 'download',
          },
        ];
        setProducts(fallback);
        setTotal(fallback.length);
      } finally {
        setLoading(false);
      }
    })();
  }, []);

  const handleAddToCart = (product) => {
    // Force productType to 'download' on add
    const payload = { ...product, productType: 'download' };
    if (!payload.display_image) {
      payload.display_image = pickImage(product);
    }
    dispatch(addToCart(payload));
  };

  const carouselImages = [
    'https://dlbbjeohndiwtofitwec.supabase.co/storage/v1/object/public/assets/images/video-carousel-1.webp',
    'https://dlbbjeohndiwtofitwec.supabase.co/storage/v1/object/public/assets/images/video-carousel-2.webp',
    'https://dlbbjeohndiwtofitwec.supabase.co/storage/v1/object/public/assets/images/video-carousel-3.webp',
    'https://dlbbjeohndiwtofitwec.supabase.co/storage/v1/object/public/assets/images/video-carousel-4.webp',
    'https://dlbbjeohndiwtofitwec.supabase.co/storage/v1/object/public/assets/images/video-carousel-5.webp',
  ];

  if (loading) {
    return <div className="container mx-auto px-4 py-16 text-center">Loading media products...</div>;
  }

  const list = asList(products);

  return (
    <>
      <Head>
        <title>Manyagi Media — Stories in Motion</title>
        <meta name="description" content="Discover our video and audio storytelling content." />
      </Head>

      <Hero
        kicker="Media"
        title="Stories in Motion"
        lead="Experience our narratives through video and audio."
        carouselImages={carouselImages}
        height="h-[600px]"
      >
        <Link href="#products" className="btn bg-blue-600 text-white py-2 px-4 rounded hover:bg-blue-700 transition">
          Watch Now
        </Link>
      </Hero>

      <section id="products" className="container mx-auto px-4 py-16 grid grid-cols-1 md:grid-cols-3 gap-5">
        {list.length === 0 ? (
          <div className="col-span-full text-center text-lg">No media items found.</div>
        ) : (
          list.map((product) => (
            <Card
              key={product.id}
              title={product.name}
              description={product.description}
              image={product.display_image || pickImage(product)}
              category="media"
              buyButton={product}
              onBuy={() => handleAddToCart(product)}
            />
          ))
        )}
      </section>

      <section id="subscribe" className="container mx-auto px-4 py-16">
        <SubscriptionForm
          formId="8427850"
          uid="637df68a03"
          title="Subscribe to Media Updates"
          description="Get notified about new videos and audio releases."
        />
      </section>

      <Recommender />
    </>
  );
}


===== FILE: pages/privacy.js  (size=1152 bytes) =====
// pages/privacy.js
import Head from 'next/head';
import Link from 'next/link';
import Hero from '../components/Hero';

export default function Privacy() {
  return (
    <>
      <Head>
        <title>Manyagi — Privacy Policy</title>
        <meta name="description" content="Read Manyagi’s Privacy Policy." />
      </Head>
      <Hero
        kicker="Privacy"
        title="Privacy Policy"
        lead="Learn how we protect your data."
        carouselImages={['/images/og-home.webp']}
        height="h-[600px]"
      />
      <section className="container mx-auto px-4 py-16 text-sm space-y-4">
        <h2 className="text-xl font-bold">1. Data Collection</h2>
        <p>We collect minimal data for services like subscriptions and orders.</p>
        <h2 className="text-xl font-bold">2. GDPR Compliance</h2>
        <p>We protect your data under GDPR. Contact us at <a href="mailto:support@manyagi.net" className="text-blue-600 hover:underline">support@manyagi.net</a>.</p>
        <h2 className="text-xl font-bold">3. Cookies</h2>
        <p>We use cookies for analytics.</p>
      </section>
    </>
  );
}


===== FILE: pages/products.js  (size=2200 bytes) =====
import Head from 'next/head';
import { useEffect, useState } from 'react';
import { supabase } from '@/lib/supabase';

export default function Products() {
  const [products, setProducts] = useState([]);
  const [division, setDivision] = useState('all');

  useEffect(() => {
    (async () => {
      let query = supabase.from('products').select('*');
      if (division !== 'all') query = query.eq('division', division);
      const { data } = await query;
      setProducts(data || []);
    })();
  }, [division]);

  const handleBuy = async (productId) => {
    const { data: session } = await supabase.auth.getSession();
    const response = await fetch('/api/stripe/charge', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ productId, userId: session?.session?.user?.id })
    });
    const { url } = await response.json();
    window.location.href = url; // Redirect to Stripe checkout
  };

  return (
    <>
      <Head>
        <title>Products - Manyagi</title>
      </Head>
      <div className="container mx-auto px-4 py-8">
        <h1 className="text-4xl font-bold mb-4">Products</h1>
        <select onChange={(e) => setDivision(e.target.value)} className="p-2 border rounded mb-4">
          <option value="all">All Divisions</option>
          <option value="publishing">Publishing</option>
          <option value="designs">Designs</option>
          <option value="capital">Capital</option>
          <option value="tech">Tech</option>
          <option value="media">Media</option>
          <option value="realty">Realty</option>
        </select>
        <ul className="grid grid-cols-1 md:grid-cols-3 gap-5">
          {products.map((p) => (
            <li key={p.id} className="border p-4 rounded">
              <h2 className="text-2xl">{p.name} - ${p.price} ({p.division})</h2>
              <button
                onClick={() => handleBuy(p.id)}
                className="mt-2 p-2 bg-green-500 text-white rounded"
              >
                Buy Now
              </button>
            </li>
          ))}
        </ul>
      </div>
    </>
  );
}


===== FILE: pages/publishing.js  (size=9672 bytes) =====
import Head from 'next/head';
import Link from 'next/link';
import { useEffect, useState, useMemo } from 'react';
import { useDispatch } from 'react-redux';
import { addToCart } from '../lib/cartSlice';
import SubscriptionForm from '../components/SubscriptionForm';
import Recommender from '../components/Recommender';
import Hero from '../components/Hero';
import Card from '../components/Card';
import { supabase } from '@/lib/supabase';

const asList = (v) => (Array.isArray(v) ? v : Array.isArray(v?.items) ? v.items : []);
const pickImage = (p) => p?.thumbnail_url || p?.display_image || p?.image_url || p?.image || '/placeholder.png';

export default function Publishing() {
  const dispatch = useDispatch();
  const [products, setProducts] = useState([]);
  const [carouselImages, setCarouselImages] = useState([]);
  const [total, setTotal] = useState(0);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    (async () => {
      try {
        // Fetch products
        const res = await fetch('/api/products?division=publishing');
        const json = await res.json();
        const list = asList(json).map((p) => ({ ...p, display_image: pickImage(p) }));
        setProducts(list);
        setTotal(Number(json?.total ?? list.length));

        // Fetch carousel images from assets
        const { data: assetData } = await supabase
          .from('assets')
          .select('file_url')
          .eq('division', 'publishing')
          .eq('purpose', 'carousel')
          .order('created_at', { ascending: false });
        const fetchedImages = assetData?.map((d) => d.file_url) || [];
        setCarouselImages(
          fetchedImages.length > 0
            ? fetchedImages
            : [
                'https://dlbbjeohndiwtofitwec.supabase.co/storage/v1/object/public/assets/images/book-carousel-1.webp',
                'https://dlbbjeohndiwtofitwec.supabase.co/storage/v1/object/public/assets/images/book-carousel-2.webp',
                'https://dlbbjeohndiwtofitwec.supabase.co/storage/v1/object/public/assets/images/book-carousel-3.webp',
                'https://dlbbjeohndiwtofitwec.supabase.co/storage/v1/object/public/assets/images/book-carousel-4.webp',
              ]
        );
      } catch (err) {
        console.error('Publishing fetch error:', err);
        setProducts([]);
        setTotal(0);
        setCarouselImages([]); // No fallback here to encourage admin uploads
      } finally {
        setLoading(false);
      }
    })();
  }, []);

  const handleAddToCart = (product) => {
    dispatch(addToCart({ ...product, productType: 'book' }));
  };

  if (loading) {
    return (
      <div className="container mx-auto px-4 py-16 text-center">
        Loading books...
      </div>
    );
  }

  const list = asList(products);

  return (
    <>
      <Head>
        <title>Manyagi Publishing — Discover Epic Tales</title>
        <meta name="description" content="Immerse yourself in captivating novels and poetry by D.N. Manyagi." />
      </Head>

      <Hero
        kicker="Publishing"
        title="Uncover Hidden Worlds"
        lead="Dive into stories that transport you to new realms — and take a piece home."
        carouselImages={carouselImages}
        height="h-[600px]"
      >
        <Link href="#books" className="btn bg-blue-600 text-white py-2 px-4 rounded hover:bg-blue-700 transition">
          Explore Our Library
        </Link>
      </Hero>

      {/* Testimonials */}
      <section className="container mx-auto px-4 py-8">
        <h2 className="text-3xl font-bold mb-6 text-center">What Readers Say</h2>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-5">
          <div className="card p-4 text-center">
            <p>"A masterpiece of fantasy!"</p>
            <p className="text-sm mt-2">- Jenna Bush Hager</p>
          </div>
          <div className="card p-4 text-center">
            <p>"Captivating from page one."</p>
            <p className="text-sm mt-2">- Anonymous Reader</p>
          </div>
          <div className="card p-4 text-center">
            <p>"Poetry that resonates."</p>
            <p className="text-sm mt-2">- Literary Critic</p>
          </div>
        </div>
      </section>

      <section id="books" className="container mx-auto px-4 py-16 grid grid-cols-1 md:grid-cols-3 gap-5">
        {list.length === 0 ? (
          <div className="col-span-full text-center text-lg">
            No publishing items found.
          </div>
        ) : (
          list.map((product) => {
            const m = product.metadata || {};
            const buyUrl =
              m.amazon_url ||
              m.kindle_url ||
              m.paperback_url ||
              m.store_url ||
              null;

            const alsoLinks = [
              m.kindle_url ? { label: "Kindle", url: m.kindle_url } : null,
              m.paperback_url ? { label: "Paperback", url: m.paperback_url } : null,
            ].filter(Boolean);

            const chips = [
              m.format ? String(m.format).toUpperCase() : null,
              m.year ? `Y${m.year}` : null,
            ].filter(Boolean);

            return (
              <Card
                key={product.id}
                title={product.name}
                description={product.description}
                image={product.display_image || pickImage(product)}
                category="publishing"
                tags={Array.isArray(product.tags) ? product.tags : []}
              >
                {/* Meta chips */}
                {chips.length > 0 && (
                  <div className="flex flex-wrap gap-2 justify-center mb-2">
                    {chips.map((c) => (
                      <span key={c} className="text-xs px-2 py-1 rounded-full bg-gray-100 text-gray-700 dark:bg-gray-800 dark:text-gray-200">
                        {c}
                      </span>
                    ))}
                  </div>
                )}

                {/* Primary CTAs */}
                <div className="flex flex-wrap gap-3 mt-2 justify-center">
                  {buyUrl && (
                    <a
                      href={buyUrl}
                      target="_blank"
                      rel="noopener noreferrer"
                      className="btn bg-blue-600 text-white py-2 px-4 rounded hover:bg-blue-700 transition"
                    >
                      Get Your Copy
                    </a>
                  )}
                  {m.pdf_url && (
                    <a
                      href={m.pdf_url}
                      target="_blank"
                      rel="noopener noreferrer"
                      className="btn bg-gray-700 text-white py-2 px-4 rounded hover:bg-gray-800 transition"
                    >
                      Preview Chapter 1
                    </a>
                  )}
                </div>

                {/* Secondary storefront links */}
                {alsoLinks.length > 0 && (
                  <div className="text-xs text-gray-600 mt-3">
                    Also available:{' '}
                    {alsoLinks.map((l, i) => (
                      <a
                        key={l.label}
                        href={l.url}
                        target="_blank"
                        rel="noopener noreferrer"
                        className="underline hover:text-blue-700"
                      >
                        {l.label}{i < alsoLinks.length - 1 ? ', ' : ''}
                      </a>
                    ))}
                  </div>
                )}
              </Card>
            );
          })
        )}

        {/* Free chapter promo card (evergreen) */}
        <Card
          title="Legacy - Chapter 1 (Free)"
          description="Sample the first chapter at no cost."
          image="https://dlbbjeohndiwtofitwec.supabase.co/storage/v1/object/public/assets/images/legacy-chapter-1.webp"
          category="publishing"
        >
          <a
            href="https://dlbbjeohndiwtofitwec.supabase.co/storage/v1/object/public/assets/pdfs/Legacy_of_the_Hidden_Clans_(Chapter_1)_by_D.N._Manyagi.pdf"
            className="btn bg-green-600 text-white py-2 px-4 rounded hover:bg-green-700 transition"
            target="_blank"
            rel="noopener noreferrer"
          >
            Download Free Preview
          </a>
        </Card>
      </section>

      {/* Curated Recommendations */}
      <section className="container mx-auto px-4 py-8">
        <h2 className="text-3xl font-bold mb-6 text-center">Our Top Picks</h2>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-5">
          {products.slice(0, 3).map((p) => (
            <Card
              key={p.id}
              title={p.name}
              description={p.description}
              image={p.display_image}
            />
          ))}
          {products.length < 3 && <p className="col-span-full text-center opacity-70">Add more products in admin to populate recommendations.</p>}
        </div>
      </section>

      {/* RESTORED: subscribe block from production */}
      <section id="subscribe" className="container mx-auto px-4 py-16">
        <SubscriptionForm
          formId="8427848"
          uid="637df68a01"
          title="Subscribe to Publishing Updates"
          description="Get new chapters, poetry releases."
        />
      </section>

      <Recommender />
    </>
  );
}


===== FILE: pages/realty.js  (size=3298 bytes) =====
import Head from 'next/head';
import Link from 'next/link';
import { useEffect, useState } from 'react';
import Hero from '../components/Hero';
import Card from '../components/Card';
import SubscriptionForm from '../components/SubscriptionForm';
import Recommender from '../components/Recommender';

// Helpers
const asList = (v) => (Array.isArray(v) ? v : Array.isArray(v?.items) ? v.items : []);
const pickImage = (p) => p?.thumbnail_url || p?.display_image || p?.image_url || p?.image || '/placeholder.png';

export default function RealtyList() {
  const [properties, setProperties] = useState([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    (async () => {
      try {
        const res = await fetch('/api/products?division=realty');
        const json = await res.json();
        const list = asList(json).map((p) => ({ ...p, display_image: pickImage(p) }));
        setProperties(list);
      } catch (err) {
        console.error('Realty list fetch error:', err);
        setProperties([]); // fallback to empty
      } finally {
        setLoading(false);
      }
    })();
  }, []);

  const carouselImages = [
    'https://dlbbjeohndiwtofitwec.supabase.co/storage/v1/object/public/assets/images/rental-bigbear.webp',
    'https://dlbbjeohndiwtofitwec.supabase.co/storage/v1/object/public/assets/images/og-realty.webp',
  ];

  if (loading) return <div className="text-center py-20">Loading properties...</div>;

  return (
    <>
      <Head>
        <title>Manyagi Realty — Premium Properties & Rentals</title>
        <meta name="description" content="Discover story-inspired stays and premium rentals." />
      </Head>

      <Hero
        kicker="Realty"
        title="Story-Inspired Stays"
        lead="Escape to properties that bring our worlds to life."
        carouselImages={carouselImages}
        height="h-[600px]"
      >
        <Link href="#properties" className="btn bg-blue-600 text-white py-2 px-4 rounded hover:bg-blue-700 transition">
          Browse Rentals
        </Link>
      </Hero>

      <section id="properties" className="container mx-auto px-4 py-16 grid grid-cols-1 md:grid-cols-3 gap-5">
        {properties.length === 0 ? (
          <div className="col-span-full text-center text-lg">No properties available yet. Check back soon!</div>
        ) : (
          properties.map((prop) => (
            <Card
              key={prop.id}
              title={prop.name}
              description={prop.description || 'Premium rental property'}
              image={prop.display_image}
              category="realty"
            >
              <Link href={`/realty/${prop.slug}`} className="btn bg-yellow-500 text-black py-2 px-4 rounded hover:bg-yellow-400 transition">
                View Details & Book
              </Link>
            </Card>
          ))
        )}
      </section>

      <section id="subscribe" className="container mx-auto px-4 py-16">
        <SubscriptionForm
          formId="8427851"
          uid="637df68a04"
          title="Stay Updated on Realty Listings"
          description="Get notified about new properties and rentals."
        />
      </section>

      <Recommender />
    </>
  );
}


===== FILE: pages/signup.js  (size=3189 bytes) =====
import Head from 'next/head';
import { useState } from 'react';
import { useRouter } from 'next/router';
import { supabase } from '@/lib/supabase';
import Hero from '../components/Hero';

export default function Signup() {
  const router = useRouter();
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState(null);
  const [loading, setLoading] = useState(false);

  const handleSignup = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError(null);
    try {
      const { data, error: authError } = await supabase.auth.signUp({ email, password });
      if (authError) throw authError;
      await supabase.from('users').insert({
        id: data.user.id,
        email,
        role: 'user',
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      });
      router.push('/dashboard');
    } catch (err) {
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  const handleGoogleSignup = async () => {
    try {
      const { error } = await supabase.auth.signInWithOAuth({ provider: 'google' });
      if (error) throw error;
    } catch (err) {
      setError(err.message);
    }
  };

  return (
    <>
      <Head>
        <title>Sign Up - Manyagi</title>
      </Head>
      <Hero
        kicker="Join Us"
        title="Sign Up"
        lead="Create your Manyagi account."
        carouselImages={[]}
        height="h-screen"
      >
        <div className="card max-w-md mx-auto bg-white text-black glass p-8 rounded-lg shadow-xl">
          {error && <p className="text-red-500 mb-4 text-center">{error}</p>}
          <form onSubmit={handleSignup} className="space-y-4">
            <input
              type="email"
              placeholder="Email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              className="w-full p-3 border rounded bg-white text-black"
              required
            />
            <input
              type="password"
              placeholder="Password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              className="w-full p-3 border rounded bg-white text-black"
              required
            />
            <button
              type="submit"
              disabled={loading}
              className="w-full p-3 bg-black text-white rounded disabled:opacity-50 hover:bg-gray-800 transition"
            >
              {loading ? 'Processing...' : 'Sign Up'}
            </button>
          </form>
          <button
            onClick={handleGoogleSignup}
            className="mt-4 w-full p-3 bg-blue-500 text-white rounded hover:bg-blue-600 transition"
          >
            Sign Up with Google
          </button>
          <button
            onClick={() => router.push('/login')}
            className="mt-4 text-blue-500 underline w-full text-center"
          >
            Already have an account? Login
          </button>
        </div>
      </Hero>
    </>
  );
}


===== FILE: pages/tech.js  (size=5050 bytes) =====
import Head from 'next/head';
import Link from 'next/link';
import { useEffect, useState } from 'react';
import { useDispatch } from 'react-redux';
import { addToCart } from '../lib/cartSlice';
import SubscriptionForm from '../components/SubscriptionForm';
import Recommender from '../components/Recommender';
import Hero from '../components/Hero';
import Card from '../components/Card';

// Helpers
const asList = (v) => {
  if (Array.isArray(v)) return v;
  if (Array.isArray(v?.items)) return v.items;
  return [];
};
const pickImage = (p) =>
  p?.thumbnail_url || p?.display_image || p?.image_url || p?.image || '';

export default function Tech() {
  const [products, setProducts] = useState([]);
  const [total, setTotal] = useState(0);
  const [loading, setLoading] = useState(true);
  const dispatch = useDispatch();

  useEffect(() => {
    (async () => {
      try {
        const res = await fetch('/api/products?division=tech');
        const json = await res.json();
        const list = asList(json).map((p) => ({
          ...p,
          display_image: pickImage(p),
          productType: p.productType || 'download',
        }));
        if (list.length === 0) {
          const fallback = [
            {
              id: 'daito',
              name: 'Daito App License',
              price: 49.99,
              display_image:
                'https://dlbbjeohndiwtofitwec.supabase.co/storage/v1/object/public/assets/images/daito-screenshot.webp',
              division: 'tech',
              description: 'Access to Daito productivity app',
              productType: 'download',
            },
          ];
          setProducts(fallback);
          setTotal(fallback.length);
        } else {
          setProducts(list);
          setTotal(Number(json?.total ?? list.length));
        }
      } catch (error) {
        console.error('Tech fetch error:', error);
        const fallback = [
          {
            id: 'daito',
            name: 'Daito App License',
            price: 49.99,
            display_image:
              'https://dlbbjeohndiwtofitwec.supabase.co/storage/v1/object/public/assets/images/daito-screenshot.webp',
            division: 'tech',
            description: 'Access to Daito productivity app',
            productType: 'download',
          },
        ];
        setProducts(fallback);
        setTotal(fallback.length);
      } finally {
        setLoading(false);
      }
    })();
  }, []);

  const handleAddToCart = (product) => {
    const payload = { ...product, productType: 'download' };
    if (!payload.display_image) payload.display_image = pickImage(product);
    dispatch(addToCart(payload));
  };

  const carouselImages = [
    'https://dlbbjeohndiwtofitwec.supabase.co/storage/v1/object/public/assets/images/app-carousel-1.webp',
    'https://dlbbjeohndiwtofitwec.supabase.co/storage/v1/object/public/assets/images/app-carousel-2.webp',
    'https://dlbbjeohndiwtofitwec.supabase.co/storage/v1/object/public/assets/images/app-carousel-3.webp',
  ];

  if (loading) {
    return (
      <div className="container mx-auto px-4 py-16 text-center">
        Loading tech products...
      </div>
    );
  }

  const list = asList(products);

  return (
    <>
      <Head>
        <title>Manyagi Tech — Innovative Apps</title>
        <meta
          name="description"
          content="Explore our innovative apps for commerce and community."
        />
      </Head>

      <Hero
        kicker="Tech"
        title="Innovate with Manyagi Tech"
        lead="Apps designed for productivity and connection."
        carouselImages={carouselImages}
        height="h-[600px]"
      >
        <Link
          href="#products"
          className="btn bg-blue-600 text-white py-2 px-4 rounded hover:bg-blue-700 transition"
        >
          Explore Apps
        </Link>
      </Hero>

      <section
        id="products"
        className="container mx-auto px-4 py-16 grid grid-cols-1 md:grid-cols-3 gap-5"
      >
        {list.length === 0 ? (
          <div className="col-span-full text-center text-lg">
            No tech products found.
          </div>
        ) : (
          list.map((product) => (
            <Card
              key={product.id}
              title={product.name}
              description={product.description}
              image={product.display_image || pickImage(product)}
              category="tech"
              buyButton={product}
              onBuy={() => handleAddToCart(product)}
            />
          ))
        )}
      </section>

      <section id="subscribe" className="container mx-auto px-4 py-16">
        <SubscriptionForm
          formId="8427849"
          uid="637df68a02"
          title="Stay Updated on Tech Releases"
          description="Get notified about new apps and updates."
        />
      </section>

      <Recommender />
    </>
  );
}


===== FILE: pages/terms.js  (size=1167 bytes) =====
// pages/terms.js
import Head from 'next/head';
import Link from 'next/link';
import Hero from '../components/Hero';

export default function Terms() {
  return (
    <>
      <Head>
        <title>Manyagi — Terms of Service</title>
        <meta name="description" content="Read Manyagi’s Terms of Service." />
      </Head>
      <Hero
        kicker="Terms"
        title="Terms of Service"
        lead="Understand the terms governing our services."
        carouselImages={['/images/og-home.webp']}
        height="h-[600px]"
      />
      <section className="container mx-auto px-4 py-16 text-sm space-y-4">
        <h2 className="text-xl font-bold">1. Introduction</h2>
        <p>By using Manyagi, you agree to these terms.</p>
        <h2 className="text-xl font-bold">2. Services</h2>
        <p>Details about our publishing, designs, capital, tech, and media services.</p>
        <h2 className="text-xl font-bold">3. GDPR Compliance</h2>
        <p>We comply with GDPR for data protection. See our <Link href="/privacy" className="text-blue-600 hover:underline">Privacy Policy</Link>.</p>
      </section>
    </>
  );
};


===== FILE: pages/thank-you.js  (size=5496 bytes) =====
// pages/thank-you.js
import Head from 'next/head';
import Link from 'next/link';
import Hero from '../components/Hero';
import { FaTwitter, FaFacebook, FaInstagram } from 'react-icons/fa';
import { useRouter } from 'next/router';
import { useEffect, useState } from 'react';

export default function ThankYou() {
  const router = useRouter();
  const { session_id } = router.query;
  const [orderDetails, setOrderDetails] = useState(null);
  const [error, setError] = useState('');
  const site = process.env.NEXT_PUBLIC_SITE_URL || (typeof window !== 'undefined' ? window.location.origin : 'https://manyagi.net');

  const carouselImages = [
    '/images/og-designs.webp',
    '/images/merch-carousel-1.webp',
    '/images/merch-carousel-2.webp',
  ];

  useEffect(() => {
    if (session_id) {
      fetch(`/api/order-details?session_id=${session_id}`)
        .then(res => res.json())
        .then(data => {
          if (data.error) setError(data.error);
          else setOrderDetails(data);
        })
        .catch(err => {
          console.error('Fetch order details error:', err);
          setError('Failed to fetch order details');
        });
    }
  }, [session_id]);

  const leadText = error
    ? 'Your purchase is complete, but we couldn’t fetch order details. Check your email for confirmation.'
    : orderDetails
    ? (orderDetails.type === 'signals'
        ? 'Your subscription is active. Check Telegram for your invite/message.'
        : orderDetails.type === 'download'
        ? 'Your download is ready below.'
        : orderDetails.type === 'book'
        ? 'Your eBook is ready below.'
        : orderDetails.type === 'merch'
        ? 'Thanks! We’ll notify you when it ships.'
        : 'Your purchase is complete. Check your email for details.')
    : 'Your purchase is complete. Check your email for details.';

  // Supabase public asset URLs (avoid missing /public/assets/)
  const BOT_LICENSE_PDF =
    'https://dlbbjeohndiwtofitwec.supabase.co/storage/v1/object/public/assets/pdfs/bot-license.pdf';
  const LEGACY_CH1_PDF =
    'https://dlbbjeohndiwtofitwec.supabase.co/storage/v1/object/public/assets/pdfs/Legacy_of_the_Hidden_Clans_(Chapter_1)_by_D.N._Manyagi.pdf';

  return (
    <>
      <Head>
        <title>Manyagi — Thank You</title>
        <meta name="description" content="Thank you for your purchase!" />
      </Head>
      <Hero
        kicker="Thank You"
        title="Order Confirmed"
        lead={leadText}
        carouselImages={carouselImages}
        height="h-[600px]"
      >
        <Link href="/designs" className="btn bg-blue-600 text-white py-4 px-6 rounded hover:scale-105 transition">
          Continue Shopping
        </Link>
      </Hero>
      <section className="container mx-auto px-4 py-16">
        <h2 className="text-3xl font-bold mb-6">Share Your Purchase</h2>
        {error && <p className="text-red-500 text-base mb-4">{error}</p>}

        {orderDetails && (
          <div className="space-y-3 mb-8">
            <p>Type: {orderDetails.type}</p>

            {orderDetails.type === 'merch' && (
              <p>
                Track your order at <Link href="/track" className="text-blue-600 hover:underline">/track</Link> (you’ll need your order ID).
              </p>
            )}

            {orderDetails.type === 'download' && (
              <a
                href={BOT_LICENSE_PDF}
                className="text-blue-600 hover:underline"
                target="_blank"
                rel="noopener noreferrer"
              >
                Download your license
              </a>
            )}

            {orderDetails.type === 'book' && (
              <a
                href={LEGACY_CH1_PDF}
                className="text-blue-600 hover:underline"
                target="_blank"
                rel="noopener noreferrer"
              >
                Download eBook
              </a>
            )}

            {orderDetails.type === 'signals' && (
              <div className="space-y-2">
                <p>Welcome to Manyagi Capital Signals!</p>
                {process.env.NEXT_PUBLIC_TELEGRAM_INVITE_LINK ? (
                  <a
                    href={process.env.NEXT_PUBLIC_TELEGRAM_INVITE_LINK}
                    target="_blank"
                    rel="noopener noreferrer"
                    className="inline-block text-blue-600 hover:underline"
                  >
                    Join the Telegram group
                  </a>
                ) : (
                  <p>Check your Telegram DMs for the invite link.</p>
                )}
              </div>
            )}
          </div>
        )}

        <div className="flex gap-4 text-lg">
          <a href={`https://x.com/share?url=${encodeURIComponent(site)}`} className="text-blue-600 hover:text-blue-500" aria-label="Share on X">
            <FaTwitter size={24} />
          </a>
          <a href={`https://facebook.com/sharer/sharer.php?u=${encodeURIComponent(site)}`} className="text-blue-600 hover:text-blue-500" aria-label="Share on Facebook">
            <FaFacebook size={24} />
          </a>
          <a href="https://instagram.com/manyagi.official" className="text-blue-600 hover:text-blue-500" aria-label="Instagram">
            <FaInstagram size={24} />
          </a>
        </div>
      </section>
    </>
  );
}


===== FILE: pages/track.js  (size=2442 bytes) =====
// pages/track.js
import Head from 'next/head';
import { useState } from 'react';

export default function Track() {
  const [orderId, setOrderId] = useState('');
  const [result, setResult] = useState(null);
  const [error, setError] = useState('');

  const handleLookup = async (e) => {
    e.preventDefault();
    setError('');
    setResult(null);
    if (!orderId) {
      setError('Please enter an order ID');
      return;
    }
    try {
      const res = await fetch(`/api/track?order_id=${encodeURIComponent(orderId)}`);
      const data = await res.json();
      if (!res.ok || data.error) {
        setError(data.error || 'Not found');
      } else {
        setResult(data);
      }
    } catch (err) {
      setError('Failed to fetch tracking info');
    }
  };

  return (
    <>
      <Head>
        <title>Track Order — Manyagi</title>
        <meta name="description" content="Look up your Manyagi order status." />
      </Head>
      <section className="container mx-auto px-4 py-16 max-w-2xl">
        <h1 className="text-3xl font-bold mb-4">Track Your Order</h1>
        <form onSubmit={handleLookup} className="flex gap-2 mb-6">
          <input
            type="text"
            value={orderId}
            onChange={(e) => setOrderId(e.target.value)}
            placeholder="Enter your order ID"
            className="flex-1 p-3 border rounded"
          />
          <button type="submit" className="px-4 py-3 bg-black text-white rounded hover:opacity-90">
            Track
          </button>
        </form>
        {error && <p className="text-red-600 mb-4">{error}</p>}
        {result && (
          <div className="border rounded p-4 space-y-2 bg-white">
            <p><strong>Status:</strong> {result.status}</p>
            {result.estimated_delivery && <p><strong>Updated:</strong> {new Date(result.estimated_delivery).toLocaleString()}</p>}
            <p><strong>Division:</strong> {result.division}</p>
            <p><strong>Total:</strong> ${Number(result.total).toFixed(2)}</p>
            <div>
              <strong>Items:</strong>
              <ul className="list-disc ml-6">
                {(result.items || []).map((i, idx) => (
                  <li key={idx}>{i.name} x {i.quantity || 1}</li>
                ))}
              </ul>
            </div>
          </div>
        )}
      </section>
    </>
  );
}


===== FILE: postcss.config.js  (size=82 bytes) =====
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
};


===== FILE: posts/example-post.mdx  (size=286 bytes) =====
---
title: '#001 — The HQ Goes Live'
date: '2025-08-15'
---

We launched a unified HQ for Publishing, Designs, Media, Capital, and Tech. Here’s how we built it and what’s next.

**Key Updates:**
- Publishing: Chapter 1 released.
- Designs: New tee drop.

[Read more...]


===== FILE: project_dump.py  (size=10057 bytes) =====
#!/usr/bin/env python3
"""
Project Structure + Routes + Code Dump → output.txt

- ROUTES: Detects Next.js routes from /app and /pages (or src/pages)
- TREE:   Prints a clean directory tree (skipping junk)
- DUMP:   Appends file contents of text-like files
- NO LIMITS: Use --no-limits to dump 100% of every included file (no truncation)

Usage:
  python project_dump.py [--path .] [--out output.txt]
                         [--max-mb 500] [--per-file-kb 1000]
                         [--show-hidden] [--no-limits]

WARNING: --no-limits can produce VERY large files.
"""

import os, sys, argparse, mimetypes, re, math
from pathlib import Path
from datetime import datetime

# ---- Defaults / Filters ----
SKIP_DIRS = {
    "node_modules", ".git", ".husky", ".turbo", ".cache", ".vercel", ".vscode",
    ".next", "out", "dist", "build", "coverage", "cypress", "playwright",
    "scan_reports", "venv", ".venv", "_scanscratch"
}
NEVER_DUMP_EXTS = {".env", ".env.local", ".env.development", ".env.production", ".env.test"}
NEVER_DUMP_FILES = {"package-lock.json", "package.lock.json", "yarn.lock", "pnpm-lock.yaml", "bun.lockb"}
TEXT_EXTS = {
    ".ts",".tsx",".js",".jsx",".mjs",".cjs",
    ".json",".toml",".yaml",".yml",
    ".css",".scss",".sass",".less",
    ".md",".mdx",".html",".svg",".txt",
    ".dockerignore",".gitignore",".gitattributes",".conf",".cfg",".ini",".sh",".py",".rb",".go",".java",".rs",".php"
}

def is_text_file(p: Path) -> bool:
    if p.suffix.lower() in TEXT_EXTS:
        return True
    mime, _ = mimetypes.guess_type(str(p))
    if mime and (mime.startswith("text/") or mime in ("application/json","image/svg+xml")):
        return True
    return False

def should_skip_path(p: Path) -> bool:
    parts = set(p.parts)
    return any(d in parts for d in SKIP_DIRS)

def read_text_safe(p: Path, max_bytes: int | None) -> str:
    try:
        if max_bytes is None:  # full read (no truncation)
            return p.read_text(encoding="utf-8", errors="ignore")
        with p.open("rb") as f:
            data = f.read(max_bytes + 1)
        s = data[:max_bytes].decode("utf-8", errors="ignore")
        if len(data) > max_bytes:
            s += "\n\n/* ... truncated ... */\n"
        return s
    except Exception:
        return ""

# ---- ROUTES (Next.js style) ----
def enumerate_next_routes(root: Path):
    routes = {"app_routes": set(), "pages_routes": set(), "dynamic_routes": []}
    app_dir = root / "app"
    pages_dir = root / "pages"
    src_pages = root / "src" / "pages"

    if app_dir.exists():
        for f in app_dir.rglob("page.*"):
            rel = f.relative_to(app_dir)
            parts = rel.parts[:-1]
            clean = [seg for seg in parts if not seg.startswith("(")]
            path = "/" + "/".join(clean)
            path = path or "/"
            if any("[" in seg and "]" in seg for seg in parts):
                routes["dynamic_routes"].append({"path": path, "file": str(f.relative_to(root))})
            routes["app_routes"].add(path)

    for base in [pages_dir, src_pages]:
        if base.exists():
            for f in base.rglob("*"):
                if not f.is_file() or f.suffix not in (".js",".jsx",".ts",".tsx"):
                    continue
                rel = f.relative_to(base)
                stem = rel.with_suffix("").name
                if stem.startswith(("_app","_document","_error")):
                    continue
                parts = rel.with_suffix("").parts
                if stem == "index":
                    path = "/" + "/".join(parts[:-1])
                else:
                    segs = [ (p if not (p.startswith("[") and p.endswith("]")) else f":{p[1:-1]}") for p in parts ]
                    path = "/" + "/".join(segs)
                path = path.rstrip("/") or "/"
                if "[" in rel.name or "]" in rel.name:
                    routes["dynamic_routes"].append({"path": path, "file": str(f.relative_to(root))})
                routes["pages_routes"].add(path)
    return routes

# ---- TREE PRINTER ----
def print_tree_lines(root: Path, show_hidden=False):
    lines = []
    def walk(dir_path: Path, prefix=""):
        try:
            entries = sorted(dir_path.iterdir(), key=lambda p: (p.is_file(), p.name.lower()))
        except PermissionError:
            lines.append(prefix + "🚫 [Permission Denied]")
            return
        filt = []
        for e in entries:
            if not show_hidden and e.name.startswith(".") and e.name not in {".gitignore",".gitattributes",".dockerignore"}:
                continue
            if should_skip_path(e):
                continue
            filt.append(e)
        for i, e in enumerate(filt):
            connector = "└── " if i == len(filt) - 1 else "├── "
            tag = ""
            if e.is_file() and (e.suffix in NEVER_DUMP_EXTS or e.name in NEVER_DUMP_FILES):
                tag = "  (not dumped)"
            lines.append(prefix + connector + e.name + tag)
            if e.is_dir():
                extension = "    " if i == len(filt) - 1 else "│   "
                walk(e, prefix + extension)
    lines.append(f"{root.name}/")
    walk(root, "")
    return lines

# ---- DUMP ----
def dump_files(root: Path, max_total_bytes: float, per_file_bytes: int | None, show_hidden=False):
    """Yield (header_line, content) tuples for each dumped file."""
    written = 0
    infinite = not math.isfinite(max_total_bytes)
    for p in sorted(root.rglob("*"), key=lambda x: str(x).lower()):
        if not p.is_file():
            continue
        if should_skip_path(p):
            continue
        if (not show_hidden) and p.name.startswith(".") and p.name not in {".gitignore",".gitattributes",".dockerignore"}:
            continue
        if p.suffix in NEVER_DUMP_EXTS or p.name in NEVER_DUMP_FILES:
            continue
        if not is_text_file(p):
            continue

        rel = p.relative_to(root)
        size = p.stat().st_size
        header = f"\n\n===== FILE: {rel}  (size={size} bytes) =====\n"

        if not infinite:
            projected = written + len(header.encode("utf-8"))
            if projected > max_total_bytes:
                yield ("\n\n# --- SIZE LIMIT REACHED; remaining files omitted ---\n", "")
                return

        body = read_text_safe(p, max_bytes=per_file_bytes)  # if None → full file
        if not infinite:
            projected = written + len(header.encode("utf-8")) + len(body.encode("utf-8"))
            if projected > max_total_bytes:
                overflow = projected - max_total_bytes
                if overflow > 0:
                    keep = max(0, len(body.encode("utf-8")) - overflow - 64)
                    trimmed = body.encode("utf-8")[:keep].decode("utf-8", errors="ignore")
                    body = trimmed + "\n\n/* ... truncated due to total size limit ... */\n"
                yield (header, body)
                yield ("\n\n# --- SIZE LIMIT REACHED; remaining files omitted ---\n", "")
                return

        yield (header, body)
        if not infinite:
            written += len(header.encode("utf-8")) + len(body.encode("utf-8"))

# ---- MAIN ----
def main():
    ap = argparse.ArgumentParser(description="Project dump: routes + tree + code → output.txt")
    ap.add_argument("--path", default=".", help="Project root (default: .)")
    ap.add_argument("--out", default="output.txt", help="Output file name (default: output.txt)")
    ap.add_argument("--max-mb", type=float, default=500.0, help="Max total MB for code dump (default: 500)")
    ap.add_argument("--per-file-kb", type=int, default=1000, help="Max KB per file (default: 1000)")
    ap.add_argument("--show-hidden", action="store_true", help="Include hidden files/dirs (still skips .env* and lockfiles)")
    ap.add_argument("--no-limits", action="store_true", help="Dump 100% of every included file (no truncation, no total cap)")
    args = ap.parse_args()

    root = Path(args.path).resolve()
    out_path = Path(args.out).resolve()

    if args["no_limits"] if isinstance(args, dict) else args.no_limits:
        max_total_bytes = float("inf")
        per_file_bytes = None  # full file
        size_note = "NO LIMITS (danger: huge output possible)"
    else:
        max_total_bytes = int(args.max_mb * 1024 * 1024)
        per_file_bytes = int(args.per_file_kb * 1024)
        size_note = f"total≈{args.max_mb}MB, per-file≈{args.per_file_kb}KB"

    lines = []
    header = [
        "# PROJECT DUMP",
        f"# Root: {root}",
        f"# Generated: {datetime.now()}",
        f"# Limits: {size_note}",
        "# Skips: " + ", ".join(sorted(SKIP_DIRS)),
        "# Never dump: .env*, lockfiles",
        ""
    ]
    lines.extend(header)

    # ROUTES
    routes = enumerate_next_routes(root)
    all_routes = sorted(routes["app_routes"] | routes["pages_routes"])
    lines.append("## ROUTES (Next.js-style)")
    if all_routes:
        for r in all_routes:
            lines.append(f"- {r}")
    else:
        lines.append("- (none detected)")
    if routes["dynamic_routes"]:
        lines.append("\n### Dynamic Routes")
        for dr in routes["dynamic_routes"]:
            lines.append(f"- {dr['path']}  ← {dr['file']}")
    lines.append("")

    # TREE
    lines.append("## DIRECTORY TREE")
    lines.extend(print_tree_lines(root, show_hidden=args.show_hidden))
    lines.append("")

    # CONTENTS
    lines.append("## FILE CONTENTS")
    for header_line, body in dump_files(root, max_total_bytes, per_file_bytes, show_hidden=args.show_hidden):
        lines.append(header_line.rstrip("\n"))
        if body:
            lines.append(body.rstrip("\n"))

    out_path.write_text("\n".join(lines) + "\n", encoding="utf-8")
    print(f"✅ Dump written to: {out_path}")

if __name__ == "__main__":
    main()


===== FILE: project_structure.txt  (size=6142 bytes) =====

📦 Project structure for: /home/blackkungfu/manyagi-site
Generated: 2025-10-22 15:08:50.554343

├── components
│   ├── Calendar.js
│   ├── Card.js
│   ├── Cart.js
│   ├── ErrorBoundary.js
│   ├── Footer.js
│   ├── Header.js
│   ├── Hero.js
│   ├── Recommender.js
│   ├── SEO.js
│   ├── SignalsSubscriptionForm.js
│   ├── SubscriptionForm.js
│   └── ThemeToggle.js
├── lib
│   ├── cartSlice.js
│   ├── emailTemplates.js
│   ├── emails
│   │   ├── bookingReceipt.js
│   │   └── itineraryEmail.js
│   ├── printful.js
│   ├── realtyHelpers.js
│   ├── sendEmail.js
│   ├── store.js
│   ├── supabase.js
│   └── supabaseAdmin.js
├── next-env.d.ts
├── next-sitemap.config.js
├── next.config.js
├── package-lock.json
├── package.json
├── pages
│   ├── 404.js
│   ├── 500.js
│   ├── _app.js
│   ├── _document.js
│   ├── about.js
│   ├── admin.js
│   ├── api
│   │   ├── admin
│   │   │   ├── fulfillment
│   │   │   │   └── retry.js
│   │   │   ├── quick-create-product.js
│   │   │   ├── upload-asset-multi.js
│   │   │   └── upload-asset.js
│   │   ├── checkout
│   │   │   └── create-session.js
│   │   ├── order-details.js
│   │   ├── posts
│   │   │   └── [slug].js
│   │   ├── posts.js
│   │   ├── products.js
│   │   ├── realty
│   │   │   ├── [slug].js
│   │   │   ├── availability.js
│   │   │   ├── book.js
│   │   │   ├── booking
│   │   │   │   └── [slug].js
│   │   │   ├── booking-success.js
│   │   │   ├── booking-summary.js
│   │   │   ├── cleanup-holds.js
│   │   │   ├── create-checkout.js
│   │   │   ├── external-blocks.js
│   │   │   ├── ical-export.js
│   │   │   ├── ical.js
│   │   │   ├── property.js
│   │   │   ├── quote.js
│   │   │   ├── send-booking-confirmation.js
│   │   │   ├── sync-ical.js
│   │   │   └── test-email.js
│   │   ├── site-config.js
│   │   ├── stripe
│   │   │   └── charge.js
│   │   ├── stripe-webhook.js
│   │   └── track.js
│   ├── blog
│   │   └── [slug].js
│   ├── blog.js
│   ├── capital.js
│   ├── cart.js
│   ├── coming-soon.js
│   ├── contact.js
│   ├── dashboard.js
│   ├── designs.js
│   ├── index.js
│   ├── links.js
│   ├── login.js
│   ├── media.js
│   ├── privacy.js
│   ├── products.js
│   ├── publishing.js
│   ├── realty.js
│   ├── signup.js
│   ├── tech.js
│   ├── terms.js
│   ├── thank-you.js
│   └── track.js
├── postcss.config.js
├── posts
│   └── example-post.mdx
├── public
│   ├── assets
│   │   ├── Legacy_of_the_Hidden_Clans (Chapter 1)_by D.N. Manyagi.pdf
│   │   └── Legacy_of_the_Hidden_Clans (Chapter 2)_by D.N. Manyagi.pdf
│   ├── favicon.ico
│   ├── images
│   │   ├── app-carousel-1.webp
│   │   ├── app-carousel-2.webp
│   │   ├── app-carousel-3.webp
│   │   ├── author-portrait.webp
│   │   ├── book-carousel-1.webp
│   │   ├── book-carousel-2.webp
│   │   ├── book-carousel-3.webp
│   │   ├── book-carousel-4.webp
│   │   ├── chart-hero.webp
│   │   ├── daito-screenshot.webp
│   │   ├── grain-texture.png
│   │   ├── home-carousel-1.webp
│   │   ├── home-carousel-2.webp
│   │   ├── home-carousel-3.webp
│   │   ├── legacy-chapter-1.webp
│   │   ├── logo.svg
│   │   ├── logo.webp
│   │   ├── merch-carousel-1.webp
│   │   ├── merch-carousel-2.webp
│   │   ├── merch-carousel-3.webp
│   │   ├── merch-carousel-4.webp
│   │   ├── merch-carousel-5.webp
│   │   ├── mock-mug-1.webp
│   │   ├── mock-print-1.webp
│   │   ├── mock-tee-1.webp
│   │   ├── og-about.webp
│   │   ├── og-capital.webp
│   │   ├── og-comingsoon.webp
│   │   ├── og-contact.webp
│   │   ├── og-designs.webp
│   │   ├── og-home.webp
│   │   ├── og-media.webp
│   │   ├── og-publishing.webp
│   │   ├── og-tech.webp
│   │   ├── performance-chart.webp
│   │   ├── team-photo.webp
│   │   ├── video-carousel-1.webp
│   │   ├── video-carousel-2.webp
│   │   ├── video-carousel-3.webp
│   │   ├── video-carousel-4.webp
│   │   └── video-carousel-5.webp
│   ├── placeholder.png
│   ├── robots.txt
│   ├── sitemap-0.xml
│   ├── sitemap.xml
│   └── videos
│       └── hero-bg.mp4
├── repo_scanner.py
├── requirements.txt
├── scan_reports
│   ├── build_log.txt
│   ├── manyagi-site_code_dump.gz
│   ├── manyagi-site_code_dump.txt
│   ├── manyagi-site_report.html
│   ├── manyagi-site_report.json
│   ├── manyagi-site_site_map.svg
│   ├── manyagi-site_suggestions.txt
│   ├── manyagi_code_dump.gz
│   ├── manyagi_code_dump.txt
│   ├── manyagi_database_dump.gz
│   ├── manyagi_database_dump.txt
│   ├── manyagi_report.html
│   ├── manyagi_report.json
│   ├── manyagi_site_map.svg
│   └── manyagi_suggestions.txt
├── show_structure.py
├── styles
│   └── globals.css
├── tailwind.config.js
└── tsconfig.json

✅ Done.


===== FILE: public/images/logo.svg  (size=2639 bytes) =====
<?xml version="1.0" encoding="UTF-8"?>
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="200px" height="200px" viewBox="0 0 200 200" version="1.1">
<g id="surface1">
<path style=" stroke:none;fill-rule:nonzero;fill:rgb(0%,0%,0%);fill-opacity:1;" d="M 62 69.132812 C 58.332031 69.867188 59.535156 70.464844 63.933594 70.132812 C 70.132812 69.734375 73.601562 71.066406 78 75.464844 L 81.332031 78.800781 L 81.332031 94.265625 C 81.332031 111.132812 80.867188 113.332031 77.332031 115.132812 C 75.867188 115.867188 76.464844 116 82 116 C 88.199219 116 88.265625 115.933594 86.199219 114.933594 C 82.332031 113 81.933594 111.199219 82.132812 94.535156 L 82.332031 79.667969 L 84.464844 83.132812 C 85.667969 85.066406 89.398438 92.734375 92.734375 100.132812 C 96.132812 107.601562 100 115.464844 101.398438 117.734375 C 104.464844 122.601562 110 127.933594 114.066406 130 C 117.464844 131.800781 126.667969 132.734375 126.667969 131.398438 C 126.667969 130.867188 126.132812 130.734375 125.332031 131 C 122.535156 131.867188 118.535156 130.601562 115.535156 127.800781 C 112 124.535156 108.933594 119.265625 105.398438 110.066406 L 102.734375 103.199219 L 107.800781 93.800781 C 110.535156 88.667969 113.132812 83.667969 113.535156 82.734375 C 114.199219 81.332031 114.398438 83.601562 114.535156 94.332031 C 114.734375 109.464844 114.464844 112.867188 112.601562 114.734375 C 111.332031 116 111.398438 116 118.398438 116 C 125.464844 116 125.464844 116 123.933594 114.734375 L 122.332031 113.464844 L 122.332031 79.867188 L 123.933594 78.601562 L 125.464844 77.332031 L 115.464844 77.332031 L 112.132812 83.464844 C 110.332031 86.867188 107.398438 92.464844 105.667969 95.867188 L 102.535156 102.132812 L 98.332031 93.535156 C 90.066406 76.667969 81.398438 69.535156 68.667969 69 C 65.933594 68.867188 62.933594 68.933594 62 69.132812 Z M 93.667969 89.933594 C 96.800781 95.601562 100.667969 104.398438 103 111 C 104 113.933594 105.132812 116.734375 105.464844 117.132812 C 105.933594 117.734375 105.933594 118 105.464844 118 C 104 118 100.332031 111.265625 94 96.667969 C 91.667969 91.265625 87.332031 82.667969 85.601562 80 C 85 79.066406 86.066406 80 87.867188 81.933594 C 89.734375 83.933594 92.332031 87.535156 93.667969 89.933594 Z M 119.398438 94.800781 C 119.398438 103 119.535156 110.332031 119.734375 111.199219 C 120 112.867188 118.199219 114.066406 117.398438 112.734375 C 117.132812 112.265625 116.800781 105.132812 116.734375 96.867188 C 116.601562 82.265625 116.867188 80 118.734375 80 C 119.066406 80 119.332031 86.667969 119.398438 94.800781 Z M 119.398438 94.800781 "/>
</g>
</svg>


===== FILE: public/robots.txt  (size=114 bytes) =====
# *
User-agent: *
Allow: /

# Host
Host: https://manyagi.net

# Sitemaps
Sitemap: https://manyagi.net/sitemap.xml


===== FILE: repo_scanner.py  (size=31647 bytes) =====
#!/usr/bin/env python3
"""
Repo Scanner Lite v1.1 — Project-only scanner for AI review (no database dump)

Outputs (in ./scan_reports):
- <name>_report.json      → machine-readable summary (now with directory_tree)
- <name>_report.html      → pretty JSON viewer
- <name>_site_map.svg     → routes + suspect links (if graphviz installed)
- <name>_code_dump.txt    → prioritized code dump (no node_modules, no DB dump)
- <name>_code_dump.txt.gz → compressed copy
- build_log.txt           → if --build used
- <name>_suggestions.txt  → AI-friendly improvement suggestions

Improvements in v1.1:
- Deduplication: Ensures no duplicate files in candidates or dump
- Directory Tree: Adds JSON tree of project structure (ignoring skips) to report
- Higher max_mb default (500MB) for fuller dumps
- Better scoring: Boosts core files like README, .github workflows
- File listing: all_files now groups by extension for better overview

Design goals:
- Project only (no database access and no DB section in code dump)
- Skip huge/irrelevant folders (node_modules, .next, dist, etc)
- Include only useful text/config/code assets
- Avoid secret files (.env*) in dumps
- Comprehensive visibility for site flow (tree + all_files + prioritized dump)
"""

from pathlib import Path
import argparse, json, re, subprocess, os, mimetypes, gzip
from datetime import datetime, timezone
from collections import defaultdict

# ------------------ CONFIG ------------------
SKIP_DIRS = {
    "node_modules", ".next", "out", "dist", "build", ".git", ".husky", ".turbo", ".cache",
    ".vercel", ".vscode", "coverage", "cypress", "playwright", "scan_reports", "venv", ".venv", "_scanscratch"
}
TEXT_EXTS = {
    ".ts", ".tsx", ".js", ".jsx", ".mjs", ".cjs",
    ".json", ".toml", ".yaml", ".yml",
    ".css", ".scss", ".sass", ".less",
    ".md", ".mdx", ".html", ".svg", ".txt",
    ".dockerignore", ".gitignore", ".gitattributes"
}
NEVER_DUMP_EXTS = {".env", ".env.local", ".env.development", ".env.production", ".env.test"}
NEVER_DUMP_FILES = {"package-lock.json", "package.lock.json", "yarn.lock", "pnpm-lock.yaml", "bun.lockb"}

# ------------------ UTILITIES ------------------
def read_text(path: Path) -> str:
    try:
        return path.read_text(encoding="utf-8", errors="ignore")
    except Exception:
        return ""

def write_text(path: Path, content: str):
    path.parent.mkdir(parents=True, exist_ok=True)
    path.write_text(content, encoding="utf-8")

def write_compressed_text(path: Path, content: str):
    path.parent.mkdir(parents=True, exist_ok=True)
    with gzip.open(path.with_suffix(".gz"), "wt", encoding="utf-8") as f:
        f.write(content)

def safe_json(obj):
    if isinstance(obj, set): return sorted(list(obj))
    if isinstance(obj, Path): return str(obj)
    if isinstance(obj, defaultdict): return dict(obj)
    raise TypeError(f"Type {type(obj)} not serializable")

def is_text_file(p: Path) -> bool:
    if p.suffix.lower() in TEXT_EXTS:
        return True
    mime, _ = mimetypes.guess_type(str(p))
    if mime and (mime.startswith("text/") or mime in ("application/json", "image/svg+xml")):
        return True
    return False

def should_skip(p: Path) -> bool:
    parts = set(p.parts)
    return any(d in parts for d in SKIP_DIRS)

# ------------------ DIRECTORY TREE ------------------
def generate_directory_tree(root: Path) -> dict:
    tree = defaultdict(lambda: defaultdict(dict))  # Nested dict for tree
    for p in root.rglob("*"):
        if should_skip(p) or not p.is_file() or p.suffix in NEVER_DUMP_EXTS or p.name in NEVER_DUMP_FILES:
            continue
        current = tree
        for part in p.relative_to(root).parts[:-1]:
            if part not in current:
                current[part] = defaultdict(dict)
            current = current[part]
        current[p.name] = None  # Leaf node
    return dict(tree)  # Convert back to regular dict

# ------------------ DETECTORS ------------------
def detect_package_manager(root: Path) -> str:
    if (root / "pnpm-lock.yaml").exists(): return "pnpm"
    if (root / "yarn.lock").exists(): return "yarn"
    if (root / "bun.lockb").exists(): return "bun"
    if (root / "package-lock.json").exists(): return "npm"
    if (root / "package.json").exists(): return "npm"
    return ""

def read_package_json(root: Path) -> dict:
    p = root / "package.json"
    if p.exists():
        try:
            return json.loads(read_text(p) or "{}")
        except Exception:
            return {}
    return {}

def detect_framework(pkg: dict, root: Path) -> str:
    deps = {**pkg.get("dependencies", {}), **pkg.get("devDependencies", {})}
    files = [str(p) for p in root.rglob("*") if p.suffix in (".tsx", ".ts", ".jsx", ".js")]
    if "next" in deps or any("/app/" in f or "/pages/" in f for f in files):
        return "Next.js"
    if "vite" in deps or any("index.html" in str(p) for p in root.rglob("*")):
        return "Vite"
    if "react-scripts" in deps: return "CRA"
    if "astro" in deps: return "Astro"
    if "remix" in deps: return "Remix"
    return "Unknown"

def detect_typescript(root: Path) -> bool:
    return (root / "tsconfig.json").exists() or any(root.rglob("*.ts")) or any(root.rglob("*.tsx"))

def detect_tailwind(root: Path) -> bool:
    if any((root / f).exists() for f in ["tailwind.config.js","tailwind.config.ts","tailwind.config.cjs"]):
        return True
    for css in root.rglob("*.css"):
        if "@tailwind" in read_text(css): return True
    return False

def detect_supabase(root: Path) -> dict:
    res = {"uses_supabase": False, "client_files": [], "env_refs": [], "service_key_client_usage": [], "env_files_present": []}
    supa_pat = re.compile(r"(?:from|require)\s+['\"]@?supabase/supabase-js['\"]")
    env_keys = ["SUPABASE_URL","SUPABASE_ANON_KEY","SUPABASE_SERVICE_ROLE_KEY","SUPABASE_JWT_SECRET"]
    for ext in ("*.js","*.jsx","*.ts","*.tsx"):
        for f in root.rglob(ext):
            if "node_modules" in f.parts: continue
            txt = read_text(f)
            if supa_pat.search(txt):
                res["uses_supabase"] = True
                res["client_files"].append(str(f.relative_to(root)))
            for k in env_keys:
                if k in txt:
                    res["env_refs"].append({"file": str(f.relative_to(root)), "key": k})
            # quick smell: service role key in client-side paths
            if "SUPABASE_SERVICE_ROLE_KEY" in txt and not any(s in str(f).lower() for s in ["/server", "/functions", "/api"]):
                res["service_key_client_usage"].append(str(f.relative_to(root)))
    res["env_files_present"] = [e for e in [".env",".env.local",".env.development",".env.production"] if (root / e).exists()]
    return res

def detect_integrations(root: Path) -> dict:
    res = {
        "firebase": {"used": False, "files": [], "env_refs": []},
        "aws": {"used": False, "files": [], "env_refs": []},
        "auth0": {"used": False, "files": [], "env_refs": []},
        "stripe": {"used": False, "files": [], "env_refs": []},
    }
    patterns = {
        "firebase": re.compile(r"(?:from|require)\s+['\"](firebase|@firebase/[^'\"]+)['\"]"),
        "aws": re.compile(r"(?:from|require)\s+['\"](aws-sdk|@aws-sdk/[^'\"]+)['\"]"),
        "auth0": re.compile(r"(?:from|require)\s+['\"](@auth0/[^'\"]+|auth0)['\"]"),
        "stripe": re.compile(r"(?:from|require)\s+['\"]stripe['\"]"),
    }
    env_keys = {
        "firebase": ["FIREBASE_","GCP_"],
        "aws": ["AWS_ACCESS_KEY_ID","AWS_SECRET_ACCESS_KEY","AWS_REGION"],
        "auth0": ["AUTH0_CLIENT_ID","AUTH0_CLIENT_SECRET","AUTH0_DOMAIN"],
        "stripe": ["STRIPE_SECRET_KEY","STRIPE_PUBLISHABLE_KEY","STRIPE_WEBHOOK_SECRET"],
    }
    for ext in ("*.js","*.jsx","*.ts","*.tsx"):
        for f in root.rglob(ext):
            if "node_modules" in f.parts: continue
            txt = read_text(f)
            for svc, pat in patterns.items():
                if pat.search(txt):
                    res[svc]["used"] = True
                    res[svc]["files"].append(str(f.relative_to(root)))
                for key in env_keys[svc]:
                    if key in txt:
                        res[svc]["env_refs"].append({"file": str(f.relative_to(root)), "key": key})
    return res

def detect_pwa(root: Path) -> dict:
    public = root / "public"
    manifest = None
    sw = None
    sw_reg = []
    icons = []
    for name in ["manifest.json","manifest.webmanifest","site.webmanifest"]:
        p = public / name
        if p.exists():
            manifest = str(p.relative_to(root))
            try:
                j = json.loads(read_text(p))
                manifest = {"path": manifest, "valid": all(k in j for k in ["name","start_url","display"])}
            except Exception:
                manifest = {"path": manifest, "valid": False}
    for cand in ["service-worker.js","sw.js","sw.ts","sw.mjs"]:
        if (public / cand).exists():
            sw = str((public / cand).relative_to(root))
    for f in root.rglob("*.js"):
        if "node_modules" in f.parts: continue
        txt = read_text(f)
        if "workbox" in txt or "registerServiceWorker" in txt:
            sw_reg.append(str(f.relative_to(root)))
    if public.exists():
        for p in public.rglob("*"):
            if p.suffix.lower() in (".png",".svg",".ico",".jpg",".webp") and ("icon" in p.name.lower() or "mask" in p.name.lower()):
                icons.append(str(p.relative_to(root)))
    return {"manifest": manifest, "service_worker": sw, "sw_registration_files": sw_reg, "icons": icons[:50]}

def detect_security_issues(root: Path) -> dict:
    res = {"hardcoded_secrets": [], "insecure_practices": []}
    secret_patterns = [
        (re.compile(r"(?<![\w-])(sk_\w{20,})"), "Stripe Secret Key"),
        (re.compile(r"(?<![\w-])(pk_\w{20,})"), "Stripe Publishable Key"),
        (re.compile(r"(?<![\w-])(eyJ[a-zA-Z0-9-_]+\.[a-zA-Z0-9-_]+\.[a-zA-Z0-9-_]+)"), "JWT Token"),
        (re.compile(r"(?<![\w-])[A-Za-z0-9+/=]{28,}"), "Generic Secret"),
    ]
    insecure_patterns = [
        (re.compile(r"\beval\s*\("), "Use of eval()"),
        (re.compile(r"innerHTML\s*=\s*[^;]+"), "Dynamic innerHTML"),
        (re.compile(r"fetch\([^)]+\)\s*\.then\("), "Uncaught fetch errors"),
    ]
    for ext in ("*.js","*.jsx","*.ts","*.tsx"):
        for f in root.rglob(ext):
            if "node_modules" in f.parts: continue
            txt = read_text(f)
            for pat, desc in secret_patterns:
                for m in pat.finditer(txt):
                    res["hardcoded_secrets"].append({"file": str(f.relative_to(root)), "secret": desc, "match": m.group(0)[:6] + "…"})
            for pat, desc in insecure_patterns:
                if pat.search(txt):
                    res["insecure_practices"].append({"file": str(f.relative_to(root)), "issue": desc})
    return res

def analyze_dependencies(root: Path, pkg: dict) -> dict:
    deps = {**pkg.get("dependencies", {}), **pkg.get("devDependencies", {})}
    used, unused = set(), set(deps.keys())
    for ext in ("*.js","*.jsx","*.ts","*.tsx"):
        for f in root.rglob(ext):
            if "node_modules" in f.parts: continue
            txt = read_text(f)
            for dep in deps:
                if re.search(rf"(?:from|require)\s+['\"]{re.escape(dep)}['\"]", txt):
                    used.add(dep); unused.discard(dep)
    return {"used": sorted(used), "unused": sorted(unused)}

def analyze_file_sizes(root: Path) -> dict:
    large = []
    for p in root.rglob("*"):
        if not p.is_file() or should_skip(p) or p.suffix in NEVER_DUMP_EXTS: continue
        size = p.stat().st_size
        if size > 500 * 1024:
            large.append({"file": str(p.relative_to(root)), "size_bytes": size})
    return {"large_files": large}

# ------------------ ROUTES & LINKS ------------------
def enumerate_routes(root: Path, framework: str) -> dict:
    routes = {"app_routes": set(), "pages_routes": set(), "dynamic_routes": [], "has_auth": False, "has_admin": False, "all_route_files": []}
    app_dir, pages_dir = root / "app", root / "pages"
    if framework == "Next.js":
        if app_dir.exists():
            for f in app_dir.rglob("page.*"):
                rel = f.relative_to(app_dir)
                parts = rel.parts[:-1]
                path = "/" + "/".join(p.replace("(group)", "") for p in parts if not p.startswith("("))
                if any("[" in p and "]" in p for p in parts):
                    routes["dynamic_routes"].append({"path": path or "/", "file": str(f.relative_to(root))})
                routes["app_routes"].add(path or "/")
                routes["all_route_files"].append(str(f.relative_to(root)))
        for dir_ in [pages_dir, root / "src/pages"]:
            if dir_ and dir_.exists():
                for f in dir_.rglob("*"):
                    if f.is_file() and f.suffix in (".js",".jsx",".ts",".tsx"):
                        rel = f.relative_to(dir_)
                        if rel.name.startswith(("_app","_document")): continue
                        parts = rel.with_suffix("").parts
                        if rel.stem == "index":
                            path = "/" + "/".join(parts[:-1])
                        else:
                            path = "/" + "/".join(p if not p.startswith("[") else f":{p.strip('[]')}" for p in parts)
                        path = path.rstrip("/") or "/"
                        if "[" in rel.name or "]" in rel.name:
                            routes["dynamic_routes"].append({"path": path, "file": str(f.relative_to(root))})
                        routes["pages_routes"].add(path)
                        routes["all_route_files"].append(str(f.relative_to(root)))
    all_routes = routes["app_routes"] | routes["pages_routes"]
    routes["has_auth"] = any(p in ("/auth","/login","/signin","/signup") for p in all_routes)
    routes["has_admin"] = "/admin" in all_routes
    return routes

IMPORT_RE = re.compile(r"import\s+[^;]+?\s+from\s+['\"]([^'\"]+)['\"];?")
LINK_RE = re.compile(r"(?:<Link|<a)[^>]*href\s*=\s*['\"]([^'\"]+)['\"]", re.IGNORECASE)
ROUTER_PUSH_RE = re.compile(r"router\.push\(\s*['\"]([^'\"]+)['\"]\s*\)")

def scan_imports_and_links(root: Path, known_routes: set, static_dirs: list) -> dict:
    missing_imports, link_issues = [], []
    for ext in ("*.js","*.jsx","*.ts","*.tsx"):
        for f in root.rglob(ext):
            if "node_modules" in f.parts or should_skip(f): continue
            txt = read_text(f)
            # relative import resolution check
            for m in IMPORT_RE.findall(txt):
                if m.startswith("."):
                    target = (f.parent / m)
                    candidates = [target] + [target.with_suffix(s) for s in (".ts",".tsx",".js",".jsx")] + \
                                 [target / "index.tsx", target / "index.ts", target / "index.js", target / "index.jsx"]
                    if not any(p.exists() for p in candidates):
                        missing_imports.append({"file": str(f.relative_to(root)), "import": m})
            # route/link check
            for href in LINK_RE.findall(txt) + ROUTER_PUSH_RE.findall(txt):
                if href.startswith(("http://","https://","mailto:","#")): continue
                base = "/" + href.strip("/").split("/")[0] if href != "/" else "/"
                is_static = any(href.startswith(s) for s in static_dirs)
                if is_static: continue
                if base and base != "/" and base not in known_routes and not any(r.startswith(base + "/") for r in known_routes):
                    link_issues.append({"file": str(f.relative_to(root)), "href": href, "reason": "Base route not detected"})
    return {"missing_imports": missing_imports, "link_issues": link_issues}

# ------------------ LAYOUT ------------------
def detect_layout_usage(root: Path) -> dict:
    headers, layouts = [], []
    header_used_in_layout = False
    for f in root.rglob("*Header.*"):
        if f.suffix in (".tsx",".ts",".jsx",".js") and "node_modules" not in f.parts:
            headers.append(str(f.relative_to(root)))
    for f in root.rglob("layout.*"):
        if f.suffix in (".tsx",".ts",".jsx",".js"):
            layouts.append(str(f.relative_to(root)))
            txt = read_text(f)
            for hf in headers:
                if Path(hf).stem in txt:
                    header_used_in_layout = True
    pages_import_header = []
    for dir_ in [root / "pages", root / "src/pages", root / "app"]:
        if dir_.exists():
            for ext in ("*.js","*.jsx","*.ts","*.tsx"):
                for f in dir_.rglob(ext):
                    txt = read_text(f)
                    if "Header" in txt and "import" in txt:
                        pages_import_header.append(str(f.relative_to(root)))
    return {"headers": headers, "layouts": layouts, "header_used_in_layout": header_used_in_layout, "pages_import_header": pages_import_header}

# ------------------ BUILD (optional) ------------------
def detect_package_manager_cmd(pm: str):
    return {"npm": ["npm","run","build"], "pnpm": ["pnpm","build"], "yarn": ["yarn","build"], "bun": ["bun","run","build"]}.get(pm, ["npm","run","build"])

def run_build(root: Path, out_dir: Path, timeout_sec=180) -> dict:
    build_ok, logs = False, ""
    try:
        if (root / "package.json").exists():
            pm = detect_package_manager(root)
            cmd = detect_package_manager_cmd(pm)
            proc = subprocess.run(cmd, cwd=root, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, timeout=timeout_sec)
            logs = proc.stdout.decode(errors="ignore")
            build_ok = proc.returncode == 0
            write_text(out_dir / "build_log.txt", logs)
    except Exception as e:
        logs = str(e)
    return {"ok": build_ok, "log_file": str(out_dir / "build_log.txt"), "logs": logs, "build_run": True}

# ------------------ CODE DUMP (project only) ------------------
def score_file_for_priority(root: Path, p: Path) -> int:
    rel = str(p.relative_to(root)).lower()
    name = p.name.lower()
    score = 0
    # Boost README and workflows for overview
    if name == "readme.md": score += 300
    if ".github/workflows/" in rel: score += 250
    if any(seg in rel for seg in ["/app/admin", "/pages/admin", "/admin/"]): score += 200
    if any(k in name for k in ["admin","dashboard"]): score += 120
    if any(k in name for k in ["auth","login","signin","signup","session"]): score += 110
    if "/api/" in rel or rel.startswith("api/"): score += 105
    if any(seg in rel for seg in ["/app/","/pages/","/src/pages/"]): score += 100
    if "middleware." in name: score += 95
    if "/supabase/" in rel or name == "config.toml": score += 140
    if any(k in rel for k in ["supabase","stripe","auth0","firebase","aws"]): score += 120
    if "layout." in name: score += 90
    if any(k in name for k in ["header","navigation","nav"]): score += 80
    if "footer." in name: score += 70
    if name in ("package.json","next.config.js","next.config.mjs","next.config.ts","vite.config.ts","vite.config.js",
                "tsconfig.json","tailwind.config.js","tailwind.config.ts","netlify.toml"):
        score += 150
    if any(seg in rel for seg in ["/src/lib/","/lib/","/src/core/"]): score += 60
    if any(seg in rel for seg in ["/src/hooks/","/hooks/"]): score += 50
    if any(seg in rel for seg in ["/src/components/","/components/"]): score += 40
    if any(seg in rel for seg in ["/styles/","/src/styles/"]): score += 10
    if any(seg in rel for seg in ["/docs/","/documentation/"]): score -= 10
    if p.suffix in (".ts",".tsx"): score += 10
    return score

def create_prioritized_code_dump(name: str, root: Path, out_dir: Path, max_mb: float = 500.0, per_file_kb: int = 1000):
    dump_path = out_dir / f"{name}_code_dump.txt"
    seen_paths = set()  # Dedup tracker
    candidates = []
    for p in root.rglob("*"):
        if not p.is_file(): continue
        if should_skip(p): continue
        if p.suffix in NEVER_DUMP_EXTS or p.name in NEVER_DUMP_FILES: continue
        if not is_text_file(p): continue
        rel_str = str(p.relative_to(root))
        if rel_str in seen_paths: continue  # Skip if already added
        seen_paths.add(rel_str)
        candidates.append((score_file_for_priority(root, p), p))
    candidates.sort(key=lambda x: (-x[0], str(x[1]).lower()))
    max_bytes = int(max_mb * 1024 * 1024)
    per_file_bytes = int(per_file_kb * 1024)
    written = 0
    out_lines = []
    header = (
        f"# PRIORITIZED CODE DUMP for {name}\n"
        f"# Generated: {datetime.now(timezone.utc).isoformat()}Z\n"
        f"# Max size: ~{max_mb} MB; Per-file cap: ~{per_file_kb} KB\n"
        f"# Note: Database snapshot is NOT included here. Upload your SQL JSON separately.\n\n"
    )
    out_lines.append(header)
    for score, p in candidates:
        content = read_text(p)
        if not content: continue
        blob = content
        if len(blob.encode("utf-8")) > per_file_bytes:
            blob = blob[:per_file_bytes] + "\n\n/* ... truncated ... */\n"
        section = f"\n\n===== FILE: {p.relative_to(root)} (score={score}) =====\n{blob}\n"
        projected = written + len(section.encode("utf-8"))
        if projected > max_bytes:
            out_lines.append("\n\n# --- SIZE LIMIT REACHED; remaining files omitted ---\n")
            break
        out_lines.append(section)
        written = projected
    content = "".join(out_lines)
    write_text(dump_path, content)
    write_compressed_text(dump_path, content)
    return str(dump_path)

# ------------------ HTML, SVG, SUGGESTIONS ------------------
def generate_html(report: dict, out_dir: Path):
    html_file = out_dir / f"{report['name']}_report.html"
    json_data = json.dumps(report, indent=2, default=safe_json)
    html_content = f"""<html><head><meta charset="utf-8"><title>{report['name']} Scan Report</title>
<style>body{{font-family:ui-monospace,Menlo,monospace;white-space:pre-wrap;line-height:1.35}}</style></head>
<body><h1>{report['name']} Scan Report</h1>
<pre>{json_data}</pre></body></html>"""
    write_text(html_file, html_content)

def generate_suggestions_txt(report: dict, out_dir: Path):
    suggestions = report.get("ai_suggestions", [])
    txt_file = out_dir / f"{report['name']}_suggestions.txt"
    content = [f"# AI Improvement Suggestions for {report['name']}\n# Generated: {report['timestamp_utc']}\n"]
    for s in suggestions:
        content.append(f"\nIssue: {s['issue']}\nSeverity: {s['severity'].capitalize()}\nFix: {s['fix']}\n")
    write_text(txt_file, "".join(content))
    return str(txt_file)

def generate_svg_site_map(report: dict, out_dir: Path):
    try:
        import graphviz
        svg_file = out_dir / f"{report['name']}_site_map.svg"
        dot = graphviz.Digraph(comment="Site Map", graph_attr={"rankdir": "LR"})
        for r in sorted(report["routes"]["app_routes"] | report["routes"]["pages_routes"]):
            dot.node(r, r, shape="box")
        for dr in report["routes"]["dynamic_routes"]:
            dot.node(dr["path"], dr["path"], shape="box", style="dashed")
        for link in report["imports_links"]["link_issues"]:
            src = link["file"]
            dst = link["href"]
            dot.edge(src, dst, color="red")
        dot.render(svg_file.with_suffix(""), format="svg", cleanup=True)
    except Exception:
        pass

# ------------------ AI SUGGESTIONS ------------------
def generate_ai_suggestions(report: dict) -> list:
    s = []
    if report["supabase"]["service_key_client_usage"]:
        s.append({
            "issue": "Supabase service key referenced in client paths",
            "severity": "high",
            "fix": "Use anon key on client; move service role usage to server-only (API routes, edge functions)."
        })
    if report["imports_links"]["missing_imports"]:
        s.append({
            "issue": "Missing relative imports",
            "severity": "medium",
            "fix": f"Resolve {len(report['imports_links']['missing_imports'])} missing imports or update paths."
        })
    if report["imports_links"]["link_issues"]:
        s.append({
            "issue": "Potential broken internal links",
            "severity": "medium",
            "fix": f"Verify {len(report['imports_links']['link_issues'])} suspect href/router.push targets."
        })
    if not report["pwa"]["manifest"] or not report["pwa"]["service_worker"]:
        s.append({
            "issue": "No PWA setup",
            "severity": "low",
            "fix": "Add web manifest and a service worker (e.g., next-pwa) if you want installability/offline."
        })
    if report["dependencies"]["unused"]:
        s.append({
            "issue": "Unused dependencies",
            "severity": "low",
            "fix": "Remove unused deps to reduce attack surface and bundle size: " + ", ".join(report["dependencies"]["unused"][:15]) + ("..." if len(report["dependencies"]["unused"])>15 else "")
        })
    if report["security"]["hardcoded_secrets"]:
        s.append({
            "issue": "Hardcoded secret-like strings",
            "severity": "critical",
            "fix": "Move secrets to env vars; rotate any exposed keys immediately."
        })
    if report["security"]["insecure_practices"]:
        s.append({
            "issue": "Insecure coding patterns",
            "severity": "medium",
            "fix": "Review uses of eval(), raw innerHTML, and unhandled fetch() for XSS and stability."
        })
    if report["file_sizes"]["large_files"]:
        s.append({
            "issue": "Large source assets",
            "severity": "low",
            "fix": "Compress or lazy-load assets >500KB; consider CDN."
        })
    return s

# ------------------ SUMMARY PRINT ------------------
def print_summary(report: dict):
    def yn(b): return "Yes" if b else "No"
    routes = report["routes"]; imports_links = report["imports_links"]
    supa = report["supabase"]; integrations = report["integrations"]
    security = report["security"]; pwa = report["pwa"]; deps = report["dependencies"]; sizes = report["file_sizes"]
    print("\n==================== SCAN SUMMARY ====================")
    print(f"Project: {report['name']} | Root: {report['root']}")
    print(f"Framework: {report['framework']} | TS: {yn(report['typescript'])} | Tailwind: {yn(report['tailwind'])}")
    print(f"Package Manager: {report['package_manager']}")
    print(f"Routes: {len(routes['app_routes']) + len(routes['pages_routes'])} (Dynamic: {len(routes['dynamic_routes'])})")
    print(f"Auth routes present: {yn(routes['has_auth'])} | Admin route present: {yn(routes['has_admin'])}")
    print(f"Missing Imports: {len(imports_links['missing_imports'])} | Broken Links: {len(imports_links['link_issues'])}")
    print(f"Supabase: {yn(supa['uses_supabase'])} | Service key referenced in client: {yn(bool(supa['service_key_client_usage']))}")
    print(f"Integrations: Firebase {yn(integrations['firebase']['used'])}, AWS {yn(integrations['aws']['used'])}, Auth0 {yn(integrations['auth0']['used'])}, Stripe {yn(integrations['stripe']['used'])}")
    print(f"Security: hardcoded secrets {len(security['hardcoded_secrets'])}, insecure patterns {len(security['insecure_practices'])}")
    print(f"Deps: used {len(deps['used'])}, unused {len(deps['unused'])}")
    print(f"Large Files (>500KB): {len(sizes['large_files'])}")
    man = pwa.get("manifest"); man_ok = (isinstance(man, dict) and man.get("path")) or (isinstance(man, str) and man)
    print(f"PWA: Manifest: {yn(bool(man_ok))}, SW: {yn(bool(pwa.get('service_worker')))}, Icons: {len(pwa.get('icons', []))}")
    print(f"AI Suggestions: {len(report['ai_suggestions'])}")
    print("======================================================\n")

# ------------------ MAIN ------------------
def get_project_vision(root: Path, vision_arg: str = None) -> str:
    if vision_arg: return vision_arg
    readme = root / "README.md"
    return read_text(readme)[:10000] if readme.exists() else "No project vision provided."

def make_report(name: str, root: Path, build_flag: bool, out_dir: Path, max_dump_mb: float, per_file_kb: int, vision: str):
    root = root.resolve()
    out_dir.mkdir(parents=True, exist_ok=True)
    pkg = read_package_json(root)
    report = {
        "name": name,
        "root": str(root),
        "framework": detect_framework(pkg, root),
        "typescript": detect_typescript(root),
        "tailwind": detect_tailwind(root),
        "package_manager": detect_package_manager(root),
        "project_vision": get_project_vision(root, vision),
        "timestamp_utc": datetime.now(timezone.utc).isoformat() + "Z",
        "directory_tree": generate_directory_tree(root),
    }
    report["supabase"] = detect_supabase(root)
    report["integrations"] = detect_integrations(root)
    report["pwa"] = detect_pwa(root)
    report["security"] = detect_security_issues(root)
    report["dependencies"] = analyze_dependencies(root, pkg)
    report["file_sizes"] = analyze_file_sizes(root)
    report["routes"] = enumerate_routes(root, report["framework"])
    report["imports_links"] = scan_imports_and_links(root, report["routes"]["app_routes"] | report["routes"]["pages_routes"], static_dirs=["/public","/assets"])
    report["layout"] = detect_layout_usage(root)
    report["all_files"] = sorted([
        str(p.relative_to(root)) for p in root.rglob("*")
        if p.is_file() and not should_skip(p) and p.suffix not in NEVER_DUMP_EXTS and p.name not in NEVER_DUMP_FILES
    ])
    report["build"] = run_build(root, out_dir) if build_flag else {"build_run": False}
    report["ai_suggestions"] = generate_ai_suggestions(report)

    # write outputs
    json_path = out_dir / f"{name}_report.json"
    write_text(json_path, json.dumps(report, indent=2, default=safe_json))
    generate_html(report, out_dir)
    generate_suggestions_txt(report, out_dir)
    code_dump_path = create_prioritized_code_dump(name, root, out_dir, max_mb=max_dump_mb, per_file_kb=per_file_kb)
    generate_svg_site_map(report, out_dir)

    print_summary(report)
    print(f"Report JSON: {json_path}")
    print(f"Report HTML: {out_dir / (name + '_report.html')}")
    print(f"Site Map SVG: {out_dir / (name + '_site_map.svg')}")
    print(f"Code Dump: {code_dump_path} (also compressed as {code_dump_path}.gz)")
    if report["build"].get("build_run"):
        print(f"Build Log: {out_dir / 'build_log.txt'}")
    return report

def main():
    ap = argparse.ArgumentParser(description="Repo Scanner Lite v1.1 — project-only")
    ap.add_argument("--project", required=True, help="name:path, comma-separated (e.g., manyagi:.)")
    ap.add_argument("--out", default="./scan_reports", help="Output folder")
    ap.add_argument("--build", action="store_true", help="Run package build script")
    ap.add_argument("--max-dump-mb", type=float, default=500.0, help="Max total MB for code dump")
    ap.add_argument("--per-file-kb", type=int, default=1000, help="Max KB per file in code dump")
    ap.add_argument("--vision", default="", help="Project vision description (overrides README.md)")
    args = ap.parse_args()

    out_dir = Path(args.out).resolve()
    for entry in args.project.split(","):
        name, path = entry.split(":", 1)
        root = Path(path).resolve()
        print(f"\nScanning {name} at {root}...")
        make_report(
            name=name,
            root=root,
            build_flag=args.build,
            out_dir=out_dir,
            max_dump_mb=args.max_dump_mb,
            per_file_kb=args.per_file_kb,
            vision=args.vision,
        )

if __name__ == "__main__":
    main()


===== FILE: requirements.txt  (size=51 bytes) =====
requests==2.32.3
colorama==0.4.6
graphviz==0.20.3


===== FILE: show_structure.py  (size=1957 bytes) =====
#!/usr/bin/env python3
"""
Show folder and file structure of a project (clean version).
Skips junk/system folders like node_modules, .git, dist, etc.
Also saves the output to 'project_structure.txt'.

Usage:
    python show_structure.py [path]

If no path is given, it shows the current directory.
"""

import os
import sys
from datetime import datetime

IGNORE_DIRS = {
    "node_modules", ".git", ".next", "dist", "build", "__pycache__", "venv", ".idea", ".vscode"
}
IGNORE_EXTENSIONS = {
    ".pyc", ".log", ".tmp"
}

output_lines = []

def print_tree(start_path, prefix=""):
    try:
        items = sorted(os.listdir(start_path))
    except PermissionError:
        output_lines.append(prefix + "🚫 [Permission Denied]")
        return

    items = [
        name for name in items
        if not (name in IGNORE_DIRS or name.startswith(".") or
                os.path.splitext(name)[1] in IGNORE_EXTENSIONS)
    ]

    for index, name in enumerate(items):
        path = os.path.join(start_path, name)
        connector = "└── " if index == len(items) - 1 else "├── "
        line = prefix + connector + name
        print(line)
        output_lines.append(line)

        if os.path.isdir(path):
            extension = "    " if index == len(items) - 1 else "│   "
            print_tree(path, prefix + extension)

if __name__ == "__main__":
    root_dir = sys.argv[1] if len(sys.argv) > 1 else "."
    abs_path = os.path.abspath(root_dir)

    header = f"\n📦 Project structure for: {abs_path}\nGenerated: {datetime.now()}\n"
    print(header)
    output_lines.append(header)

    print_tree(abs_path)

    output_lines.append("\n✅ Done.\n")

    output_file = os.path.join(abs_path, "project_structure.txt")
    with open(output_file, "w", encoding="utf-8") as f:
        f.write("\n".join(output_lines))

    print(f"\n✅ Structure saved to: {output_file}\n")


===== FILE: styles/globals.css  (size=3958 bytes) =====
/* Tailwind base, components, and utilities */
@tailwind base;
@tailwind components;
@tailwind utilities;

/* Base styles */
body {
  @apply bg-white text-black font-sans antialiased leading-relaxed text-left;
}

h1, h2, h3 {
  @apply font-bold tracking-wide;
}

/* Layout and components */
.container {
  @apply mx-auto px-4;
}

.card {
  @apply bg-white border border-gray-300 rounded-xl shadow-md p-4 mb-6 hover:shadow-xl transition;
}

.btn {
  @apply bg-yellow-500 text-black py-3 px-6 rounded-lg font-bold hover:bg-yellow-400 transition duration-300;
}

.section {
  @apply py-12;
}

/* Hover effects */
.hover\:text-gold:hover {
  color: #FFD700;
}

/* Dark mode */
.dark {
  --bg: #111;
  --text: #fff;
  --gray-100: #333;
  @apply bg-gray-900 text-white;
}

/* Glassmorphism */
.glass {
  background: rgba(255, 255, 255, 0.1);
  backdrop-filter: blur(10px);
  border: 1px solid rgba(255, 255, 255, 0.2);
  box-shadow: 0 4px 30px rgba(0, 0, 0, 0.1);
}

/* Gradient background */
.gradient-bg {
  background: linear-gradient(135deg, #9333ea, #FFD700, #4f46e5);
  background-size: 200% 200%;
  animation: gradientAnimation 15s ease infinite;
}

@keyframes gradientAnimation {
  0% { background-position: 0% 50%; }
  50% { background-position: 100% 50%; }
  100% { background-position: 0% 50%; }
}

/* Blur and grainy effects */
.blur-bg {
  backdrop-filter: blur(5px);
}

.grainy {
  position: relative;
  overflow: hidden;
}

.grainy::after {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: url('/images/grain-texture.png') repeat;
  opacity: 0.05;
  pointer-events: none;
}

/* Bento grid */
.bento-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
  gap: 1rem;
}

/* Prose for text uniformity */
.prose {
  @apply text-left max-w-3xl mx-auto text-gray-800;
}

@tailwind base;
@tailwind components;
@tailwind utilities;

@font-face {
  font-family: 'PlayfulSans';
  src: url('/fonts/playful-sans.woff2') format('woff2');
  font-weight: normal;
  font-style: normal;
}

.font-playful {
  font-family: 'PlayfulSans', sans-serif;
}

.font-serif {
  font-family: 'Georgia', serif;
}



@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 0 0% 3.9%;
    --card: 0 0% 100%;
    --card-foreground: 0 0% 3.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 0 0% 3.9%;
    --primary: 0 0% 9%;
    --primary-foreground: 0 0% 98%;
    --secondary: 0 0% 96.1%;
    --secondary-foreground: 0 0% 9%;
    --muted: 0 0% 96.1%;
    --muted-foreground: 0 0% 45.1%;
    --accent: 0 0% 96.1%;
    --accent-foreground: 0 0% 9%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 89.8%;
    --input: 0 0% 89.8%;
    --ring: 0 0% 3.9%;
    --chart-1: 12 76% 61%;
    --chart-2: 173 58% 39%;
    --chart-3: 197 37% 24%;
    --chart-4: 43 74% 66%;
    --chart-5: 27 87% 67%;
    --radius: 0.5rem;
  }
  .dark {
    --background: 0 0% 3.9%;
    --foreground: 0 0% 98%;
    --card: 0 0% 3.9%;
    --card-foreground: 0 0% 98%;
    --popover: 0 0% 3.9%;
    --popover-foreground: 0 0% 98%;
    --primary: 0 0% 98%;
    --primary-foreground: 0 0% 9%;
    --secondary: 0 0% 14.9%;
    --secondary-foreground: 0 0% 98%;
    --muted: 0 0% 14.9%;
    --muted-foreground: 0 0% 63.9%;
    --accent: 0 0% 14.9%;
    --accent-foreground: 0 0% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 14.9%;
    --input: 0 0% 14.9%;
    --ring: 0 0% 83.1%;
    --chart-1: 220 70% 50%;
    --chart-2: 160 60% 45%;
    --chart-3: 30 80% 55%;
    --chart-4: 280 65% 60%;
    --chart-5: 340 75% 55%;
  }
}



@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}


===== FILE: tailwind.config.js  (size=1987 bytes) =====
/** @type {import('tailwindcss').Config} */
module.exports = {
    darkMode: ['class'],
    content: [
    './pages/**/*.{js,ts,jsx,tsx,mdx}',
    './components/**/*.{js,ts,jsx,tsx,mdx}',
  ],
  theme: {
  	extend: {
  		colors: {
  			yellow: {
  				'400': '#FFCA28',
  				'500': '#FFD700'
  			},
  			purple: {
  				'500': '#6A1B9A'
  			},
  			gray: {
  				'100': '#F5F5F5'
  			},
  			background: 'hsl(var(--background))',
  			foreground: 'hsl(var(--foreground))',
  			card: {
  				DEFAULT: 'hsl(var(--card))',
  				foreground: 'hsl(var(--card-foreground))'
  			},
  			popover: {
  				DEFAULT: 'hsl(var(--popover))',
  				foreground: 'hsl(var(--popover-foreground))'
  			},
  			primary: {
  				DEFAULT: 'hsl(var(--primary))',
  				foreground: 'hsl(var(--primary-foreground))'
  			},
  			secondary: {
  				DEFAULT: 'hsl(var(--secondary))',
  				foreground: 'hsl(var(--secondary-foreground))'
  			},
  			muted: {
  				DEFAULT: 'hsl(var(--muted))',
  				foreground: 'hsl(var(--muted-foreground))'
  			},
  			accent: {
  				DEFAULT: 'hsl(var(--accent))',
  				foreground: 'hsl(var(--accent-foreground))'
  			},
  			destructive: {
  				DEFAULT: 'hsl(var(--destructive))',
  				foreground: 'hsl(var(--destructive-foreground))'
  			},
  			border: 'hsl(var(--border))',
  			input: 'hsl(var(--input))',
  			ring: 'hsl(var(--ring))',
  			chart: {
  				'1': 'hsl(var(--chart-1))',
  				'2': 'hsl(var(--chart-2))',
  				'3': 'hsl(var(--chart-3))',
  				'4': 'hsl(var(--chart-4))',
  				'5': 'hsl(var(--chart-5))'
  			}
  		},
  		fontFamily: {
  			sans: [
  				'Roboto',
  				'sans-serif'
  			]
  		},
  		fontSize: {
  			'14px': '14px',
  			'16px': '16px',
  			'32px': '32px',
  			'36px': '36px',
  			'40px': '40px',
  			'48px': '48px'
  		},
  		borderRadius: {
  			lg: 'var(--radius)',
  			md: 'calc(var(--radius) - 2px)',
  			sm: 'calc(var(--radius) - 4px)'
  		}
  	}
  },
    plugins: [
    require('tailwindcss-animate'),
  ],
};


===== FILE: tsconfig.json  (size=605 bytes) =====
{
  "compilerOptions": {
    "target": "es5",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "baseUrl": ".",
    "paths": {
      "@/*": ["./*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", "**/*.js"],
  "exclude": ["node_modules"]
}
